{"version":3,"sources":["jst.js","JstActiveNav.js","JstAlert.js","JstConnect.js","JstFormInspector.js","JstIcon.js","JstModal.js","JstNum.js","JstOverlay.js","JstStorage.js","JstTable.js","JstTheme.js","JstToast.js","Shomoy.js"],"names":["jst","version","themeAttribute","run","fn","document","readyState","window","addEventListener","runLater","delay","let","d","f","setTimeout","click","ele","id","Array","isArray","substring","getElementById","event","isDef","undefined","val","isUndef","isStr","length","isDomEle","$","eleById","space","setProperty","obj","key","value","hasOwnProperty","onMissId","i","attr","startsWith","Error","random","a","b","Math","floor","sleep","sec","Date","valueOf","getChildOf","selector","parent","find","getChildrenOf","children","queryParam","defaultValue","url","location","URL","searchParams","get","uniqueId","now","toString","this","switchCls","condition","cls","addClass","removeClass","percentToPx","percent","axis","parseFloat","replace","innerWidth","innerHeight","pxToPercent","px","_updateProperties","log","console","msg","warn","err","error","info","Object","defineProperty","prototype","writable","configurable","item","indexOf","index","splice","owns","String","lower","toLowerCase","match","toUpperCase","modal","option","cachedModal","JstOverlay","getPopup","JstModal","alert","JstAlert","shuffle","arr","j","JstActiveNav","#navId","#nav","#slidingSpeed","constructor","slidingSpeed","#slideToggle","e","toggleArrowIcon","up","text","that","actNavHeader","currentTarget","actParent","actGrandParent","actNavGroup","next","actArrowIcon","slidingUp","hasClass","closingNav","each","closedNav","slideUp","icon","slideDown","pathname","routeStartNode","trim","isEmpty","matchedA","aPath","href","includes","#discoverActiveRouteUp","#slideDownLinkGroup","prev","childGroup","closest","#id","#selfId","#option","#dismissed","#closeIcon","#alertDom","#msgEle","#titleEle","#btnYes","#btnNo","#btnAck","#callbackAck","#callbackYes","#callbackNo","#callbackDismiss","#callbackShown","getTheme","#injectDOM","#prepare","#updateCloseIcon","#updateTitle","#updateMsg","#setCloseIconListener","#setBtnListener","#applyTheme","theme","buttons","prepend","#updateBtnVisibility","alertContainer","css","width","height","padding","show","hide","fadeOutTime","cancelable","fadeIn","fadeOut","title","html","on","dismiss","#dispatchBtnEvent","isDark","#show","_acquire","_handleEscape","isIFramedModal","getShowOverlay","getOpacity","isReady","result","yes","callback","no","acknowledge","onDismiss","onShown","_release","remove","close","setMsg","setTitle","setTheme","setCancelable","hideChoice","choice","btn","showChoice","JstConnect","#isAsync","#resolve","#url","#segments","#timeout","#state","#status","#statusText","#headers","#queryParam","#dataSource","_raw_data","#reqData","#formData","#keepASJSON","#keepJSONKey","#response","#logResponse","#logAsJson","#callbackAny","#callbackOk","#callbackErr","#timeoutCallback","#unresolvedHost","#unknownError","#preRedirect","#postRun","#preRun","#anyPath","#successPath","#errorPath","#insDirAny","#insDirOk","#insDirErr","#noToast","#toastOnAny","#autoHideToast","#toastOnSuccess","#toastOnError","#delay","#hati","#hatiMsg","#hatiStatus","#hatiLevel","HATI_STATUS_SUCCESS","HATI_STATUS_INFO","HATI_STATUS_WARNING","HATI_STATUS_ERROR","HATI_STATUS_UNKNOWN","HATI_LVL_SYSTEM","HATI_LVL_USER","HATI_LVL_UNKNOWN","STATE_REQ_NOT_INITIALIZED","STATE_SERVER_CONNECTION_ESTABLISHED","STATE_REQ_RECEIVED","STATE_REQ_PROCESSING","STATE_REQ_FINISH_AND_READY","STATUS_OK","STATUS_FORBIDDEN","STATUS_PAGE_NOT_FOUND","#contentType","form","json","raw","direct","path","instant","directSuccess","directError","onAny","onOk","onErr","preRun","postRun","preRedirect","onTimeout","onUnresolvedHost","onUnknownError","withHati","#callbackMediator","response","JSON","parse","#resetHati","message","#invokeCallback","success","#invokeRedirect","#showToast","JstToast","#directAfterToast","firstDigit","redirect","#decorateRes","txt","responseRaw","x","#direct","#hit","as","method","#prepareUrl","#removeExtraSign","header","data","append","stringify","parameterize","jqxhr","ajax","crossDomain","timeout","contentType","headers","xhrFields","withCredentials","processData","done","textStatus","jqXHR","#handle","fail","status","responseText","endsWith","join","entries","forEach","k","v","stickyToast","noToast","toastSuccess","toastError","toastTime","time","logResponse","asJson","ms","getAsync","Promise","resolve","post","postAsync","put","putAsync","delete","deleteAsync","to","is","serializeArray","name","keys","files","sendDataSourceAsJSON","segment","push","conStatus","conStatusTxt","level","serverReplied","hatiResponse","isOk","code","isErr","ifOk","ifErr","reqData","string","getUrl","keyOrPos","what","defValue","URLSearchParams","search","split","parseInt","JstFormInspector","SAN_A","SAN_N","SAN_AN","SAN_AS","SAN_AC","SAN_AD","SAN_ANS","SAN_ASC","SAN_AND","SAN_ANSC","SAN_ANSD","SAN_ANSCD","SAN_ISO_DATE","SAN_ISO_TIME","#form","#fromUnauthorized","#canSubmit","#eleConfigArr","#iconOk","#iconErr","#validationConsumer","#validationHandler","eleConfig","inline","nextEle","msgSpan","addColorCls","resettingForm","haveNextEle","havePositionedEle","msgEle","after","feedbackErrOnly","iconSpan","spans","showIcon","showMsg","formJQ","submit","evt","preventDefault","validate","#getEleName","alias","replaceAll","capitalize","#getValue","type","addRule","rules","rule","#addListener","resetForm","reset","firstSubmission","ok","dirty","lastCheckPassed","msgPos","off","submitOnPass","#filter","setFeedbackHandler","nodeName","prop","eleType","change","keyup","filterType","inputType","#handleValidation","#email","#str","#int","#float","#pattern","test","#checkLen","#checkInOption","Number","isSafeInteger","#checkRange","pattern","min","minLen","max","maxLen","inOption","opValue","setIconOk","setIconErr","onValidate","getForm","JstIcon","#iconPool","#apply","animType","#getUId","element","innerHTML","emptyTxt","pad","layout","w","h","iconCls","loaderIconDom","empty","animate","opacity","#getObj","missing","pulse","spin","spinColor","restore","removeAttr","disable","enable","#runSetupFn","#initialized","#hidden","#firstBoot","#modal","#topicCallback","#injectDataId","options","_cacheClient","hasParent","#init","#attachCloseIconListener","#adjustModalSize","modalContainer","modalHeader","#iframeModal","#pageContentModal","decorated","showCloseIcon","iframeThemeCls","loaderText","showLoaderText","iframeOverlayBG","dataAttr","injectData","_setClientData","content","contents","wrapAll","closeIcon","modalContent","position","top","left","right","bottom","getIframeBody","titleDOM","onResume","_setFirstBootComplete","_makeVisible","_hide","onHidden","_prepareForIframe","iframe","body","getTopClient","onHide","onClose","onClosed","isReusable","_deleteClientData","firstBoot","isShown","overlay","isCancelable","setSize","setWidth","setHeight","setShowCloseIcon","getShowCloseIcon","setup","subscribeEvent","topic","unsubscribeEvent","getTopicId","emmitEvent","emitEvent","contentDocument","reusable","JstNum","MONEY_BD","MONEY_GBP","MONEY_USD","format","input","money","lead0","place","addComma","num","isNaN","integer","negative","symbol","abs","integerPart","decimalPart","toFixed","moneyToNum","sign","number","bdNum","englishNumber","char","banglaDigits","0","1","2","3","4","5","6","7","8","9","banglaNumberStr","bdOrdinal","ordinals","10","#theme","#childOverlay","#clientList","#reusableClientList","#injectedData","#ready","#overlay","#topicClientMap","JstTheme","_handleEscapeEvent","escapeEventCheck","keyboard","target","peek","#update","client","#hideOverlay","_unsetChildOM","#updateOverlay","_setChildOM","parentClient","topClient","clientList","pop","#getOpacity","#showOverlay","innerJstOverlay","_prepareParent","_restoreParent","clientId","_getClientData","subscriberId","topicKey","topicMap","topicSubscriberMap","bubbleDown","isUp","c","closePopup","om","getClientData","iframeId","frameElement","getAttribute","JstStorage","set","localStorage","setItem","unset","removeItem","bool","Boolean","getItem","str","int","float","setCookie","expDay","expires","setTime","getTime","toUTCString","cookie","unsetCookie","cookieBool","cookieStr","cookieInt","cookieFloat","ca","decodeURIComponent","charAt","JstTable","#table","#filterBy","#sort","#lastSortedIcon","#lastSortedCol","#hookFilterListener","#loadFilter","#hookSortListener","thisObj","angle","parentElement","rows","toggleClass","toArray","descending","sort","rowA","rowB","cellA","eq","cellB","isNumeric","localeCompare","row","#getColumnIndex","colName","colIndex","cachedFilter","filter","filterDiv","keywordInput","column","keywords","colValue","toggle","#listeners","themeAttr","getComputedStyle","documentElement","getPropertyValue","config","attributes","attributeFilter","observer","MutationObserver","mutation","mutationsList","listener","isLight","ready","observe","listenChange","#setTransitionEffect","setAttribute","#removeTransitionEffect","load","style","createElement","head","appendChild","styleElement","querySelector","parentNode","removeChild","#toastMsg","ERROR","WARNING","SUCCESS","INFO","#injected","#toast","#icon","#msg","#guide","#bar","#autoHide","#callback","autoHide","warning","#stopAnimation","#removeListener","#setup","#startAnimation","#decorate","stop","themeSettings","color","bg","guide","bar","loadToast","Shomoy","#datetime","datetime","toISOString","iso","jQuery","shomoyStart","setHours","shomoyEnd","msInDay","compare","shomoy","shomoyA","shomoyB","dateTime","diff","inMilli","getMilliseconds","getTimestamp","diffHour","diffCompo","day","dayLeft","hour","hourLeft","minLeft","secLeft","round","addMs","setMilliseconds","addSec","getSeconds","setSeconds","addMin","getMinutes","setMinutes","addHour","getHours","addDay","getDate","setDate","addMonth","month","getMonth","setMonth","addYear","year","setFullYear","date","isoDate","slice","isoTime","getYear","getFullYear","getDay","setYear","setHour","setMin","setSec","setMilli","milli","twenty_four","short","monthStr","ampm","uppercase","strTime24","strTime","strDate","separated","strDateTime","isoNow","secInMin","of","secInHour","secInDay","clone","firstDayOfMonth","lastDayOfMonth","listWeek","since","keyDecFn","valDecFn","valDecorator","#valDecorator","keyDecorator","#weekKeyDecorator","weeks","monthTo","yearTo","monthFrom","yearFrom","end","momStartDay","currentMilli","listMonth","#dayKeyDecorator","shoA","shoB","addToNow","from"],"mappings":"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","file":"jst-min.js","sourcesContent":["/**\r\n * JS-Tea is a collection of JavaScript readable classes and utility functions which\r\n * greatly make the web app development easier.\r\n *\r\n * This js file includes all the js-tea library files together and provides the library\r\n * environment to the code.\r\n * */\r\nclass jst {\r\n\t\r\n\tstatic version() {\r\n\t\treturn '5.0.0-beta';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Attribute name to apply theme value to by Theme class.\r\n\t * Must prepend with \"data-\" .\r\n\t * */\r\n\tstatic themeAttribute = 'data-bs-theme';\r\n\t\r\n\t/**\r\n\t * It takes a callback function as argument and executes it immediately when the document\r\n\t * is ready, otherwise it adds an event listener to the window and runs the callback when\r\n\t * the window is ready. So this method is DOM safe.\r\n\t *\r\n\t * @param {function()} fn The callback function.\r\n\t * */\r\n\tstatic run(fn) {\r\n\t\tif (document.readyState === 'complete') fn();\r\n\t\telse window.addEventListener('load', () => fn());\r\n\t}\r\n\t\r\n\t/**\r\n\t * Runs a function after a specified amount delay. Internally uses jst.run()\r\n\t * method. So this method is DOM safe.\r\n\t *\r\n\t * @param {number} delay in seconds\r\n\t * @param {function ()} fn callback to be invoked after the delay specified\r\n\t * */\r\n\tstatic runLater(delay, fn) {\r\n\t\tlet d = delay * 1000;\r\n\t\tlet f = fn;\r\n\t\tjst.run(() => setTimeout(f, d));\r\n\t};\r\n\t\r\n\t/**\r\n\t * This click function can be called from anywhere within the document. The order is\r\n\t * not important as the click event attachment happens after the document ready state.\r\n\t *\r\n\t * @param {string|HTMLElement} ele It can be the id to the element either with # sign or not.\r\n\t * The dom element can also be passed as an argument.\r\n\t *\r\n\t * @param {function(Event)} fn The callback function to execute on event occurs\r\n\t *\r\n\t * */\r\n\tstatic click(ele, fn) {\r\n\t\tjst.run(() => {\r\n\t\t\tif (Array.isArray(ele)) {\r\n\t\t\t\tele = ele[0];\r\n\t\t\t} else if (typeof ele === 'string') {\r\n\t\t\t\tlet id = ele[0] === '#' ? ele.substring(1) : ele;\r\n\t\t\t\tele = document.getElementById(id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (ele == null) return;\r\n\t\t\tele.addEventListener('click', (event) => fn(event));\r\n\t\t});\r\n\t}\r\n\t\r\n\tstatic isDef = (val) => val !== undefined;\r\n\t\r\n\tstatic isUndef = (val) => val === undefined;\r\n\t\r\n\tstatic isStr = (val) => !(!val || val.length === 0);\r\n\t\r\n\tstatic isDomEle = (ele) => $(ele).length !== 0;\r\n\t\r\n\tstatic eleById(val, space = document) {\r\n\t\tif (typeof val !== 'string') return val;\r\n\t\tval = val[0] === '#' ? val.substring(1) : val;\r\n\t\treturn space.getElementById(val);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the property by the key to specified value only if the property\r\n\t * doesn't already exist in the object.\r\n\t *\r\n\t * @param {object} obj\r\n\t * @param {string} key\r\n\t * @param {any} value\r\n\t * */\r\n\tstatic setProperty(obj, key, value) {\r\n\t\tif (obj.hasOwnProperty(key)) return\r\n\t\t\r\n\t\tobj[key] = value\r\n\t}\r\n\t\r\n\t/**\r\n\t * Id attribute of a dom element, or a string id with/without \"#\" can be extracted\r\n\t * safely. The returned id is the string without the \"#\" sign in front.\r\n\t *\r\n\t * @param id {object|string} It can be a dom element, or the id string\r\n\t * @param onMissId {null|string} It is added to element if there is no id attribute for the element\r\n\t * @returns {string|undefined} the provided/extracted id\r\n\t * @throws {Error} when the passed id is neither a dom element nor a string value\r\n\t * */\r\n\tstatic id(id, onMissId = null) {\r\n\t\tif (jst.isDomEle(id)) {\r\n\t\t\tlet i = $(id).attr('id');\r\n\t\t\tif (jst.isUndef(i) && onMissId !== null) {\r\n\t\t\t\t$(id).attr('id', onMissId);\r\n\t\t\t\ti = onMissId;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof id === 'string') {\r\n\t\t\tif (id.startsWith('#')) return id.substring(1);\r\n\t\t\treturn id;\r\n\t\t}\r\n\t\t\r\n\t\tthrow new Error('Id must be one of the following types: dom element, id string with/without \"#\"');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generates a random number from pseudorandom generator using Math.random\r\n\t * method.\r\n\t *\r\n\t * @param a {number} random number start range.\r\n\t * @param b {number} random number end range.\r\n\t * @return {number} a random number in between a & b inclusive\r\n\t * */\r\n\tstatic random = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;\r\n\t\r\n\t/**\r\n\t * This keeps the JavaScript execution thread busy in a loop for specified\r\n\t * amount of seconds\r\n\t *\r\n\t * @param {number} sec amount of seconds to be sleeping for\r\n\t * */\r\n\tstatic sleep(sec) {\r\n\t\tsec = (new Date().valueOf()) + (1000 * sec);\r\n\t\twhile (true) if (new Date().valueOf() >= sec) break;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the first child as specified of the parent.\r\n\t *\r\n\t * @param {string} selector CSS selector\r\n\t * @param {jQuery | HTMLElement} parent The parent element\r\n\t *\r\n\t * @return {HTMLElement} the child element\r\n\t * */\r\n\tstatic getChildOf = (selector, parent) => $(parent).find(`${selector}`)[0];\r\n\t\r\n\t/**\r\n\t * Returns the children as specified by CSS selector of the parent.\r\n\t * @param {string} selector CSS selector\r\n\t * @param {jQuery | HTMLElement} parent The parent element\r\n\t *\r\n\t * @return {[HTMLElement]} the child element\r\n\t * */\r\n\tstatic getChildrenOf = (selector, parent) => $(parent).find(`${selector}`).children();\r\n\t\r\n\t/**\r\n\t * Returns the query parameter value of the URL.\r\n\t *\r\n\t * @param {string} key\r\n\t * @param {?any} defaultValue\r\n\t * @param {?url} url\r\n\t *\r\n\t * @return {string}\r\n\t * */\r\n\tstatic queryParam(key, defaultValue = null, url = null) {\r\n\t\tif (!url) url = document.location;\r\n\t\t\r\n\t\tlet params = new URL(url).searchParams;\r\n\t\tlet value = params.get(key);\r\n\t\t\r\n\t\treturn value != null ? value : defaultValue;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generates a unique id composed of current time in milliseconds followed by\r\n\t * a random number between 1-1000 [inclusive].\r\n\t *\r\n\t * @return {string}\r\n\t * */\r\n\tstatic uniqueId() {\r\n\t\tlet timestamp = Date.now().toString();\r\n\t\tlet random = this.random(1, 1000);\r\n\t\treturn `${timestamp}${random}`;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds or removes a CSS class (cls) from a specified HTML element (ele) based on a given condition.\r\n\t *  - If true, the class will be added.\r\n\t *  - If false, the class will be removed.\r\n\t * @param {boolean} condition\r\n\t * @param {string} cls CSS class\r\n\t * @param {HTMLElement | string} ele Any html element, jquery or even a css selector\r\n\t * */\r\n\tstatic switchCls(condition, cls, ele) {\r\n\t\tif (condition) $(ele).addClass(cls);\r\n\t\telse $(ele).removeClass(cls);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Converts percentage value to pixels based on the specified axis.\r\n\t *\r\n\t * @param {number|string} percent - The percentage value with/without '%' sign at the end.\r\n\t * @param {string} [axis='x'] - The axis to base the conversion on. Default value is 'x'.\r\n\t * @return {number} The converted value in pixels.\r\n\t */\r\n\tstatic percentToPx(percent, axis = 'x') {\r\n\t\tpercent = parseFloat(`${percent}`.replace('%', ''));\r\n\t\t\r\n\t\tlet full = axis === 'x' ? window.innerWidth : window.innerHeight\r\n\t\tlet uni = full * .01\r\n\t\treturn percent * uni;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Converts pixel unit to percentage for the inner height & width of the window\r\n\t *\r\n\t * @param {number|string} px The pixel value with/without 'px' at the end.\r\n\t * @param {'x'|'y'} axis The axis needed to calculate the percentage against either width or height\r\n\t * of the window\r\n\t * @return {number} Percentage value for specified pixel\r\n\t */\r\n\tstatic pxToPercent(px, axis = 'x') {\r\n\t\tpx = parseFloat(`${px}`.replace('px', ''));\r\n\t\t\r\n\t\tlet full = axis === 'x' ? window.innerWidth : window.innerHeight\r\n\t\tlet uni = full * .01\r\n\t\treturn px / uni\r\n\t}\r\n\t\r\n\tstatic _updateProperties() {\r\n\t\twindow.log = (msg) => console.log(msg);\r\n\t\twindow.warn = (msg) => console.warn(msg);\r\n\t\twindow.err = (msg) => console.error(msg);\r\n\t\twindow.info = (msg) => console.info(msg);\r\n\t\t\r\n\t\tObject.defineProperty(Array.prototype, 'isEmpty', {\r\n\t\t\tvalue: function () {\r\n\t\t\t\treturn this.length === 0\r\n\t\t\t},\r\n\t\t\twritable: false, // no code can rewrite/modify the contain method\r\n\t\t\tconfigurable: false // no one can configure this property\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Array.prototype, 'peek', {\r\n\t\t\tvalue: function () {\r\n\t\t\t\treturn this?.[this.length - 1]\r\n\t\t\t},\r\n\t\t\twritable: false, // no code can rewrite/modify the contain method\r\n\t\t\tconfigurable: false // no one can configure this property\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Array.prototype, 'owns', {\r\n\t\t\tvalue: function (item) {\r\n\t\t\t\tif (item === undefined) throw new Error(`Key can't be undefined.`);\r\n\t\t\t\treturn this.indexOf(item) !== -1;\r\n\t\t\t},\r\n\t\t\twritable: false, // no code can rewrite/modify the contain method\r\n\t\t\tconfigurable: false // no one can configure this property\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Array.prototype, 'missing', {\r\n\t\t\tvalue: function (item) {\r\n\t\t\t\tif (item === undefined) throw new Error(`Key can't be undefined.`);\r\n\t\t\t\treturn this.indexOf(item) === -1;\r\n\t\t\t},\r\n\t\t\twritable: false, // no code can rewrite/modify the contain method\r\n\t\t\tconfigurable: false // no one can configure this property\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Array.prototype, 'erase', {\r\n\t\t\tvalue: function (item) {\r\n\t\t\t\tlet index = this.indexOf(item);\r\n\t\t\t\tif (index < 0) return null;\r\n\t\t\t\tlet value = this[index];\r\n\t\t\t\tthis.splice(index, 1);\r\n\t\t\t\treturn value;\r\n\t\t\t}, writable: false, configurable: false\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Array.prototype, 'eraseAt', {\r\n\t\t\tvalue: function (index) {\r\n\t\t\t\tif (typeof index !== 'number' || index < 0) return null;\r\n\t\t\t\tlet value = this[index];\r\n\t\t\t\tthis.splice(index, 1);\r\n\t\t\t\treturn value;\r\n\t\t\t}, writable: false, configurable: false\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Object.prototype, 'owns', {\r\n\t\t\tvalue: function (key) {\r\n\t\t\t\tif (key === undefined) throw new Error(`Key can't be undefined.`);\r\n\t\t\t\treturn this.hasOwnProperty(key);\r\n\t\t\t},\r\n\t\t\twritable: false, // no code can rewrite/modify the contain method\r\n\t\t\tconfigurable: false // no one can configure this property\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Object.prototype, 'missing', {\r\n\t\t\tvalue: function (key) {\r\n\t\t\t\tif (key === undefined) throw new Error(`Key can't be undefined.`);\r\n\t\t\t\treturn !this.owns(key);\r\n\t\t\t},\r\n\t\t\twritable: false, // no code can rewrite/modify the contain method\r\n\t\t\tconfigurable: false // no one can configure this property\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(Object.prototype, 'erase', {\r\n\t\t\tvalue: function (key) {\r\n\t\t\t\tlet val = {key: key, value: this[key]};\r\n\t\t\t\tdelete this[key];\r\n\t\t\t\treturn val;\r\n\t\t\t}, writable: false, configurable: false\r\n\t\t});\r\n\t\t\r\n\t\t/*\r\n\t\t * Add various helpful property methods to objects os Array, String, Object to\r\n\t\t * make it easier for code writing and clarity.\r\n\t\t */\r\n\t\t\r\n\t\tObject.defineProperty(String.prototype, 'capitalize', {\r\n\t\t\tvalue: function (lower = false) {\r\n\t\t\t\treturn (lower ? this.toLowerCase() : this).replace(/(?:^|\\s|[\"'([{])+\\S/g, match => match.toUpperCase());\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tObject.defineProperty(String.prototype, 'isEmpty', {\r\n\t\t\tvalue: function () {\r\n\t\t\t\treturn this.length === 0;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create and returns JstModal instance.\r\n\t *\r\n\t * @param {string} id\r\n\t * @param {object=} option Optional values\r\n\t * @param {string=} option.title Sets the modal title. It can be html or string value. Default is \"jst-Modal\".\r\n\t * @param {boolean=} option.reusable - Whether the modal can be reused. Default is true for non-iFramed modal.\r\n\t * @param {number|string=} option.width - The width of the modal. Default width is 100% of the parent window.\r\n\t * @param {number|string=} option.height - The height of the modal. Default height is 100% of the parent window.\r\n\t * @param {number|string=} option.padding - The padding of the modal. Default is 1rem.\r\n\t * @param {string=} option.url - Url for the iframe webpage\r\n\t * @param {object=} option.injectData - Any data to pass to iFramed modal\r\n\t * @param {boolean=} option.cancelable - Flag makes the modal cancellation status\r\n\t * @param {boolean=} option.overlay - Flag hides/shows the overlay below the modal\r\n\t * @param {boolean=} option.decorated - Flag removes the header from the modal\r\n\t * @param {boolean=} option.showCloseIcon - Whether to show close icon if modal is undecorated\r\n\t * @param {number=} option.opacity - Opacity value 0 to 1 for the overlay behind the modal\r\n\t * @param {'light'|'dark'=} option.theme - Modal theme. Light is default theme\r\n\t * @param {boolean=} option.showLoaderText - Text to display as loader label while fetching iframe paged\r\n\t * @param {string=} option.loaderText - Text to display as loader label while fetching iframe paged\r\n\t * */\r\n\tstatic modal (id, option= {}) {\r\n\t\t/*\r\n\t\t * Check if the modal was cached in the ModalManager\r\n\t\t */\r\n\t\tlet cachedModal = JstOverlay.getPopup(id);\r\n\t\t\r\n\t\tif (cachedModal) return cachedModal;\r\n\t\t\r\n\t\t/*\r\n\t\t * Create a new modal\r\n\t\t */\r\n\t\treturn new JstModal(id, option);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t * @param {object=} option Optional values: w=350, h=auto, cancelable=true, padding=1rem\r\n\t * @param {number|string=} option.title - Title of the alert box\r\n\t * @param {number|string=} option.msg - Message of the alert box\r\n\t * @param {'light'|'dark'=} option.theme - Alert theme. Light is default theme.\r\n\t * @param {number|string=} option.width - Width of alert box. Max value is 75% of the window's inner width.\r\n\t * @param {number|string=} option.height - Height of the alert box. Max height is 75% of the window's inner height.\r\n\t * @param {number|string=} option.padding - Padding for the alert message div\r\n\t * @param {boolean=} option.cancelable - Sets if the alert can be cancelled\r\n\t * */\r\n\tstatic alert (id, option = {}) {\r\n\t\treturn new JstAlert(id, option);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Randomly shuffles the elements of an array using the Fisher-Yates algorithm.\r\n\t *\r\n\t * @param {Array} arr - The array to shuffle.\r\n\t * @returns {Array} - The shuffled array.\r\n\t *\r\n\t * @example\r\n\t * const numbers = [1, 2, 3, 4, 5];\r\n\t * const shuffled = shuffle(numbers); // e.g., [3, 5, 1, 4, 2]\r\n\t */\r\n\tstatic shuffle = (arr) => {\r\n\t\tfor (let i = arr.length - 1; i > 0; i--) {\r\n\t\t\t// Generate a random index from 0 to i\r\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t// Swap elements at i and j\r\n\t\t\t[arr[i], arr[j]] = [arr[j], arr[i]];\r\n\t\t}\r\n\t\treturn arr;\r\n\t};\r\n\t\r\n}\r\n\r\njst._updateProperties();","class JstActiveNav {\r\n\t\r\n\t#navId;\r\n\t#nav;\r\n\t#slidingSpeed;\r\n\t\r\n\tconstructor(id, slidingSpeed = 250) {\r\n\t\tthis.#navId = id;\r\n\t\tthis.#nav = $(`#${this.#navId}`);\r\n\t\tthis.#slidingSpeed = slidingSpeed;\r\n\t\t\r\n\t\t/*\r\n\t\t * Add click listener to all navigation category header\r\n\t\t */\r\n\t\t$(`#${this.#navId} .jst-nav-cat-header`).click((e) => this.#slideToggle(e));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggles arrow icons found in the navigation\r\n\t *\r\n\t * @param {boolean} up indicates whether icon should up/down. True indicates menu is expanded.\r\n\t * @param {HTMLElement} ele element with 'jst-nav-cat-arrow' class which has tbe arrow\r\n\t */\r\n\ttoggleArrowIcon = (up, ele) => {\r\n\t\tif (up) {\r\n\t\t\t$(ele).text('keyboard_arrow_up');\r\n\t\t} else {\r\n\t\t\t$(ele).text('keyboard_arrow_right');\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Callback which handles how to slide down/up navigation link group when user\r\n\t * clicks on any navigation category header.\r\n\t * */\r\n\t#slideToggle (e) {\r\n\t\tlet that = this;\r\n\t\t\r\n\t\tlet actNavHeader = $(e.currentTarget);\r\n\t\t\r\n\t\tlet actParent = actNavHeader.parent();\r\n\t\tlet actGrandParent = actParent.parent();\r\n\t\t\r\n\t\tlet actNavGroup = actNavHeader.next();\r\n\t\tlet actArrowIcon = actNavHeader.find('.jst-nav-cat-arrow');\r\n\t\t\r\n\t\tlet slidingUp = $(actParent).hasClass('jst-nav-cat-expanded');\r\n\t\t\r\n\t\t/*\r\n\t\t * We just simply need to close local sibling nav-groups found\r\n\t\t * in the grandparent nav! ;)\r\n\t\t */\r\n\t\tlet closingNav = actGrandParent.find('.jst-nav-cat.jst-nav-cat-expanded');\r\n\t\tclosingNav.each(function () {\r\n\t\t\tlet closedNav = this;\r\n\t\t\t\r\n\t\t\t$(this).find('.jst-nav-link-group').slideUp(that.#slidingSpeed, function () {\r\n\t\t\t\tlet icon = $(closedNav).find('.jst-nav-cat-arrow');\r\n\t\t\t\tthat.toggleArrowIcon(false, icon);\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t// Remove 'jst-nav-cat-expanded' class from all expanded category\r\n\t\tclosingNav.removeClass('jst-nav-cat-expanded');\r\n\t\t\r\n\t\t/*\r\n\t\t * Slide down the nav link group and update the arrow icon\r\n\t\t */\r\n\t\tif (!slidingUp) {\r\n\t\t\tactNavGroup.slideDown(this.#slidingSpeed, () => {\r\n\t\t\t\tactParent.addClass('jst-nav-cat-expanded');\r\n\t\t\t\tthat.toggleArrowIcon(true, actArrowIcon);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\tfind (pathname = '') {\r\n\t\tpathname = pathname.trim();\r\n\t\t\r\n\t\tif (pathname.isEmpty()) {\r\n\t\t\tpathname = new URL(window.location).pathname;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Let's see which anchor tag matches the current url\r\n\t\t */\r\n\t\tlet links = $(`#${this.#navId} a`);\r\n\t\tlet matchedA;\r\n\t\t\r\n\t\tfor (let a of links) {\r\n\t\t\tlet aPath = new URL(a.href).pathname;\r\n\t\t\t\r\n\t\t\tif (pathname.includes(aPath)) {\r\n\t\t\t\tmatchedA = a;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!matchedA) return;\r\n\t\t\r\n\t\tmatchedA = $(matchedA);\r\n\t\tmatchedA.addClass('jst-nav-act-link');\r\n\t\t\r\n\t\tlet routeStartNode = this.#discoverActiveRouteUp(matchedA);\r\n\t\tthis.#slideDownLinkGroup(routeStartNode);\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method starts from the top most navigation category which was marked\r\n\t * with 'jst-nav-cat-expanded' previously. For each 'jst-nav-link-group' found\r\n\t * in expanded nav, it slides down those and update the arrow icon recursively.\r\n\t *\r\n\t * @param {any|jQuery} ele\r\n\t */\r\n\t#slideDownLinkGroup (ele) {\r\n\t\tlet that = this;\r\n\t\t\r\n\t\tele\r\n\t\t\t.children('.jst-nav-link-group')\r\n\t\t\t.slideDown(this.#slidingSpeed, function () {\r\n\t\t\t\t/*\r\n\t\t\t\t * Update arrow icons\r\n\t\t\t\t */\r\n\t\t\t\tlet icon = $(this).prev().children('.jst-nav-cat-arrow');\r\n\t\t\t\tthat.toggleArrowIcon(true, icon);\r\n\t\t\t\t\r\n\t\t\t\t// Recursion base case\r\n\t\t\t\tlet childGroup = $(this).children('.jst-nav-cat.jst-nav-cat-expanded');\r\n\t\t\t\tif (childGroup.length === 0) return;\r\n\t\t\t\t\r\n\t\t\t\tthat.#slideDownLinkGroup(childGroup);\r\n\t\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * On getting a match, this method adds 'jst-nav-cat-expanded' to\r\n\t * each navigation category found down the route to the link recursively.\r\n\t *\r\n\t * @param {any|jQuery} ele\r\n\t * @return {any|jQuery}\r\n\t */\r\n\t#discoverActiveRouteUp (ele) {\r\n\t\tlet parent = ele.closest('.jst-nav-cat');\r\n\t\t\r\n\t\t// Mark it!\r\n\t\tif (parent.length === 1)\r\n\t\t\tparent.addClass('jst-nav-cat-expanded');\r\n\t\t\r\n\t\t/*\r\n\t\t * Recursion base case.\r\n\t\t * We break out of recursion once we hit the nav wrapper!\r\n\t\t */\r\n\t\tif (parent.parent().attr('id') === this.#navId)\r\n\t\t\treturn parent;\r\n\t\t\r\n\t\t// Keep expanding parent\r\n\t\treturn this.#discoverActiveRouteUp(parent.parent());\r\n\t}\r\n\t\r\n}","\r\nclass JstAlert {\r\n\t\r\n\t#id;\r\n\t#selfId;\r\n\t\r\n\t#option;\r\n\t\r\n\t#dismissed = false;\r\n\t\r\n\t#closeIcon;\r\n\t\r\n\t#alertDom;\r\n\t#msgEle;\r\n\t#titleEle;\r\n\t\r\n\t#btnYes;\r\n\t#btnNo;\r\n\t#btnAck;\r\n\t\r\n\t#callbackAck = () => true;\r\n\t#callbackYes;\r\n\t#callbackNo;\r\n\t\r\n\t#callbackDismiss;\r\n\t#callbackShown;\r\n\t\r\n\tget id() {\r\n\t\treturn this.#id;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t * @param {object=} option Optional values: w=350, h=auto, cancelable=true, padding=1rem\r\n\t * @param {number|string=} option.title - Title of the alert box\r\n\t * @param {number|string=} option.msg - Message of the alert box\r\n\t * @param {'light'|'dark'=} option.theme - Alert theme. Light is default theme.\r\n\t * @param {number|string=} option.width - Width of alert box. Max value is 75% of the window's inner width.\r\n\t * @param {number|string=} option.height - Height of the alert box. Max height is 75% of the window's inner height.\r\n\t * @param {number|string=} option.padding - Padding for the alert message div\r\n\t * @param {boolean=} option.cancelable - Sets if the alert can be cancelled\r\n\t * */\r\n\tconstructor(id, option = {}) {\r\n\t\tthis.#id = id;\r\n\t\tthis.#selfId = `jst-alert-${id}`;\r\n\t\t\r\n\t\tjst.setProperty(option, 'title', 'One sec...');\r\n\t\tjst.setProperty(option, 'msg', 'A simple warning message here!');\r\n\t\tjst.setProperty(option, 'width', 350);\r\n\t\tjst.setProperty(option, 'height', 'auto');\r\n\t\tjst.setProperty(option, 'padding', '1rem');\r\n\t\tjst.setProperty(option, 'cancelable', true);\r\n\t\tjst.setProperty(option, 'theme', JstOverlay.getTheme());\r\n\t\t\r\n\t\tthis.#option = option;\r\n\t\t\r\n\t\tjst.run(() => {\r\n\t\t\tthis.#injectDOM();\r\n\t\t\tthis.#prepare();\r\n\t\t\t\r\n\t\t\tthis.#updateCloseIcon(0);\r\n\t\t\tthis.#updateTitle();\r\n\t\t\tthis.#updateMsg();\r\n\t\t\t\r\n\t\t\tthis.#setCloseIconListener();\r\n\t\t\tthis.#setBtnListener();\r\n\t\t\t\r\n\t\t\tthis.#applyTheme(this.#option.theme === 'dark');\r\n\t\t});\r\n\t}\r\n\t\r\n\t#injectDOM() {\r\n\t\tconst alert = `\r\n\t\t\t<div class=\"jst-modal\" id=\"${this.#selfId}\">\r\n\t\t\t\t<div class=\"jst-modal-d-block\">\r\n\t\t\t\t\t<div class=\"jst-modal-container\" style=\"max-width: 75%; max-height: 75%;\">\r\n\t\t\t\t\t\t<div class=\"jst-modal-header\">\r\n\t\t\t\t\t\t\t<h4 id=\"jst-alert-title\"></h4>\r\n\t\t\t\t\t\t\t<span class=\"jst-modal-icon-close\" title=\"Close window\"></span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"jst-alert-msg\" class=\"jst-alert-msg\"></div>\r\n\t\t\t\t\t\t<div class=\"jst-alert-btn-wrapper\">\r\n\t\t\t\t\t\t\t<button id=\"jst-alert-btn-yes\" class=\"jst-btn jst-btn-red\">Yes</button>\r\n\t\t\t\t\t\t\t<button id=\"jst-alert-btn-no\"  class=\"jst-btn jst-btn-dark\">No</button>\r\n\t\t\t\t\t\t\t<button id=\"jst-alert-btn-ack\" class=\"jst-btn jst-btn-teal\">OK</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t\t\r\n\t\t$('body').prepend(alert);\r\n\t\t\r\n\t\tthis.#alertDom = $(`#${this.#selfId}`);\r\n\t\t\r\n\t\tthis.#closeIcon = jst.getChildOf('.jst-modal-icon-close', this.#alertDom);\r\n\t\tthis.#titleEle = jst.getChildOf('#jst-alert-title', this.#alertDom);\r\n\t\tthis.#msgEle = jst.getChildOf('#jst-alert-msg', this.#alertDom);\r\n\t\t\r\n\t\tlet buttons = jst.getChildrenOf('.jst-alert-btn-wrapper', this.#alertDom);\r\n\t\tthis.#btnYes = buttons[0];\r\n\t\tthis.#btnNo = buttons[1];\r\n\t\tthis.#btnAck = buttons[2];\r\n\t}\r\n\t\r\n\t#prepare() {\r\n\t\tthis.#updateBtnVisibility();\r\n\t\t\r\n\t\t// Set the width & height\r\n\t\tlet alertContainer = jst.getChildOf('.jst-modal-container', this.#alertDom);\r\n\t\t$(alertContainer).css('width', this.#option.width);\r\n\t\t$(alertContainer).css('height', this.#option.height);\r\n\t\t\r\n\t\t$(this.#msgEle).css('padding', this.#option.padding);\r\n\t}\r\n\t\r\n\t#updateBtnVisibility () {\r\n\t\t// Hide yes & no buttons if it is an acknowledgment alert\r\n\t\tif (!this.#callbackYes && !this.#callbackNo) {\r\n\t\t\t$(this.#btnYes).hide();\r\n\t\t\t$(this.#btnNo).hide();\r\n\t\t\t$(this.#btnAck).show();\r\n\t\t} else {\r\n\t\t\t$(this.#btnYes).show();\r\n\t\t\t$(this.#btnNo).show();\r\n\t\t\t$(this.#btnAck).hide();\r\n\t\t}\r\n\t}\r\n\t\r\n\t#updateCloseIcon(fadeOutTime = 250) {\r\n\t\tif (!this.#option.cancelable) $(this.#closeIcon).fadeOut(fadeOutTime);\r\n\t\telse $(this.#closeIcon).fadeIn(fadeOutTime);\r\n\t}\r\n\t\r\n\t#updateTitle() {\r\n\t\t// Get the alert title\r\n\t\tlet title =  this.#option.title;\r\n\t\t$(this.#titleEle).html(title);\r\n\t}\r\n\t\r\n\t#updateMsg () {\r\n\t\t$(this.#msgEle).html(this.#option.msg);\r\n\t}\r\n\t\r\n\t#setCloseIconListener() {\r\n\t\t$(this.#closeIcon).on('click', () => this.dismiss());\r\n\t}\r\n\t\r\n\t#setBtnListener() {\r\n\t\t$(this.#btnYes).on('click', ()  => this.#dispatchBtnEvent(1));\r\n\t\t$(this.#btnNo).on('click',  ()  => this.#dispatchBtnEvent(-1));\r\n\t\t$(this.#btnAck).on('click', ()  => this.#dispatchBtnEvent(0));\r\n\t}\r\n\t\r\n\t#applyTheme(isDark) {\r\n\t\tif (isDark) {\r\n\t\t\tthis.#alertDom.addClass('jst-dark');\r\n\t\t} else {\r\n\t\t\tthis.#alertDom.removeClass('jst-dark');\r\n\t\t}\r\n\t}\r\n\t\r\n\t#show() {\r\n\t\t/*\r\n\t\t * Alerts can always acquire overlay manager since they are critical!\r\n\t\t */\r\n\t\tJstOverlay._acquire(this);\r\n\t\t\r\n\t\t$(this.#alertDom).fadeIn(250, () => {\r\n\t\t\tthis.#callbackShown?.(this.#msgEle);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method is invoked when an alert is in display and users hits the escape button.\r\n\t * JstOverlay calls this method automatically.\r\n\t * <br><b>This method should be called directly.</b>\r\n\t * */\r\n\t_handleEscape() {\r\n\t\tif (this.#option.cancelable) this.dismiss();\r\n\t}\r\n\t\r\n\tisIFramedModal = () => false;\r\n\t\r\n\tgetShowOverlay = () => true;\r\n\t\r\n\tgetOpacity = () => -1;\r\n\t\r\n\tshow() {\r\n\t\tif (this.#dismissed) {\r\n\t\t\tconsole.warn('Alert already dismissed');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (JstOverlay.isReady()) {\r\n\t\t\t// show after a bit of delay to avoid overlay animation glitch because of caching\r\n\t\t\tjst.runLater(0.05, () => this.#show());\r\n\t\t} else this.#show();\r\n\t}\r\n\t\r\n\t#dispatchBtnEvent(result) {\r\n\t\tlet dismiss;\r\n\t\t\r\n\t\tif (result === 0) {\r\n\t\t\tdismiss = this.#callbackAck?.() ?? true;\r\n\t\t}\r\n\t\telse if (result === 1) {\r\n\t\t\tdismiss = this.#callbackYes?.() ?? true;\r\n\t\t}\r\n\t\telse if(this.#callbackNo) {\r\n\t\t\tdismiss = this.#callbackNo?.() ?? true;\r\n\t\t}\r\n\t\t\r\n\t\tif (dismiss) this.dismiss();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a callback to be notified when user clicks the ok button on the alert\r\n\t *\r\n\t * @param {function() : boolean} callback Function to be invoked. If dismiss the\r\n\t * alert when the callback returns true.\r\n\t * @return JstAlert\r\n\t * */\r\n\tyes(callback) {\r\n\t\tthis.#callbackYes = callback;\r\n\t\tthis.#callbackAck = null;\r\n\t\t\r\n\t\tthis.#updateBtnVisibility();\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a callback to be notified when user clicks the no button on the alert\r\n\t *\r\n\t * @param {function(): boolean} callback Function to be invoked. If dismiss the\r\n\t * alert when the callback returns true.\r\n\t * @return JstAlert\r\n\t * */\r\n\tno(callback) {\r\n\t\tthis.#callbackNo = callback;\r\n\t\tthis.#callbackAck = null;\r\n\t\t\r\n\t\tthis.#updateBtnVisibility();\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a callback to be notified when user clicks the ok button on the alert.\r\n\t *\r\n\t * @param {function(): boolean} callback Function to be invoked. If dismiss the\r\n\t * alert when the callback returns true.\r\n\t * @return JstAlert\r\n\t * */\r\n\tacknowledge(callback) {\r\n\t\tthis.#callbackAck = callback;\r\n\t\t\r\n\t\tthis.#updateBtnVisibility();\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a callback to be notified when the alert has been dismissed\r\n\t *\r\n\t * @param {function()} callback Function to be invoked\r\n\t * @return JstAlert\r\n\t * */\r\n\tonDismiss(callback) {\r\n\t\tthis.#callbackDismiss = callback;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a callback to be notified when the alert is being shown for the first time\r\n\t *\r\n\t * @param {function(jQuery|any)} callback Function to be invoked\r\n\t * @return JstAlert\r\n\t * */\r\n\tonShown(callback) {\r\n\t\tthis.#callbackShown = callback;\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t* Dismisses the alert and removes its DOM from the document.\r\n\t* */\r\n\tdismiss() {\r\n\t\tif (this.#dismissed) return;\r\n\t\tthis.#dismissed = true;\r\n\t\t\r\n\t\tJstOverlay._release(this);\r\n\t\t\r\n\t\t$(this.#alertDom).fadeOut(250, () => {\r\n\t\t\t// remove the dom\r\n\t\t\t$(this.#alertDom).remove();\r\n\t\t\t\r\n\t\t\tthis.#callbackDismiss?.();\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the alert and removes its DOM from the document.\r\n\t * */\r\n\tclose () {\r\n\t\tthis.dismiss();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Changes the alert message. It can be html or string value\r\n\t *\r\n\t * @param msg {string} Alert message\r\n\t * */\r\n\tsetMsg(msg) {\r\n\t\tthis.#option.msg = msg;\r\n\t\tthis.#updateMsg();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the alert title. It can be html or string value\r\n\t *\r\n\t * @param title {string} Alert title\r\n\t * */\r\n\tsetTitle(title) {\r\n\t\tthis.#option.title =  title;\r\n\t\tthis.#updateTitle();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set theme to the alert.\r\n\t *\r\n\t * @param {'light'|'dark'} theme\r\n\t * */\r\n\tsetTheme(theme) {\r\n\t\t/*\r\n\t\t * Check if the theme was previously applied!\r\n\t\t */\r\n\t\tif (this.#option.theme === theme) return;\r\n\t\t\r\n\t\tthis.#option.theme = theme;\r\n\t\t\r\n\t\tlet dark = theme === 'dark';\r\n\t\tthis.#applyTheme(dark);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Changes the cancelable status of the alert\r\n\t * */\r\n\tsetCancelable(value) {\r\n\t\tthis.#option.cancelable = value;\r\n\t\tthis.#updateCloseIcon();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Hides the alert button as specified by argument\r\n\t *\r\n\t * @param {'yes' | 'no' | 'ok'} choice\r\n\t * */\r\n\thideChoice(choice) {\r\n\t\tlet btn;\r\n\t\tif (choice === 'yes') btn  = this.#btnYes;\r\n\t\telse if (choice === 'no') btn  = this.#btnNo;\r\n\t\telse if (choice === 'ok') btn  = this.#btnAck;\r\n\t\tif (btn) $(btn).fadeOut(250);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Shows the alert button as specified by argument\r\n\t *\r\n\t * @param {'yes' | 'no' | 'ok'} choice\r\n\t * */\r\n\tshowChoice(choice) {\r\n\t\tlet btn;\r\n\t\tif (choice === 'yes') btn  = this.#btnYes;\r\n\t\telse if (choice === 'no') btn  = this.#btnNo;\r\n\t\telse if (choice === 'ok') btn  = this.#btnAck;\r\n\t\tif (btn) $(btn).fadeIn(250);\r\n\t}\r\n\t\r\n}\r\n","(() => {\r\n\r\n    class JstConnect {\r\n\r\n        #isAsync = false\r\n        #resolve = null\r\n\r\n        #url;\r\n        #segments = [];\r\n        #timeout; // number of second for the request to timeout\r\n        #state;\r\n        #status;\r\n        #statusText;\r\n\r\n        // Data buffers\r\n        #headers = {};\r\n        #queryParam = {};\r\n        #dataSource = {_raw_data: ''};\r\n        \r\n        // Data that is sent with the request\r\n        #reqData = {};\r\n        \r\n        // Files data\r\n        #formData = null\r\n        \r\n        // Indicates whether to send data-source as JSON\r\n        #keepASJSON = false\r\n        #keepJSONKey = null\r\n\r\n        // Buffers the server response.\r\n        // If talking hatish, it will have \"response\" key trimmed from the\r\n        // json encoded hati server response\r\n        #response;\r\n\r\n        // Indicates whether to log the response to the console\r\n        #logResponse = false;\r\n\r\n        // Indicates whether it tries to log in json format then falls back to raw text output\r\n        #logAsJson = true;\r\n\r\n        // Various callbacks\r\n        #callbackAny;\r\n        #callbackOk;\r\n        #callbackErr;\r\n\r\n        #timeoutCallback;\r\n        #unresolvedHost;\r\n        #unknownError;\r\n\r\n        #preRedirect;\r\n        #postRun;\r\n        #preRun;\r\n\r\n        // Redirection paths and theirs flags\r\n        #anyPath;\r\n        #successPath;\r\n        #errorPath;\r\n\r\n        #insDirAny = false;\r\n        #insDirOk = false;\r\n        #insDirErr = false;\r\n\r\n        // Variables for toasting\r\n        #noToast = false;\r\n        #toastOnAny = true;\r\n        #autoHideToast = true;\r\n        #toastOnSuccess = false;\r\n        #toastOnError = false;\r\n        #delay = 2;\r\n\r\n        // Hati response variables\r\n        #hati = false;\r\n        #hatiMsg;\r\n        #hatiStatus;\r\n        #hatiLevel;\r\n\r\n        static HATI_STATUS_SUCCESS = 1;\r\n        static HATI_STATUS_INFO = 2;\r\n        static HATI_STATUS_WARNING = 0;\r\n        static HATI_STATUS_ERROR = -1;\r\n        static HATI_STATUS_UNKNOWN = -2;\r\n\r\n        static HATI_LVL_SYSTEM = 0;\r\n        static HATI_LVL_USER = 1;\r\n        static HATI_LVL_UNKNOWN = -2;\r\n\r\n        // XHttp state flags\r\n        STATE_REQ_NOT_INITIALIZED = 0;\r\n        STATE_SERVER_CONNECTION_ESTABLISHED = 1;\r\n        STATE_REQ_RECEIVED = 2;\r\n        STATE_REQ_PROCESSING = 3;\r\n        STATE_REQ_FINISH_AND_READY = 4;\r\n\r\n        // XHttp status flags\r\n        STATUS_OK = 200;\r\n        STATUS_FORBIDDEN = 403;\r\n        STATUS_PAGE_NOT_FOUND = 404;\r\n\r\n        static #contentType = {\r\n            form: 'application/x-www-form-urlencoded',\r\n            json: 'application/json',\r\n            raw: 'text/plain'\r\n        };\r\n\r\n        constructor() {\r\n            this.#timeout = 30000;\r\n\r\n            this.#timeoutCallback = () => {\r\n                console.warn(`Connection timed out`);\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Sets a path to be redirected to after the server response regardless of status/response\r\n         *\r\n         * @param {string} path The path to redirect to\r\n         * @param {boolean} instant Indicates whether to redirect instantly after receiving the response\r\n         * @return {JstConnect}\r\n         * */\r\n        direct(path, instant = false) {\r\n            this.#anyPath = path;\r\n            this.#successPath = null;\r\n            this.#errorPath = null;\r\n            this.#insDirAny = instant;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to redirects to the specified path on successful Hati response\r\n         *\r\n         * @param {string} path The path to be redirected to\r\n         * @param {boolean} instant Indicates whether to redirect instantly after receiving the response\r\n         * @return {JstConnect}\r\n         * */\r\n        directSuccess(path, instant = false) {\r\n            this.#anyPath = null;\r\n            this.#successPath = path;\r\n            this.#insDirOk = instant;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to redirects to the specified path on error Hati response\r\n         *\r\n         * @param {string} path The path to be redirected to\r\n         * @param {boolean} instant Indicates whether to redirect instantly after receiving the response\r\n         * @return {JstConnect}\r\n         * */\r\n        directError(path, instant = false) {\r\n            this.#anyPath = null;\r\n            this.#errorPath = path;\r\n            this.#insDirErr = instant;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Set the callback to be invoked on server response regardless any server\r\n         * response status. This callback can be used as a primary callback for\r\n         * connecting to server which  doesn't talk Hatish.\r\n         * <br>For connection error corresponding callbacks are invoked.\r\n         *\r\n         * @param {function({txt:string, json:object})} callback receives connection\r\n         * result in both raw text format and json format. For json object, it tries\r\n         * to parse the response. If fails then returns null as json value.\r\n         * @return {JstConnect}\r\n         * */\r\n        onAny(callback) {\r\n            this.#callbackAny = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked when the Hati server replied ok response.\r\n         * The callback is invoked for non-hati server, if there is no onAny\r\n         * callback set.\r\n         *\r\n         * @param {function({txt:string, json:object})} callback receives connection\r\n         * result in both raw text format and json format. For json object, it tries\r\n         * to parse the response. If fails then returns null as json value.\r\n         * @return {JstConnect}\r\n         * */\r\n        onOk(callback) {\r\n            this.#callbackOk = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked when the <b>Hati</b> server replied error response\r\n         * <br>\r\n         * This callback is never invoked when JstConnect is decorated with withHati() call. For\r\n         * catching error, use other \"on\" callback functions such as <b>onTimeout(),\r\n         * onUnresolvedHost()</b> etc.\r\n         *\r\n         * @param {function({txt:string, json:object})} callback receives connection\r\n         * result in both raw text format and json format. For json object, it tries\r\n         * to parse the response. If fails then returns null as json value.\r\n         * @return {JstConnect}\r\n         * */\r\n        onErr(callback) {\r\n            this.#callbackErr = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked before connecting to the server\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {JstConnect}\r\n         * */\r\n        preRun(callback) {\r\n            this.#preRun = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked after receiving server response\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {JstConnect}\r\n         * */\r\n        postRun(callback) {\r\n            this.#postRun = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked before redirection after getting any server response\r\n         *\r\n         * @param {function ()} callback\r\n         * */\r\n        preRedirect(callback) {\r\n            this.#preRedirect = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked on timeout connecting to the server on specified url.\r\n         * Default is 30 seconds.\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {JstConnect}\r\n         * */\r\n        onTimeout(callback) {\r\n            this.#timeoutCallback = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked on encountering unresolved host error\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {JstConnect}\r\n         * */\r\n        onUnresolvedHost(callback) {\r\n            this.#unresolvedHost = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked when any unknown error happened\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {JstConnect}\r\n         * */\r\n        onUnknownError(callback) {\r\n            this.#unknownError = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Does further the processing after server replied, and extract Hati API related information accordingly.\r\n         * Also display any Toast was sent by Hati.\r\n         *\r\n         * @return {JstConnect}\r\n         * */\r\n        withHati() {\r\n            this.#hati = true;\r\n            return this;\r\n        }\r\n\r\n        #callbackMediator(response) {\r\n            this.#response = response;\r\n\r\n            if (!this.#hati) {\r\n                this.#noToast = true;\r\n\r\n                /*\r\n                 * Check if http response code starts with 4 or 5 to consider it error!\r\n                 * */\r\n                let firstDigit = this.#status.toString()[0];\r\n                let result = !['4', '5'].includes(firstDigit);\r\n\r\n                this.#invokeRedirect(result);\r\n                this.#invokeCallback(result);\r\n                return;\r\n            }\r\n\r\n            // validate response for hati & store the response\r\n            try {\r\n                this.#response = JSON.parse(response);\r\n                this.#hatiMsg = this.#response.response['msg'];\r\n                this.#hatiStatus = this.#response.response['status'];\r\n\r\n                if (this.#response.response['delay_time'] !== undefined)\r\n                    console.warn('Hati is running in development mode');\r\n            } catch (error) {\r\n                this.#resetHati();\r\n                console.error(`${this.#hatiMsg} ${error.message}.\\nResponse: ${this.#response}`);\r\n                this.#invokeCallback(false);\r\n                return;\r\n            }\r\n\r\n            let success = this.#hatiStatus === JstConnect.HATI_STATUS_SUCCESS;\r\n\r\n            this.#invokeRedirect(success);\r\n\r\n            // after any redirection if we are still here yet, then invoke callbacks accordingly\r\n            this.#invokeCallback(success);\r\n\r\n            // if no toast then we don't go any further down here\r\n            if (this.#noToast) return;\r\n\r\n            // handle sticky toast\r\n            if (!this.#autoHideToast) {\r\n                JstToast.show(this.#hatiStatus, this.#hatiMsg, false);\r\n                this.#directAfterToast(success);\r\n                return;\r\n            }\r\n\r\n            if (this.#toastOnAny) {\r\n                // here we know it is toast for all types of flags.\r\n                this.#showToast(success);\r\n            } else {\r\n                // show toast only it is either success or error\r\n                if (this.#toastOnSuccess && success) this.#showToast(true);\r\n                else if (this.#toastOnError && !success) this.#showToast(false);\r\n            }\r\n        }\r\n\r\n        #invokeRedirect(success) {\r\n            // firstly process any redirection based on no-toast or instant redirection\r\n            if ((this.#insDirAny || this.#noToast) && this.#anyPath) JstConnect.redirect(this.#anyPath);\r\n            if ((this.#insDirOk || this.#noToast) && success) JstConnect.redirect(this.#successPath);\r\n            if ((this.#insDirErr || this.#noToast) && !success) JstConnect.redirect(this.#errorPath);\r\n        }\r\n\r\n        #invokeCallback(success) {\r\n            if (this.#callbackAny != null) {\r\n                this.#callbackAny(this.#decorateRes());\r\n            }\r\n            else {\r\n                if (success && this.#callbackOk != null) this.#callbackOk(this.#decorateRes());\r\n                if (!success && this.#callbackErr != null) this.#callbackErr(this.#decorateRes());\r\n            }\r\n\r\n            if (this.#postRun) this.#postRun();\r\n        }\r\n\r\n        #decorateRes() {\r\n            return {\r\n                txt: this.responseRaw(),\r\n                json: (() => {\r\n                    let x = this.response();\r\n                    return typeof x === 'object' ? x : null\r\n                })()\r\n            }\r\n        }\r\n\r\n        #resetHati() {\r\n            this.#hatiStatus = JstConnect.HATI_STATUS_UNKNOWN;\r\n            this.#hatiLevel = JstConnect.HATI_LVL_UNKNOWN;\r\n            this.#hatiMsg = `Server didn't talk Hatish.`;\r\n        }\r\n\r\n        #directAfterToast(success) {\r\n            if (this.#anyPath) this.#direct(this.#anyPath);\r\n            else {\r\n                if (success) this.#direct(this.#successPath);\r\n                else this.#direct(this.#errorPath);\r\n            }\r\n        }\r\n\r\n        #direct(path) {\r\n            if (this.#preRedirect) this.#preRedirect();\r\n            JstConnect.redirect(path);\r\n        }\r\n\r\n        #showToast(success) {\r\n            JstToast.show(this.#hatiStatus, this.#hatiMsg, true, () => {\r\n                this.#directAfterToast(success);\r\n            }, this.#delay);\r\n        }\r\n\r\n        #hit(as, method) {\r\n            as = as.toLowerCase();\r\n            if (!JstConnect.#contentType.owns(as))\r\n                throw new Error(`The argument 'as' must be one of these: form, json, raw`);\r\n\r\n            let url = this.#prepareUrl();\r\n            url = JstConnect.#removeExtraSign(url);\r\n\r\n            if (!this.#formData) {\r\n                // Otherwise it would interfere with file upload!\r\n                this.header('Content-Type', JstConnect.#contentType[as]);\r\n            }\r\n\r\n            if (['json', 'form'].owns(as)) {\r\n                delete this.#dataSource['_raw_data'];\r\n            }\r\n\r\n            let data;\r\n            \r\n            if (this.#formData) {\r\n                if (this.#keepASJSON) {\r\n                    this.#formData.append(this.#keepJSONKey ?? 'json', JSON.stringify(this.#dataSource));\r\n                } else {\r\n                    for (let i in this.#dataSource) {\r\n                        this.#formData.append(i, this.#dataSource[i]);\r\n                    }\r\n                }\r\n                \r\n                data = this.#formData;\r\n            } else {\r\n                if (as === 'json') {\r\n                    data = JSON.stringify(this.#dataSource);\r\n                } else if (as === 'form') {\r\n                    data = JstConnect.parameterize(this.#dataSource);\r\n                } else {\r\n                    data = JSON.stringify(this.#dataSource['_raw_data']);\r\n                }\r\n            }\r\n            \r\n            // Cache the request data\r\n            this.#reqData = data;\r\n\r\n            if (this.#preRun) this.#preRun();\r\n\r\n            let jqxhr = $.ajax({\r\n                url: url,\r\n                method: method,\r\n                crossDomain: true,\r\n                timeout: this.#timeout,\r\n                contentType: false,\r\n                headers: this.#headers,\r\n                data: data,\r\n                xhrFields: {\r\n                    withCredentials: true\r\n                },\r\n                processData: false\r\n            });\r\n\r\n            jqxhr.done((data, textStatus, jqXHR) => {\r\n                this.#handle(jqXHR, textStatus);\r\n            });\r\n\r\n            jqxhr.fail((jqXHR, textStatus) => {\r\n                this.#handle(jqXHR, textStatus);\r\n            });\r\n        }\r\n\r\n        #handle(jqXHR, textStatus) {\r\n            this.#state = jqXHR.readyState;\r\n            this.#status = jqXHR.status;\r\n            this.#statusText = textStatus;\r\n\r\n            // log the response\r\n            if (this.#logResponse) {\r\n                let data = jqXHR.responseText ?? '';\r\n                if(data.length === 0) {\r\n                    console.info(`Nothing to log`);\r\n                } else if (!this.#logAsJson) {\r\n                    console.log(data);\r\n                } else {\r\n                    try {\r\n                        console.log(JSON.parse(data));\r\n                    } catch {\r\n                        console.log(data);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.#status === this.STATUS_PAGE_NOT_FOUND) {\r\n                if (this.#unresolvedHost != null) this.#unresolvedHost();\r\n            } else if (this.#statusText === 'timeout') {\r\n                if (this.#timeoutCallback != null) this.#timeoutCallback();\r\n            } else {\r\n                this.#callbackMediator(jqXHR.responseText);\r\n            }\r\n\r\n            if (this.#isAsync && this.#resolve) {\r\n                this.#resolve();\r\n\r\n                this.#isAsync = false;\r\n                this.#resolve = null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Removes the & and ? marks if it is happened to be\r\n         * */\r\n        static #removeExtraSign(url) {\r\n            if (url.endsWith('&')) url = url.substring(0, url.length - 1);\r\n            if (url.endsWith('?')) url = url.substring(0, url.length - 1);\r\n            return url;\r\n        }\r\n\r\n        #prepareUrl() {\r\n            let url = this.#url;\r\n\r\n            if (this.#segments.length > 0) {\r\n                if (!url.endsWith('/')) url += '/';\r\n\r\n                url += this.#segments.join('/');\r\n            }\r\n\r\n            url = url + '?'\r\n            Object.entries(this.#queryParam).forEach(([k, v]) =>\r\n                url += `${k}=${v}&`\r\n            )\r\n\r\n            return url;\r\n        }\r\n\r\n        /**\r\n         * Sets the Toast to be sticky when Hati send in a toast\r\n         *\r\n         * @return {JstConnect}\r\n         * */\r\n        stickyToast() {\r\n            this.#autoHideToast = false;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets flag to not show any toast sent by Hati\r\n         *\r\n         * @return {JstConnect}\r\n         * */\r\n        noToast() {\r\n            this.#noToast = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to show only Success response by Hati\r\n         *\r\n         * @return {JstConnect}\r\n         * */\r\n        toastSuccess() {\r\n            this.#toastOnAny = false;\r\n            this.#toastOnSuccess = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to show only Error response by Hati\r\n         *\r\n         * @return {JstConnect}\r\n         * */\r\n        toastError() {\r\n            this.#toastOnAny = false;\r\n            this.#toastOnError = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the duration for toast to be shown\r\n         *\r\n         * @return {JstConnect}\r\n         * */\r\n        toastTime(time) {\r\n            this.#delay = time;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Logs the response for the connection to the console.\r\n         * @param {boolean} asJson When true, it tries to log response as JSON object. If fails then falls back\r\n         * to text output.\r\n         * @return {JstConnect}\r\n         * */\r\n        logResponse(asJson = true) {\r\n            this.#logResponse = true;\r\n            this.#logAsJson = asJson;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets timeout for connection\r\n         *\r\n         * @param {int} ms Number of milliseconds\r\n         * @return {JstConnect}\r\n         * */\r\n        timeout(ms) {\r\n            this.#timeout = ms;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Makes a GET request to the specified url. It ignores the raw data.\r\n         *\r\n         * @param {'form'|'json'} as The Content-Type header is set accordingly when data is sent\r\n         * @throws {Error} When as argument is set as raw data\r\n         * */\r\n        get(as = 'form') {\r\n            as = as.toLowerCase();\r\n            if (!['form', 'json'].owns(as))\r\n                throw new Error('The argument as must be one of these: form, json');\r\n\r\n            delete this.#dataSource._raw_data;\r\n\r\n            // serialize the data source\r\n            let url = this.#prepareUrl();\r\n            this.#reqData = '';\r\n            \r\n            Object.entries(this.#dataSource).forEach(([k, v]) => {\r\n                let data = `${k}=${v}&`;\r\n                \r\n                this.#reqData += data;\r\n                url += data;\r\n            });\r\n            \r\n            url = JstConnect.#removeExtraSign(url);\r\n            \r\n            /*\r\n             * Remove extra # sign from data\r\n             * */\r\n            if (this.#reqData.endsWith('&')) {\r\n                this.#reqData = this.#reqData.substring(0, this.#reqData.length - 1);\r\n            }\r\n\r\n            this.header('Content-Type', JstConnect.#contentType[as]);\r\n\r\n            if (this.#preRun) this.#preRun();\r\n\r\n            let jqxhr = $.ajax({\r\n                url: url,\r\n                method: 'GET',\r\n                crossDomain: true,\r\n                timeout: this.#timeout,\r\n                contentType: false,\r\n                headers: this.#headers,\r\n                xhrFields: {\r\n                    withCredentials: true\r\n                },\r\n                processData: false\r\n            });\r\n\r\n            jqxhr.done((data, textStatus, jqXHR) => {\r\n                this.#handle(jqXHR, textStatus);\r\n            });\r\n\r\n            jqxhr.fail((jqXHR, textStatus) => {\r\n                this.#handle(jqXHR, textStatus);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Async version of {@link JstConnect.get()}. Callbacks which have been added\r\n         * using on** methods will always run in order first, before the promise is\r\n         * considered fulfilled.\r\n         *\r\n         * @param {'form'|'json'} as The Content-Type header is set accordingly when data is sent\r\n         * @throws {Error} When as argument is set as raw data\r\n         *\r\n         * */\r\n        async getAsync(as = 'form') {\r\n            return new Promise((resolve) => {\r\n                this.#isAsync = true;\r\n                this.#resolve = resolve;\r\n\r\n                this.get(as);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Makes a POST request to the specified url. If there is any files already attached with this request\r\n         * using {@link files()} method, then 'Content-Type' header will be ignored and any JSON data will\r\n         * be sent as key-value pairs form-data. The encoding and required headers will be handled by browser.\r\n         *\r\n         * <br>\r\n         * For as argument data will be sent as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body. Use raw() function to add data.\r\n         *\r\n         * @param {'form'|'json'|'raw'=} as The Content-Type header is set accordingly when data is sent\r\n         * */\r\n        post(as = 'form') {\r\n            this.#hit(as, 'POST');\r\n        }\r\n\r\n        /**\r\n         * Async version of {@link JstConnect.post()}. Callbacks which have been added\r\n         * using on** methods will always run in order first, before the promise is\r\n         * considered fulfilled. Promise is always resolved, not rejected!<br>\r\n         * If there is any files already attached with this request using {@link files()}\r\n         * method, then 'Content-Type' header will be ignored and any JSON data will be sent\r\n         * as key-value pairs form-data. The encoding and required headers will be handled\r\n         * by browser.\r\n         *\r\n         * For as argument data will be sent as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body. Use raw() function to add data.\r\n         *\r\n         * @param {'form'|'json'|'raw'=} as The Content-Type header is set accordingly when data is sent\r\n         * */\r\n        postAsync(as = 'form') {\r\n            return new Promise((resolve) => {\r\n                this.#isAsync = true\r\n                this.#resolve = resolve\r\n\r\n                this.#hit(as, 'POST');\r\n            })\r\n        }\r\n\r\n        /**\r\n         * Makes a PUT request to the specified url.\r\n         * <br>\r\n         * For as argument data will be sent as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body. Use raw() function to add data.\r\n         *\r\n         * @param {'form'|'json'|'raw'=} as The Content-Type header is set accordingly when data is sent\r\n         * */\r\n        put(as = 'json') {\r\n            this.#hit(as, 'PUT');\r\n        }\r\n\r\n        /**\r\n         * Async version of {@link JstConnect.put()}. Callbacks which have been added\r\n         * using on** methods will always run in order first, before the promise is\r\n         * considered fulfilled. Promise is always resolved, not rejected!<br>\r\n         *\r\n         * For as argument data will be sent as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body. Use raw() function to add data.\r\n         *\r\n         * @param {'form'|'json'|'raw'=} as The Content-Type header is set accordingly when data is sent\r\n         *\r\n         * */\r\n        putAsync(as = 'json') {\r\n            return new Promise((resolve) => {\r\n                this.#isAsync = true\r\n                this.#resolve = resolve\r\n\r\n                this.#hit(as, 'PUT');\r\n            })\r\n        }\r\n\r\n        /**\r\n         * Makes a DELETE request to the specified url.\r\n         * <br>\r\n         * For as argument data will be sent as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body. Use raw() function to add data.\r\n         *\r\n         * @param {'form'|'json'|'raw'=} as The Content-Type header is set accordingly when data is sent\r\n         * */\r\n        delete(as = 'json') {\r\n            this.#hit(as, 'DELETE');\r\n        }\r\n\r\n        /**\r\n         * Async version of {@link JstConnect.delete()}. Callbacks which have been added\r\n         * using on** methods will always run in order first, before the promise is\r\n         * considered fulfilled. Promise is always resolved, not rejected!<br>\r\n         *\r\n         * For as argument data will be sent as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body. Use raw() function to add data.\r\n         *\r\n         * @param {'form'|'json'|'raw'=} as The Content-Type header is set accordingly when data is sent\r\n         *\r\n         * */\r\n        deleteAsync(as = 'json') {\r\n            return new Promise((resolve) => {\r\n                this.#isAsync = true\r\n                this.#resolve = resolve\r\n\r\n                this.#hit(as, 'DELETE');\r\n            })\r\n        }\r\n\r\n        /**\r\n         * Sets the url the connection is going to be made to\r\n         *\r\n         * @param {string} url API url\r\n         * @return {JstConnect}\r\n         * */\r\n        to(url) {\r\n            this.#url = url;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Any header can be added to the request.\r\n         *\r\n         * @param {string} key Header key\r\n         * @param {string} value Header value\r\n         * @return {JstConnect}\r\n         * */\r\n        header(key, value) {\r\n            this.#headers[key] = value;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sends as raw data as part of request body\r\n         *\r\n         * @param {string|number} data Any value to be sent as a raw data\r\n         * @return {JstConnect}\r\n         * */\r\n        raw(data) {\r\n            if (typeof data === 'object')\r\n                throw new Error(`Data of type Object can't be processed as raw data`);\r\n\r\n            this.#dataSource['_raw_data'] += data;\r\n\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Any html form data can be sent using this method. The form argument\r\n         * can either be an id(with/without # sign) or the form object.\r\n         *\r\n         * @param {string|HTMLFormElement} form The form to be sent as body of the request\r\n         * @return {JstConnect}\r\n         * */\r\n        form(form) {\r\n            if (typeof form == 'string') {\r\n                let id = form.startsWith('#') ? form.substring(1) : form;\r\n                form = document.getElementById(id);\r\n            }\r\n\r\n            if (typeof form != 'object' && !$(form).is('form'))\r\n                throw new Error('Argument must be a form or an id to form');\r\n\r\n            // collect the form data as json\r\n            let data = $(form).serializeArray();\r\n            data.forEach((obj) => this.#dataSource[obj.name] = obj.value);\r\n\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Any json object can be sent as part get or post data. For get request\r\n         * the object's key-value pair translates into encoded url query param.\r\n         *\r\n         * @param {string|object} data The JSON data either in object or string form\r\n         * @return {JstConnect}\r\n         * */\r\n        json(data) {\r\n            if (typeof data === 'string') data = JSON.parse(data);\r\n\r\n            Object.keys(data).forEach((key) =>\r\n                this.#dataSource[key] = data[key]\r\n            );\r\n\r\n            return this;\r\n        }\r\n        \r\n        /**\r\n         * Submits any files with the request. When a FormData is set, it will ignore\r\n         * 'Content-Type' header and allow browser to handler form data encoding with\r\n         * proper content type.\r\n         * <br>\r\n         * Data source object is sent as key-value pairs (form-data) and raw data-source\r\n         * is ignored. To keep the data source as JSON stringify object, make a call to\r\n         * {@link sendDataSourceAsJSON} method.\r\n         *\r\n         * @param {FormData} data The data to be sent as part of request\r\n         * @return {JstConnect}\r\n         * */\r\n        files(data) {\r\n            this.#formData = data\r\n            return this\r\n        }\r\n        \r\n        /**\r\n         * When any file is attached using {@link files} method to the request,\r\n         * JstConnect ignores 'Content-Type' for sending request data as JSON stringify object\r\n         * and whatever the data source object holds will be sent as key-value pairs (form-data)\r\n         * to allow the browser to take care of setting proper form-data encoding & content\r\n         * type. However, this method instructs JstConnect to keep the data source as stringify object\r\n         * as send it under the specified key.\r\n         *\r\n         * @param {string} key The key to send the data under. 'json' is the default key\r\n         * @return {JstConnect}\r\n         * */\r\n        sendDataSourceAsJSON(key = 'json') {\r\n            this.#keepJSONKey = key\r\n            this.#keepASJSON = true\r\n            return this\r\n        }\r\n\r\n        /**\r\n         * Sets query parameter to the url\r\n         *\r\n         * @param {string} key The parameter name\r\n         * @param {string|number} value The parameter value\r\n         * @return {JstConnect}\r\n         * */\r\n        queryParam(key, value) {\r\n            this.#queryParam[key] = value;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Add segments to URL path\r\n         *\r\n         * @param {string|number} value The segment value\r\n         * @return {JstConnect}\r\n         * */\r\n        segment(value) {\r\n            this.#segments.push(value)\r\n            return this\r\n        }\r\n\r\n        /**\r\n         * Returns the ajax connection status\r\n         *\r\n         * @return {number}\r\n         * */\r\n        get conStatus() {\r\n            return this.#status;\r\n        }\r\n\r\n        /**\r\n         * Returns the ajax connection message\r\n         *\r\n         * @return {string}\r\n         * */\r\n        get conStatusTxt() {\r\n            return this.#statusText;\r\n        }\r\n\r\n        /**\r\n         * Returns the message sent by Hati server\r\n         *\r\n         * @return {string} Message sent by Hati.\r\n         * */\r\n        get msg() {\r\n            return this.#hatiMsg;\r\n        }\r\n\r\n        /**\r\n         * Returns the status sent by Hati server\r\n         *\r\n         * @return {number} Status sent by Hati.\r\n         */\r\n        get status() {\r\n            return this.#hatiStatus;\r\n        }\r\n\r\n        /**\r\n         * Returns the level sent by Hati server\r\n         *\r\n         * @return {number} Level sent by Hati.\r\n         */\r\n        get level() {\r\n            return this.#hatiLevel;\r\n        }\r\n\r\n        /**\r\n         * Returns the response in JSON format\r\n         *\r\n         * @return {?object} JSON decoded response\r\n         * */\r\n        response() {\r\n            if (this.#response === 'null') return null;\r\n\r\n            if (typeof this.#response === 'object') return this.#response;\r\n\r\n            try {\r\n                return JSON.parse(this.#response);\r\n            } catch {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns the response in raw format\r\n         *\r\n         * @return {string} Response in raw textual format as replied by the server\r\n         * */\r\n        responseRaw() {\r\n            return typeof this.#response === 'object' ? JSON.stringify(this.#response) : this.#response;\r\n        }\r\n\r\n        /**\r\n         * Returns whether the connection was made successfully and the server has replied OK\r\n         *\r\n         * @return {boolean} True if the connection state is FINISH_AND_READY and status is OK, false otherwise\r\n         * */\r\n        serverReplied() {\r\n            return this.#state === this.STATE_REQ_FINISH_AND_READY && this.#status === this.STATUS_OK;\r\n        }\r\n\r\n        /**\r\n         * Returns whether Hati server has responded\r\n         *\r\n         * @return {boolean} True if hati functioned & responded correctly, false otherwise.\r\n         * */\r\n        hatiResponse() {\r\n            return this.serverReplied() && this.#hatiLevel !== JstConnect.HATI_LVL_UNKNOWN;\r\n        }\r\n\r\n        /**\r\n         * Returns whether the outcome of this connection was successful, reported by server\r\n         * header response with either 200 or 204 code. If it is a hati server response, then\r\n         * it will do further check for the status value found in the response object.\r\n         *\r\n         * @param {number} code Hati status code to match found in the response object. 0, 1 & 2 are\r\n         * considered a successful hati response by default.\r\n         * @return {boolean} True if the connection meets the conditions above, false otherwise.\r\n         * */\r\n        isOk (...code) {\r\n            let firstDigit = this.#status.toString()[0]\r\n            let failed = ['4', '5'].includes(firstDigit)\r\n\r\n            if (failed) return false\r\n\r\n            if (!this.#hati) return true\r\n\r\n            if (code.length === 0) code = [0, 1, 2]\r\n\r\n            return code.includes[this.status]\r\n        }\r\n\r\n        /**\r\n         * On getting an HTTP response code starting with either 4 or 5 is considered an error.\r\n         * If it passes that condition, it is then checked if the connection was made to a hati\r\n         * server. If so, then hati status code is also evaluated to see it was -1.\r\n         *\r\n         * @return {boolean} True if the connection meets the conditions above, false otherwise.\r\n         * */\r\n        isErr () {\r\n            let firstDigit = this.#status.toString()[0]\r\n            let notErr = !['4', '5'].includes(firstDigit)\r\n\r\n            if (notErr) return false\r\n\r\n            if (!this.#hati) return true\r\n\r\n            return this.status === -1\r\n        }\r\n\r\n        /**\r\n         * Runs a callback if the connection returned a successful response which particularly doesn't start\r\n         * with 4, 5 and in case of a response from hati server then also it is not status -1.\r\n         *\r\n         * @param {function({txt:string, json:object})} callback receives connection\r\n         * result in both raw text format and json format. For json object, it tries\r\n         * to parse the response. If fails then returns null as json value.\r\n         * */\r\n        ifOk (callback) {\r\n            if (!this.isOk()) return\r\n            callback(this.#decorateRes())\r\n        }\r\n\r\n        /**\r\n         * Runs a callback if the connection was unsuccessful meaning the HTTP response code started\r\n         * with 4, 5 or in case of a response from hati server then also it is status -1.\r\n         *\r\n         * @param {function({txt:string, json:object})} callback receives connection\r\n         * result in both raw text format and json format. For json object, it tries\r\n         * to parse the response. If fails then returns null as json value.\r\n         * */\r\n        ifErr (callback) {\r\n            if (!this.isErr()) return\r\n            callback(this.#decorateRes())\r\n        }\r\n        \r\n        get reqData () {\r\n            return this.#reqData;\r\n        }\r\n\r\n        static parameterize(obj) {\r\n            let string = '';\r\n            for (const key in obj) {\r\n                string += `${key}=${obj[key]}&`;\r\n            }\r\n            return string.substring(0, string.length - 1);\r\n        }\r\n\r\n        static redirect(path) {\r\n            if (!path) return;\r\n            window.location = path;\r\n        }\r\n\r\n    }\r\n\r\n    window.JstConnect = () =>  new JstConnect();\r\n    \r\n    /**\r\n     * Retrieves a query parameter or path segment from the current URL.\r\n     *\r\n     * @param {string | number} keyOrPos - When `what` is `'query'`, this is the name of the query parameter to retrieve.\r\n     *                                     When `what` is `'path'`, this is the 1-based position of the path segment to retrieve.\r\n     * @param {string} [what='query'] - Specifies the type of data to retrieve:\r\n     *                                  - `'query'`: retrieves a query parameter by name.\r\n     *                                  - `'path'`: retrieves a path segment by position.\r\n     * @param {*} [defValue=null] - The default value to return if the query parameter or path segment is not found.\r\n     *\r\n     * @returns {*} - The value of the specified query parameter or path segment.\r\n     *                Returns `defValue` if the specified key or position is not found.\r\n     *\r\n     * @example\r\n     * // Example 1: Retrieve a query parameter\r\n     * // URL: https://example.com?page=3\r\n     * getUrl('page'); // Returns: '3'\r\n     *\r\n     * @example\r\n     * // Example 2: Retrieve a path segment\r\n     * // URL: https://example.com/products/electronics\r\n     * getUrl(2, 'path'); // Returns: 'electronics'\r\n     */\r\n    window.JstConnect.getUrl = (keyOrPos, what = 'query', defValue = null) => {\r\n        if (what === 'query') {\r\n            // Parsing query parameters using URLSearchParams\r\n            const params = new URLSearchParams(window.location.search);\r\n            return params.get(keyOrPos) ?? defValue;\r\n        } else if (what === 'path') {\r\n            // Handling URL path segments\r\n            const segments = window.location.pathname.replace(/^\\//, '').split('/');\r\n            // Adjusting position to 0-based index\r\n            const position = parseInt(keyOrPos, 10) - 1;\r\n            return segments[position] ?? defValue;\r\n        } else {\r\n            return defValue;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Helper function, transfers key-value pair data into query parameters format\r\n     *\r\n     * @param {object} obj JSON object key-value pair to convert to query parameters\r\n     * @returns {string} Query parameterized string\r\n     * */\r\n    window.JstConnect.parameterize = (obj) => JstConnect.parameterize(obj);\r\n\r\n    /**\r\n     * Redirects to specified path. Performs checks if the path is defined.\r\n     *\r\n     * @param {string} path\r\n     * */\r\n    window.JstConnect.redirect = (path) => JstConnect.redirect(path);\r\n\r\n})();","/**\r\n * Web forms are very verbose in taking user inputs. This class can greatly simplify\r\n * the form validations with nice and easy coding. Each element is marked with an ID or\r\n * name(where the input type is radio) and elements are registered via the constructor by\r\n * object.\r\n * */\r\nclass JstFormInspector {\r\n\t\r\n\t/*\r\n\t * Predefined regular expression patterns for filtering input in various formats.\r\n\t * This list has a useful pattern which can be used in general for any project.\r\n\t * However, any required pattern can be passed as an argument to the object using\r\n\t * the key 'Pattern'.\r\n\t *\r\n\t * In the naming of these constants, they have meaning like regular expression.\r\n\t * A    = Alphabets(including capital & small letters)\r\n\t * N    = Numbers\r\n\t * AN   = Alphabets & Numbers\r\n\t * S    = Space\r\n\t * C    = Comma\r\n\t * D    = Dot\r\n\t *\r\n\t * When you use any of these pattern, they will remove any other characters except the\r\n\t * mentioned characters in the pattern names.\r\n\t */\r\n\t\t\r\n\t/**\r\n\t * a-z, A-Z\r\n\t * */\r\n\tstatic SAN_A = /[a-zA-Z]/g ;\r\n\t\r\n\t/*\r\n\t * 0-9\r\n\t * */\r\n\tstatic SAN_N = /[0-9]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9\r\n\t * */\r\n\tstatic SAN_AN = /[a-zA-Z0-9]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, spaces\r\n\t * */\r\n\tstatic SAN_AS = /[a-zA-Z\\s]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, commas\r\n\t * */\r\n\tstatic SAN_AC = /[a-zA-Z,]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, dots\r\n\t * */\r\n\tstatic SAN_AD = /[a-zA-Z.]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9, spaces\r\n\t * */\r\n\tstatic SAN_ANS = /[a-zA-Z0-9\\s]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9, spaces, commas\r\n\t * */\r\n\tstatic SAN_ASC = /[a-zA-Z\\s,]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9, dots\r\n\t * */\r\n\tstatic SAN_AND = /[a-zA-Z0-9.]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9, spaces, commas\r\n\t * */\r\n\tstatic SAN_ANSC = /[a-zA-Z0-9\\s,]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9, spaces, dots\r\n\t * */\r\n\tstatic SAN_ANSD = /[a-zA-Z0-9\\s.]/g;\r\n\t\r\n\t/*\r\n\t * a-z, A-Z, 0-9, spaces, commas, dots\r\n\t * */\r\n\tstatic SAN_ANSCD = /[a-zA-Z0-9\\s,.]/g;\r\n\t\r\n\t/**\r\n\t * ISO date format YYYY-MM-DD\r\n\t * */\r\n\tstatic SAN_ISO_DATE = /(\\d{4}-\\d{2}-\\d{2})/g;\r\n\t\r\n\t/**\r\n\t * ISO time format HH:MM:SS\r\n\t * */\r\n\tstatic SAN_ISO_TIME = /(\\d{2}:\\d{2}:\\d{2})/g;\r\n\t\r\n\t#option;\r\n\t\r\n\t// Form dom\r\n\t#form;\r\n\t\r\n\t// Flags if the form submission came from one of non-designated buttons\r\n\t#fromUnauthorized = false;\r\n\t\r\n\t// Indicates whether the form inputs are resolved and ready to be submitted\r\n\t#canSubmit = true;\r\n\t\r\n\t// Holds the configuration info for each element\r\n\t#eleConfigArr = [];\r\n\t\r\n\t#iconOk = '&#10004;';\r\n\t#iconErr = '&#10060;';\r\n\t\r\n\t// Callback invoked when validation is done and ready for consumer code\r\n\t#validationConsumer;\r\n\t\r\n\t// Default validation handler callback\r\n\t#validationHandler = (success, eleConfig) => {\r\n\t\tif (this.#option.resettingForm) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tlet inline =  eleConfig.owns('inline') ? eleConfig.inline : this.#option.inline;\r\n\t\tlet icon = success ? this.#iconOk : this.#iconErr;\r\n\t\t\r\n\t\t// add the msg element if we have none\r\n\t\tlet haveNextEle = $(eleConfig.ele).next().hasClass('jst-form-msg');\r\n\t\tlet havePositionedEle = eleConfig.owns('msgPos');\r\n\t\t\r\n\t\tif (!haveNextEle || havePositionedEle) {\r\n\t\t\tlet msgEle = `<div class=\"jst-form-msg\"><span></span> <span></span></div>`;\r\n\t\t\t\r\n\t\t\t// add the message element accordingly\r\n\t\t\tif(havePositionedEle) $(`#${eleConfig['msgPos']}`).html(msgEle);\r\n\t\t\telse $(eleConfig.ele).after(msgEle);\r\n\t\t}\r\n\t\t\r\n\t\t// update the nextEle to newly inserted one since we have just updated\r\n\t\tlet nextEle = havePositionedEle ? $('#' + eleConfig['msgPos']) : $(eleConfig.ele).next();\r\n\t\t\r\n\t\tif (success && this.#option.feedbackErrOnly) {\r\n\t\t\tnextEle.hide();\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tnextEle.show();\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Update the icon, message and the color class\r\n\t\t */\r\n\t\tlet spans = $(nextEle).find('span');\r\n\t\tlet iconSpan = spans[0];\r\n\t\tlet msgSpan = spans[1];\r\n\t\t\r\n\t\tif (eleConfig.owns('showIcon') ? eleConfig.showIcon : this.#option.showIcon) {\r\n\t\t\t$(iconSpan).html(icon);\r\n\t\t}\r\n\t\t\r\n\t\tif (eleConfig.owns('showMsg') ? eleConfig.showMsg : this.#option.showMsg) {\r\n\t\t\t$(msgSpan).html(eleConfig.msg);\r\n\t\t}\r\n\t\t\r\n\t\tlet addColorCls = success\t? 'jst-form-msg-success' : 'jst-form-msg-error';\r\n\t\t$(nextEle)\r\n\t\t\t.removeClass('jst-form-msg-error jst-form-msg-success')\r\n\t\t\t.addClass(addColorCls);\r\n\t\t\r\n\t\t// make sure the message element is shown; it could be made hidden by reset function\r\n\t\t$(nextEle).css('display', inline ? 'inline' : 'block');\r\n\t};\r\n\t\r\n\t/**\r\n\t *\r\n\t * @param {string|object} form The form id or the form object.\r\n\t *\r\n\t * @param {object} option\r\n\t * @param {boolean=false} option.inline When true input validation feedback is shown next to input as inline html element otherwise\r\n\t * \t\t\t\t\t\t\t\t\t\tshown as block level element\r\n\t * @param {boolean=true} option.showIcon Whether to show icon on feedback handled by default validation handler.\r\n\t * @param {boolean=true} option.showMsg Whether to show feedback message if validation handled by default validation handler.\r\n\t * @param {boolean=false} option.feedbackErrOnly Whether to show validation error feedback message to the user.\r\n\t * @throws {Error} If the form element can't be found\r\n\t * */\r\n\tconstructor(form, option = {}) {\r\n\t\t// Indicated whether the feedback message should be inline or block level element\r\n\t\tjst.setProperty(option, 'inline', false);\r\n\t\t\r\n\t\tjst.setProperty(option, 'showIcon', true);\r\n\t\tjst.setProperty(option, 'showMsg', true);\r\n\t\tjst.setProperty(option, 'feedbackErrOnly', false);\r\n\t\t\r\n\t\t// Indicates if the form has already been attempted to be submitted\r\n\t\toption['firstSubmission'] = true;\r\n\t\t\r\n\t\tthis.#option = option;\r\n\t\t\r\n\t\t// First make sure we have found the form to work with\r\n\t\tif(!$(form).is('form') && typeof form !== 'string') {\r\n\t\t\tthrow new Error('Argument form must be an id or a reference to a form');\r\n\t\t}\r\n\t\t\r\n\t\tthis.#form = jst.eleById(form);\r\n\t\t\r\n\t\tif (jst.isUndef(this.#form) || this.#form === null) {\r\n\t\t\tthrow new Error(`Failed to find the form`);\r\n\t\t}\r\n\t\t\r\n\t\t// Prevent the form submission automatically and hook to validate method to validate inputs\r\n\t\tlet formJQ = $(this.#form);\r\n\t\tformJQ.submit((evt) => {\r\n\t\t\tevt.preventDefault();\r\n\t\t\tthis.validate();\r\n\t\t});\r\n\t\t\r\n\t\t/*\r\n\t\t * Clicking on buttons with `data-jst-form-submitter` attribute\r\n\t\t * can submit the form automatically\r\n\t\t */\r\n\t\tformJQ\r\n\t\t\t.find(`input[type=\"submit\"]:not([data-jst-form-submitter]), button:not([data-jst-form-submitter])`)\r\n\t\t\t.click(() => {\r\n\t\t\t\tthis.#fromUnauthorized = true;\r\n\t\t\t});\r\n\t\t\r\n\t\tformJQ\r\n\t\t\t.find('input[data-jst-form-submitter], button[data-jst-form-submitter]')\r\n\t\t\t.click(() => {\r\n\t\t\t\tthis.#fromUnauthorized = false;\r\n\t\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Form element is identified by id. ID can be separated by '-' so that it\r\n\t * can be split into capitalized word for nice feedback message\r\n\t *\r\n\t * @param {object} eleConfig\r\n\t * @return {string}\r\n\t * */\r\n\tstatic #getEleName(eleConfig) {\r\n\t\tif (eleConfig.owns('alias')) return eleConfig.alias;\r\n\t\t\r\n\t\tlet value = eleConfig.id || eleConfig.name;\r\n\t\tvalue = value.replaceAll(/-/g, ' ');\r\n\t\treturn value.capitalize(true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Form element can be of various types such as input, select, textarea etc.\r\n\t * This method can detect these types and return the value based on types.\r\n\t *\r\n\t * @param {object} eleConfig\r\n\t * @return {boolean|string|number}\r\n\t * */\r\n\tstatic #getValue(eleConfig) {\r\n\t\tlet type = $(eleConfig.ele).attr('type');\r\n\t\t\r\n\t\tif (type === 'radio') {\r\n\t\t\treturn $(`input[name=\"${eleConfig.name}\"]:checked`).val();\r\n\t\t} else if (type === 'checkbox') {\r\n\t\t\treturn $(eleConfig.ele).is(\":checked\") ? $(eleConfig.ele).val() : false;\r\n\t\t} else return $(eleConfig.ele).val();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Adds rules to perform validation on specified element\r\n\t *\r\n\t *\r\n\t * @param {object|array}                    rules Rules the form is validated against. Each rule is an object\r\n\t * \t\t\t\t\t\t\t\t\t\t\t\t  specifying the filters\r\n\t * @param {string}                          rules.id id of the form element\r\n\t * @param {'str'|'int'|'float'|'email'}     rules.type the type of the data must be provided in\r\n\t * @param {string=}                         rules.name 'name to the radio input\r\n\t * @param {number=}                         rules.min the min value\r\n\t * @param {number=}                         rules.max the max value\r\n\t * @param {number=}                         rules.minLen the minimum length\r\n\t * @param {number=}                         rules.maxLen the maximum length\r\n\t * @param {boolean=}                        rules.inline indicates to show feedback as inline\r\n\t * @param {string=}                         rules.msgPos id of where to show the feedback message div\r\n\t * @param {string=}                         rules.alias friendly name to be shown to call the element in feedback message\r\n\t * @param {string=}                         rules.pattern any Form pattern constant or custom patter to match\r\n\t * @param {number=}                         rules.place the floating fractional place length\r\n\t * @param {array=}                          rules.option array containing the permitted options for the input\r\n\t * @param {boolean=}                        rules.showIcon whether to show icon on feedback if handled by default validation handler. Default is true.\r\n\t * @param {boolean=}                        rules.showMsg whether to show feedback message if handled by default validation handler. Default is true.\r\n\t * */\r\n\taddRule(...rules) {\r\n\t\t// unpack the objects\r\n\t\tif (Array.isArray(rules[0])) rules = rules[0];\r\n\t\t\r\n\t\trules.forEach((rule) => {\r\n\t\t\t// Get the form input element and see if it is defined\r\n\t\t\tlet ele = $(this.#form).find(`#${rule.id}`)[0];\r\n\t\t\t\r\n\t\t\tif (jst.isUndef(ele) && rule.owns('name'))\r\n\t\t\t\tele =  $(this.#form).find(`[name=${rule.name}]`);\r\n\t\t\t\r\n\t\t\tif (jst.isUndef(ele)) {\r\n\t\t\t\tconsole.warn('Element with no identity(id/name) has been skipped');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Add the form element to the object\r\n\t\t\trule['ele'] = ele;\r\n\t\t\t\r\n\t\t\trule['ok'] = false;\r\n\t\t\trule['lastCheckPassed'] = true;\r\n\t\t\trule['key'] = rule.id || rule.name;\r\n\t\t\t\r\n\t\t\t// Holds last error handled by validationHandler callback\r\n\t\t\trule['msg'] = null;\r\n\t\t\t\r\n\t\t\t// Indicates if the element previously had errors\r\n\t\t\trule['dirty'] = false;\r\n\t\t\t\r\n\t\t\tthis.#addListener(rule);\r\n\t\t\t\r\n\t\t\t// Store ref to all the passed ele configurations after setup\r\n\t\t\tthis.#eleConfigArr.push(rule);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Resets the form inputs. Optionally it can hide input error/feedback message divs.\r\n\t * */\r\n\tresetForm() {\r\n\t\tthis.#form?.reset();\r\n\t\t\r\n\t\tthis.#option.firstSubmission = true;\r\n\t\tthis.#option.resettingForm = true;\r\n\t\t\r\n\t\tlet formJQ = $(this.#form);\r\n\t\t\r\n\t\t// Reset element config data\r\n\t\tfor (let eleConfig of this.#eleConfigArr) {\r\n\t\t\teleConfig.ok = false;\r\n\t\t\teleConfig.msg = null;\r\n\t\t\teleConfig.dirty = false;\r\n\t\t\teleConfig.lastCheckPassed = true;\r\n\t\t\t\r\n\t\t\tlet msgEle;\r\n\t\t\t\r\n\t\t\tif (eleConfig.owns('msgPos')) {\r\n\t\t\t\tmsgEle = $(`#${eleConfig.msgPos}`);\r\n\t\t\t} else if (eleConfig.owns('id')) {\r\n\t\t\t\tmsgEle = formJQ.find(`#${eleConfig.id} + .jst-form-msg`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmsgEle?.css('display', 'none');\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * If validation feedback handler is custom one, then allow them\r\n\t\t\t * to reset the form UI be at initial state!\r\n\t\t\t * */\r\n\t\t\teleConfig.reset = true;\r\n\t\t\tthis.#validationHandler(null, eleConfig);\r\n\t\t\tdelete eleConfig.reset;\r\n\t\t}\r\n\t\t\r\n\t\tthis.#option.resettingForm = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Submits the form to action set on the form.\r\n\t *\r\n\t * This method can be useful because FormInspector prevents the default\r\n\t * form submission behaviour in order to validate the form inputs.\r\n\t * */\r\n\tsubmit() {\r\n\t\tif (this.#fromUnauthorized) return;\r\n\t\t\r\n\t\t// Disable our submit listener first!\r\n\t\t$(this.#form).off('submit');\r\n\t\t\r\n\t\t// Then submit it\r\n\t\t$(this.#form).submit();\r\n\t\t\r\n\t\t// Prepare if submission failed somehow!\r\n\t\t$(this.#form).on('submit');\r\n\t}\r\n\t\r\n\t/**\r\n\t * It checks all the inputs against the rules set.\r\n\t *\r\n\t * @param {boolean=true} submitOnPass Whether to submit the form on validation pass\r\n\t * */\r\n\tvalidate(submitOnPass = true) {\r\n\t\t/*\r\n\t\t * Stop validating if it came from an unauthorized button!\r\n\t\t * And prepare for next time!\r\n\t\t */\r\n\t\tif (this.#fromUnauthorized) {\r\n\t\t\tthis.#fromUnauthorized = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// say, we can submit the form\r\n\t\tthis.#canSubmit = true;\r\n\t\t\r\n\t\tthis.#eleConfigArr.forEach(ele => {\r\n\t\t\tif (jst.isUndef(ele.ele)) return;\r\n\t\t\t\r\n\t\t\tthis.#filter(ele);\r\n\t\t\t\r\n\t\t\tif (this.#canSubmit) this.#canSubmit = ele.ok;\r\n\t\t});\r\n\t\t\r\n\t\t// Form is no longer submitted as a first timer next time!\r\n\t\tthis.#option.firstSubmission = false;\r\n\t\t\r\n\t\t// Stop if it is set not to submit!\r\n\t\tif (this.#canSubmit && !submitOnPass) {\r\n\t\t\treturn this.#canSubmit;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * If no one cares about the validation outcome, then submit the form!\r\n\t\t * Otherwise notify them!\r\n\t\t * */\r\n\t\tif (!this.#validationConsumer && this.#canSubmit) {\r\n\t\t\tthis.submit();\r\n\t\t} else {\r\n\t\t\tthis.#validationConsumer?.(this.#canSubmit);\r\n\t\t}\r\n\t\t\r\n\t\treturn this.#canSubmit;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets a custom validation handler which will be invoked on form submit or as user interacts with the\r\n\t * form elements.\r\n\t *\r\n\t * Callback functions receives 2 arguments. A boolean indicating if validation passed, followed by the\r\n\t * element's validation config object which has `msg` property telling about the inspector's feedback.\r\n\t *\r\n\t * Importantly, config object will have a property called 'reset' , if the form is being reset allowing\r\n\t * the callback to put the element at initial state.\r\n\t *\r\n\t * @param {function (status:boolean, config:object)} fn\r\n\t * */\r\n\tsetFeedbackHandler = (fn) => {\r\n\t\tthis.#validationHandler = fn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add various types of listeners such as keyup, blur based on the form element type.\r\n\t * It can also perform any needed logic before handing over the listener callback\r\n\t * function to verify the input.\r\n\t *\r\n\t * @param {object} eleConfig\r\n\t * */\r\n\t#addListener(eleConfig) {\r\n\t\tlet ele = eleConfig.ele;\r\n\t\tlet nodeName = $(ele).prop('nodeName').toLowerCase();\r\n\t\tlet eleType = $(ele).attr('type');\r\n\t\t\r\n\t\t$(ele).on('blur', () => {\r\n\t\t\tthis.#filter(eleConfig);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Flag on blur whether the validation passed!\r\n\t\t\t * If so, then we would allow users modifying input without distracting\r\n\t\t\t * with feedback message!\r\n\t\t\t * */\r\n\t\t\teleConfig.lastCheckPassed = eleConfig.ok;\r\n\t\t});\r\n\t\t\r\n\t\tif (eleType === 'radio' || eleType === 'checkbox' || nodeName === 'select') {\r\n\t\t\t$(ele).change(() => this.#filter(eleConfig) );\r\n\t\t} else {\r\n\t\t\t$(ele).keyup(() => {\r\n\t\t\t\t/*\r\n\t\t\t\t * No distracting user with feedback message!\r\n\t\t\t\t */\r\n\t\t\t\tif (eleConfig.lastCheckPassed) return;\r\n\t\t\t\t\r\n\t\t\t\tthis.#filter(eleConfig);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t#filter = (eleConfig) => {\r\n\t\tlet nodeName = $(eleConfig.ele).prop('nodeName').toLowerCase();\r\n\t\tlet filterType = eleConfig.type;\r\n\t\tlet inputType = $(eleConfig.ele).attr('type');\r\n\t\t\r\n\t\tlet ok;\r\n\t\t\r\n\t\t// stop from selecting first option of the select input\r\n\t\tif (nodeName === 'select') {\r\n\t\t\tif(JstFormInspector.#getValue(eleConfig) === '') {\r\n\t\t\t\teleConfig.ok = this.#handleValidation(false, eleConfig, 'Required');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (filterType === 'email' || inputType === 'email') ok = this.#email(eleConfig);\r\n\t\telse if (filterType === 'str') \t ok = this.#str(eleConfig);\r\n\t\telse if (filterType === 'int') \t ok = this.#int(eleConfig);\r\n\t\telse if (filterType === 'float') ok = this.#float(eleConfig);\r\n\t\t\r\n\t\t// check if we need to match any pattern\r\n\t\tif (ok && eleConfig.owns('pattern')) ok = this.#pattern(eleConfig);\r\n\t\t\r\n\t\teleConfig.ok = ok;\r\n\t};\r\n\t\r\n\t#email = (eleConfig) => {\r\n\t\tlet value = JstFormInspector.#getValue(eleConfig);\r\n\t\tif (!jst.isStr(value)) return this.#handleValidation(false, eleConfig, `Required`);\r\n\t\t\r\n\t\tlet emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\t\tlet result = emailRegex.test(value);\r\n\t\tlet msg = result ? 'Email accepted' : 'Invalid email';\r\n\t\treturn this.#handleValidation(result, eleConfig, msg);\r\n\t};\r\n\t\r\n\t#str = (eleConfig) => {\r\n\t\tlet value = JstFormInspector.#getValue(eleConfig);\r\n\t\t\r\n\t\tif (!jst.isStr(value)) return this.#handleValidation(false, eleConfig, `Required`);\r\n\t\t\r\n\t\tvalue = value.trim();\r\n\t\t\r\n\t\tif (!this.#checkLen(eleConfig, value)) return false;\r\n\t\tif (!this.#checkInOption(eleConfig, value)) return false;\r\n\t\treturn this.#handleValidation(true, eleConfig, `${JstFormInspector.#getEleName(eleConfig)} accepted`);\r\n\t};\r\n\t\r\n\t#int = (eleConfig) => {\r\n\t\tlet value =  JstFormInspector.#getValue(eleConfig);\r\n\t\t\r\n\t\t// make sure we have actual string input\r\n\t\tif(!jst.isStr(value)) return this.#handleValidation(false, eleConfig, `Required`);\r\n\t\t\r\n\t\t// keep anything except numbers from the input then see if it has invalid character\r\n\t\tlet iChar = value.replace(/[0-9]/g, '');\r\n\t\tif (iChar.length > 0) return this.#handleValidation(false, eleConfig, 'Invalid number');\r\n\t\t\r\n\t\t// get the number\r\n\t\tvalue = parseInt(value);\r\n\t\t\r\n\t\tif (!Number.isSafeInteger(value)) return this.#handleValidation(false, eleConfig, `Must be an integer`);\r\n\t\tif (!this.#checkLen(eleConfig, value)) return false;\r\n\t\tif(!this.#checkRange(eleConfig, value)) return false;\r\n\t\tif (!this.#checkInOption(eleConfig, value)) return false;\r\n\t\treturn this.#handleValidation(true, eleConfig, `${JstFormInspector.#getEleName(eleConfig)} accepted`);\r\n\t};\r\n\t\r\n\t#float = (eleConfig) => {\r\n\t\tlet value = JstFormInspector.#getValue(eleConfig);\r\n\t\t\r\n\t\t// make sure we have actual string input\r\n\t\tif (!jst.isStr(value)) return this.#handleValidation(false, eleConfig, `Required`);\r\n\t\t\r\n\t\t// add the floating point place if it has not\r\n\t\tif (value.match(/\\./g) == null) value += '.0';\r\n\t\t\r\n\t\tif (value.replaceAll(/-?\\d+\\.\\d+/g, '').length !== 0) return this.#handleValidation(false, eleConfig, 'Illegal input');\r\n\t\t\r\n\t\tif (!this.#checkLen(eleConfig, value)) return false;\r\n\t\t\r\n\t\tif (!this.#checkRange(eleConfig, value)) return false;\r\n\t\t\r\n\t\tif (eleConfig.owns('place')) {\r\n\t\t\tif (value.split('.')[1].length !== eleConfig['place'])\r\n\t\t\t\treturn this.#handleValidation(false, eleConfig, `Fractional place must be of ${eleConfig['place']}`);\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.#checkInOption(eleConfig, value)) return false;\r\n\t\treturn this.#handleValidation(true, eleConfig, `${JstFormInspector.#getEleName(eleConfig)} accepted`);\r\n\t};\r\n\t\r\n\t#pattern = (eleConfig) => {\r\n\t\tlet value = JstFormInspector.#getValue(eleConfig);\r\n\t\tif (!jst.isStr(value)) return this.#handleValidation(false, eleConfig, `Required`);\r\n\t\tif (value.replaceAll(eleConfig.pattern, '').length !== 0) return this.#handleValidation(false, eleConfig, `Invalid input`);\r\n\t\treturn this.#handleValidation(true, eleConfig, `${JstFormInspector.#getEleName(eleConfig)} accepted`);\r\n\t};\r\n\t\r\n\t#checkLen(eleConfig, value) {\r\n\t\tif ((typeof value).toLowerCase() !== 'string') value = String(value);\r\n\t\t\r\n\t\tlet min = eleConfig.minLen || 0;\r\n\t\tlet max = eleConfig.maxLen || -1;\r\n\t\t\r\n\t\tif (value.length < min) return this.#handleValidation(false, eleConfig, `Must be ${min} in length`);\r\n\t\tif (max !== -1 && value.length > max) return this.#handleValidation(false, eleConfig, `Exceeded maximum length of ${max}`);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t#checkRange(eleConfig, value) {\r\n\t\tlet min = eleConfig.min || 0;\r\n\t\tlet max = eleConfig.max || -1;\r\n\t\t\r\n\t\tif (value < min) return this.#handleValidation(false, eleConfig, `Can't be less than ${min}`);\r\n\t\tif (max !== -1 && value > max) return this.#handleValidation(false, eleConfig, `Can't be greater than ${max}`);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t#checkInOption(eleConfig, value) {\r\n\t\tlet inOption = false;\r\n\t\tif (eleConfig.owns('option')) {\r\n\t\t\tfor (const opValue of eleConfig['option']) {\r\n\t\t\t\tif (opValue === value) {\r\n\t\t\t\t\tinOption = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else return true;\r\n\t\t\r\n\t\tlet msg = $(eleConfig.ele).attr('type') === 'checkbox' ? `Must be acknowledged` : `Must be of valid options`;\r\n\t\tif (!inOption) return this.#handleValidation(false, eleConfig, msg);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t// Based on the value of the result, it either updates or adds the message element\r\n\t// into the specified element or to the next of the input element by default.\r\n\t#handleValidation(success, eleConfig, msg) {\r\n\t\t// Update dirty flag\r\n\t\tif (!success && !eleConfig.dirty) {\r\n\t\t\teleConfig.dirty = true;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * No drawing attention for successful input on first form submission!\r\n\t\t * Also consider if form was reset as well as dirty flag!\r\n\t\t */\r\n\t\tif (success && this.#option.firstSubmission && !eleConfig.dirty) {\r\n\t\t\treturn success;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Always send error, if it hasn't been handled!\r\n\t\t */\r\n\t\tif (!success && eleConfig.msg !== msg) {\r\n\t\t\teleConfig.msg = msg;\r\n\t\t\tthis.#validationHandler(success, eleConfig);\r\n\t\t\treturn success;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * User didn't correct the input\r\n\t\t */\r\n\t\tif (!success && eleConfig.msg === msg) {\r\n\t\t\treturn success;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Here it means that the element is dirty (previously had errors) and user fixed it\r\n\t\t */\r\n\t\tif (success && eleConfig.dirty && eleConfig.msg !== msg) {\r\n\t\t\teleConfig.msg = msg;\r\n\t\t\tthis.#validationHandler(success, eleConfig);\r\n\t\t}\r\n\t\t\r\n\t\treturn success;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Change the icon to be shown when input is accepted\r\n\t *\r\n\t * @param html {string} Any HTML value for the icon\r\n\t * @return {JstFormInspector}\r\n\t * */\r\n\tsetIconOk(html) { this.#iconOk = html; return this; }\r\n\t\r\n\t/**\r\n\t * Change the icon to be shown when input has an error\r\n\t *\r\n\t * @param html {string} Any HTML value for the icon\r\n\t * @return {JstFormInspector}\r\n\t * */\r\n\tsetIconErr(html) { this.#iconErr = html; return this; }\r\n\t\r\n\t/**\r\n\t * Callback to be invoked when validation is done.\r\n\t *\r\n\t * @param {function (success: boolean)} fn function invoked, passing the validation outcome as boolean.\r\n\t */\r\n\tonValidate (fn) {\r\n\t\tthis.#validationConsumer = fn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the form element.\r\n\t *\r\n\t * @return HTMLFormElement\r\n\t * */\r\n\tgetForm() {\r\n\t\treturn this.#form;\r\n\t}\r\n}","(() => {\r\n\tclass JstIcon  {\r\n\t\t\r\n\t\t#iconPool = {};\r\n\t\t\r\n\t\t#apply(ele, animType, text) {\r\n\t\t\tele = jst.eleById(ele);\r\n\t\t\tif (!ele) throw new Error(`No icon element found for ${ele}`);\r\n\t\t\t\r\n\t\t\t// Get the unique id for the icon element so that we can track its animation class\r\n\t\t\t// and restore it back to the original state. If no id attribute is found; so give\r\n\t\t\t// it a unique id and save it in the pool.\r\n\t\t\tlet id = $(ele).attr('id');\r\n\t\t\tif (!id) {\r\n\t\t\t\tid = 'jst-id-' + JstIcon.#getUId();\r\n\t\t\t\t$(ele).attr('id', id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Define an object for holding various information for the icon and its state, parent.\r\n\t\t\tconst obj = {};\r\n\t\t\t\r\n\t\t\tobj.id = id;\r\n\t\t\tobj.ele = ele;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Catch innerHTML\r\n\t\t\t */\r\n\t\t\tobj.innerHTML = ele.innerHTML;\r\n\t\t\t\r\n\t\t\tlet element = $(ele);\r\n\t\t\t\r\n\t\t\tobj.padding = element.css('padding');\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Decide the class type & attributes\r\n\t\t\t */\r\n\t\t\tlet emptyTxt = (text?.length ?? 0) === 0;\r\n\t\t\tlet txt = emptyTxt ? '' : `&nbsp;${text}`;\r\n\t\t\tlet pad = emptyTxt ? '' : 'jst-px-8';\r\n\t\t\tlet layout = emptyTxt ? 'jst-lay-center' : 'jst-lay-xs-yc jst-gap-4';\r\n\t\t\tlet w = emptyTxt ? `min-width: ${element.innerWidth()}px;` : '';\r\n\t\t\tlet h = element.innerHeight() + 'px';\r\n\t\t\t\r\n\t\t\tlet iconCls;\r\n\t\t\t\r\n\t\t\tswitch (animType) {\r\n\t\t\t\tcase 'spin':\r\n\t\t\t\t\ticonCls = 'jst-anim-spin';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\tcase 'spin-color':\r\n\t\t\t\t\ticonCls = 'jst-anim-spin-color'\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\ticonCls = 'jst-anim-pulse';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet loaderIconDom = `\r\n\t\t\t\t<div class=\"${layout} ${pad}\" style=\"${w} height: ${h};\">\r\n\t\t\t\t\t<span class=\"jst-icon-swap ${iconCls}\"></span>${txt}\r\n\t\t\t\t</div>\r\n\t\t\t`;\r\n\t\t\t\r\n\t\t\telement.css('padding', 0);\r\n\t\t\telement.empty().html(loaderIconDom);\r\n\t\t\t\r\n\t\t\t// Before returning the obj modify the parent opacity\r\n\t\t\telement.animate({opacity: 0.7});\r\n\t\t\t\r\n\t\t\t// Also make it disable\r\n\t\t\telement.attr('disabled', 'true');\r\n\t\t\t\r\n\t\t\t// Now save it in the icon pool\r\n\t\t\tthis.#iconPool[id] = obj;\r\n\t\t\t\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t\t\r\n\t\t#getObj(ele) {\r\n\t\t\tele = jst.eleById(ele);\r\n\t\t\t\r\n\t\t\tif (!ele) throw new Error(`No element found in the document as specified by the argument.`);\r\n\t\t\t\r\n\t\t\tlet id = $(ele).attr('id');\r\n\t\t\tif (!id) throw new Error('This element did not go through icon methods yet.');\r\n\t\t\t\r\n\t\t\tif (this.#iconPool.missing(id)) throw new Error('This element was not found in the icon pool.');\r\n\t\t\t\r\n\t\t\treturn this.#iconPool[id];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Any element can be animated in pulse motion. The element must have an id and its child\r\n\t\t * must be classed with .jst-icon-swap.\r\n\t\t *\r\n\t\t * @param {string|object} ele It can be the id with/without '#' or the element object which\r\n\t\t * is to be animated.\r\n\t\t *\r\n\t\t * @param {string} text Text to show next to icon\r\n\t\t * */\r\n\t\tpulse(ele, text = '') {\r\n\t\t\tthis.#apply(ele, 'pulse', text);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Any element can be animated in spin motion. The element must have an id and its child\r\n\t\t * must be classed with .jst-icon-swap.\r\n\t\t *\r\n\t\t * @param {string|object} ele It can be the id with/without '#' or the element object which\r\n\t\t * is to be animated.\r\n\t\t *\r\n\t\t * @param {string} text Text to show next to icon\r\n\t\t * */\r\n\t\tspin(ele, text = '') {\r\n\t\t\tthis.#apply(ele, 'spin', text);\r\n\t\t}\r\n\t\t\r\n\t\tspinColor(ele, text = '') {\r\n\t\t\tthis.#apply(ele, 'spin-color', text);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Any element in animation can be restored. When restored, in-animation content inside element\r\n\t\t * is also restored.\r\n\t\t *\r\n\t\t * @param ele {string|object} It can be the id with/without '#' or the element object which\r\n\t\t * is to stop animating\r\n\t\t * */\r\n\t\trestore(ele) {\r\n\t\t\tlet obj = this.#getObj(ele);\r\n\t\t\tlet element = $(obj.ele);\r\n\t\t\t\r\n\t\t\t// Apply padding\r\n\t\t\telement.css('padding', obj.padding);\r\n\t\t\t\r\n\t\t\t// Remove innerHTMl and then put back what was before\r\n\t\t\telement.empty().html(obj.innerHTML);\r\n\t\t\t\r\n\t\t\t// Restore parent opacity\r\n\t\t\telement.animate({opacity: '1'});\r\n\t\t\t\r\n\t\t\t// Make parent intractable\r\n\t\t\telement.removeAttr('disabled');\r\n\t\t\t\r\n\t\t\t// Clear from the icon pool!\r\n\t\t\tdelete this.#iconPool[obj.id];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets disabled attribute to the element.\r\n\t\t *\r\n\t\t * @param {string | HTMLInputElement} ele Input field id or the element itself. Id can\r\n\t\t * or can't have # at the beginning.\r\n\t\t * */\r\n\t\tdisable(ele) {\r\n\t\t\t$(jst.eleById(ele)).attr('disabled', 'true');\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Enables the element by removing disabled attribute\r\n\t\t *\r\n\t\t * @param {string | HTMLInputElement} ele Input field id or the element itself. Id can\r\n\t\t * or can't have # at the beginning.\r\n\t\t * */\r\n\t\tenable(ele) {\r\n\t\t\t$(jst.eleById(ele)).removeAttr('disabled');\r\n\t\t}\r\n\t\t\r\n\t\tstatic #getUId = () => new Date().valueOf();\r\n\t\t\r\n\t}\r\n\t\r\n\twindow.JstIcon = new JstIcon();\r\n\t\r\n})()","class JstModal {\r\n\t\r\n\t#id;\r\n\t#option;\r\n\t\r\n\t// Indicates whether to run the one time setup callback!\r\n\t#runSetupFn = true;\r\n\t\r\n\t#initialized = false;\r\n\t#hidden = false;\r\n\t\r\n\t/**\r\n\t * Indicates whether the modal is shown for the first time.\r\n\t * It is then always false after every time the modal is shown\r\n\t */\r\n\t#firstBoot = true;\r\n\t\r\n\t#modal = null;\r\n\t\r\n\t/*\r\n\t * Holds callback for topic event handling\r\n\t * */\r\n\t#topicCallback = {};\r\n\t\r\n\t#injectDataId;\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t * @param {object=} options Optional values\r\n\t * @param {string=} options.title Sets the modal title. It can be html or string value. Default is \"jst-Modal\".\r\n\t * @param {boolean=} options.reusable - Whether the modal can be reused. Default is true for non-iFramed modal.\r\n\t * @param {number|string=} options.width - The width of the modal. Default width is 100% of the parent window.\r\n\t * @param {number|string=} options.height - The height of the modal. Default height is 100% of the parent window.\r\n\t * @param {number|string=} options.padding - The padding of the modal. Default is 1rem.\r\n\t * @param {string=} options.url - Url for the iframe webpage\r\n\t * @param {object=} options.injectData - Any data to pass to iFramed modal\r\n\t * @param {boolean=} options.cancelable - Flag makes the modal cancellation status\r\n\t * @param {boolean=} options.overlay - Flag hides/shows the overlay below the modal\r\n\t * @param {boolean=} options.decorated - Flag removes the header from the modal\r\n\t * @param {boolean=} options.showCloseIcon - Whether to show close icon if modal is undecorated\r\n\t * @param {number=} options.opacity - Opacity value 0 to 1 for the overlay behind the modal\r\n\t * @param {'light'|'dark'=} options.theme - Modal theme. Light is default theme\r\n\t * @param {boolean=} options.showLoaderText - Text to display as loader label while fetching iframe paged\r\n\t * @param {string=} options.loaderText - Text to display as loader label while fetching iframe paged\r\n\t * */\r\n\tconstructor(id, options = {}) {\r\n\t\tthis.#id = id;\r\n\t\t\r\n\t\tjst.setProperty(options, 'title', 'jst-Modal');\r\n\t\tjst.setProperty(options, 'width', '100%');\r\n\t\tjst.setProperty(options, 'height', '100%');\r\n\t\tjst.setProperty(options, 'padding', '1rem');\r\n\t\tjst.setProperty(options, 'cancelable', true);\r\n\t\tjst.setProperty(options, 'overlay', true);\r\n\t\tjst.setProperty(options, 'decorated', true);\r\n\t\tjst.setProperty(options, 'showCloseIcon', true);\r\n\t\tjst.setProperty(options, 'theme', JstOverlay.getTheme());\r\n\t\tjst.setProperty(options, 'opacity', -1);\r\n\t\tjst.setProperty(options, 'url', null);\r\n\t\tjst.setProperty(options, 'reusable', !options['url']);\r\n\t\tjst.setProperty(options, 'showLoaderText', true);\r\n\t\tjst.setProperty(options, 'loaderText', 'Loading...');\r\n\t\tjst.setProperty(options, 'injectData', null);\r\n\t\t\r\n\t\tthis.#option = options;\r\n\t\t\r\n\t\t// Cache the modal so that we don't waste memory, if possible!\r\n\t\tJstOverlay._cacheClient(this);\r\n\t\t\r\n\t\t// We deferred injecting into DOM since this iFramed modal could cover its parent\r\n\t\t// iFramed modal. So we need to check if parent allows this when showing!\r\n\t\tif (this.isIFramedModal() && JstOverlay.hasParent()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.#init();\r\n\t}\r\n\t\r\n\t#init () {\r\n\t\tthis.#injectDOM();\r\n\t\tthis.#attachCloseIconListener();\r\n\t\tthis.#adjustModalSize();\r\n\t\tthis.#updateCloseIcon();\r\n\t\t\r\n\t\tthis.#applyTheme(this.#option.theme === 'dark');\r\n\t\t\r\n\t\tthis.#initialized = true;\r\n\t}\r\n\t\r\n\t#injectDOM() {\r\n\t\tlet modalContainer;\r\n\t\t\r\n\t\tif (this.#option.url) {\r\n\t\t\tmodalContainer = this.#iframeModal();\r\n\t\t} else {\r\n\t\t\tmodalContainer = this.#pageContentModal();\r\n\t\t}\r\n\t\t\r\n\t\t// Adjust padding\r\n\t\t$(this.#modal)\r\n\t\t\t.find('.jst-modal-content')\r\n\t\t\t.css('padding', this.#option.padding);\r\n\t\t\r\n\t\t/*\r\n\t\t * Inject decorated header, if asked\r\n\t\t */\r\n\t\tif (!this.#option.url && this.#option.decorated) {\r\n\t\t\tlet modalHeader = `\r\n\t\t\t\t<div class=\"jst-modal-header\">\r\n\t\t\t\t\t<h4 class=\"jst-modal-title\">${this.#option.title}</h4>\r\n\t\t\t\t\t<span class=\"jst-modal-icon-close\" title=\"Close\"></span>\r\n\t\t\t\t</div>\r\n            `;\r\n\t\t\t\r\n\t\t\t$(modalContainer).prepend(modalHeader);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Or it is only to show the close icon?\r\n\t\t */\r\n\t\tif (this.#option.showCloseIcon) {\r\n\t\t\tlet headerIcon = `\r\n\t\t\t\t<div class=\"jst-modal-header-less\">\r\n\t\t\t\t\t<span class=\"jst-modal-icon-close\" title=\"Close\"></span>\r\n\t\t\t\t</div>\r\n\t\t\t`;\r\n\t\t\t\r\n\t\t\t$(modalContainer).prepend(headerIcon);\r\n\t\t}\r\n\t}\r\n\t\r\n\t#iframeModal() {\r\n\t\tlet iframeThemeCls = this.#option.theme === 'dark' ? 'jst-dark' : '';\r\n\t\tlet loaderText = this.#option.showLoaderText ? `<h4 class=\"jst-modal-loader-label\">${this.#option.loaderText}</h4>` : '';\r\n\t\t\r\n\t\t//Add iframe overlay background class to hide its parent modal\r\n\t\tlet iframeOverlayBG = JstOverlay.hasParent() ? 'jst-modal-iframe-overlay-bg' : '';\r\n\t\t\r\n\t\t/*\r\n\t\t * Set inject data in GOD-parent with a unique id for this modal\r\n\t\t */\r\n\t\tlet dataAttr = '';\r\n\t\t\r\n\t\tif (this.#option.injectData && this.#option.url) {\r\n\t\t\tthis.#injectDataId = jst.uniqueId();\r\n\t\t\tdataAttr = `data-data-id=\"${this.#injectDataId}\"`;\r\n\t\t\tJstOverlay._setClientData(this.#injectDataId, this.#option.injectData);\r\n\t\t}\r\n\t\t\r\n\t\tlet content = `\r\n\t\t\t<div class=\"jst-modal\" id=\"${this.#id}\">\r\n\t\t\t\t<div class=\"jst-modal-d-block ${iframeOverlayBG}\">\r\n\t\t\t\t\t<div class=\"jst-modal-loader-wrapper\" style=\"width: ${this.#option.width}; height: ${this.#option.height}\">\r\n\t\t\t\t\t\t<div class=\"jst-modal-loader\"></div>\r\n\t\t\t\t\t\t${loaderText}\r\n\t\t\t\t\t</div>\r\n\t\r\n\t\t\t\t\t<div class=\"jst-modal-iframe-overlay-bg\"></div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div class=\"jst-modal-container\" style=\"display: none;\">\r\n\t\t\t\t\t\t<iframe ${dataAttr}\r\n\t\t\t\t\t\t\t\tid=\"${this.#id}-frame\"\r\n\t\t\t\t\t\t\t\tstyle=\"z-index: 1;\"\r\n\t\t\t\t\t\t\t\tsrc=\"${this.#option.url}\">\r\n\t\t\t\t\t\t</iframe>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<script>\r\n\t\t\t\t\t\t\t(() => {\r\n\t\t\t\t\t\t\t\tconst iframe = document.getElementById('${this.#id}-frame');\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst loaderDiv = $(iframe).parent().prev().prev();\r\n\t\t\t\t\t\t\t\tloaderDiv.css({\r\n\t\t\t\t\t\t\t\t\twidth: '${this.#option.width}',\r\n\t\t\t\t\t\t\t\t\theight: '${this.#option.height}'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tiframe.addEventListener('load', () => {\r\n\t\t\t\t\t\t\t\t\tlet iDoc = iframe.contentDocument || iframe.contentWindow.document;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// Append theme class to the iframe body so that client can apply colors correcntly\r\n\t\t\t\t\t\t\t\t\t$(iDoc.body).addClass('${iframeThemeCls}');\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t\t\t * Set first boot flag to false and then invoke onResume method!\r\n\t\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\t\tconst parent = window.parent.JstOverlay.getPopup('${this.#id}');\r\n\t\t\t\t\t\t\t\t\tparent?.onResume(true);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// Fade-out the loader\r\n\t\t\t\t\t\t\t\t\t$(loaderDiv).fadeOut(250, () => {\r\n\t\t\t\t\t\t\t\t\t\t// Show the iframe body\r\n\t\t\t\t\t\t\t\t\t\t$(iframe).parent().fadeIn(250);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tparent?.onShown(true);\r\n\t\t\t\t\t\t\t\t\t\tparent?._setFirstBootComplete();\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t$(iDoc).on('keydown', (e) => {\r\n\t\t\t\t\t\t\t\t\t\tlet keyboard = e.type === 'keydown' && e.key === 'Escape';\r\n\t\t\t\t\t\t\t\t\t\tif (!keyboard) return;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tJstOverlay._handleEscapeEvent(e);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t})();\r\n\t\t\t\t\t\t</script>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t\t\r\n\t\t$('body').append(content);\r\n\t\t\r\n\t\tthis.#modal = $(`#${this.#id}`);\r\n\t\treturn jst.getChildOf('.jst-modal-container', this.#modal);\r\n\t}\r\n\t\r\n\t#pageContentModal() {\r\n\t\tthis.#modal = $(jst.eleById(this.#id));\r\n\t\t\r\n\t\t/*\r\n\t\t * Wrap the content of div.jst-modal in div.modal-content.\r\n\t\t * And then wrap that div.modal-content in div.modal-container\r\n\t\t */\r\n\t\tlet content = `\r\n\t\t\t<div class=\"jst-modal-d-block\">\r\n\t\t\t\t<div class=\"jst-modal-container\">\r\n\t\t\t\t\t<div class=\"jst-modal-content\" id=\"${this.#id}-content\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t\t\r\n\t\t$($(this.#modal).contents()).wrapAll(content);\r\n\t\treturn jst.getChildOf('.jst-modal-container', this.#modal);\r\n\t}\r\n\t\r\n\t#attachCloseIconListener () {\r\n\t\tlet btn = jst.getChildOf('.jst-modal-icon-close', this.#modal);\r\n\t\t$(btn).click(() => this.close());\r\n\t}\r\n\t\r\n\t#adjustModalSize() {\r\n\t\tlet ele = jst.getChildOf('.jst-modal-container', this.#modal);\r\n\t\t\r\n\t\t$(ele).css({\r\n\t\t\twidth: this.#option.width,\r\n\t\t\theight: this.#option.height\r\n\t\t});\r\n\t}\r\n\t\r\n\t#updateCloseIcon() {\r\n\t\tlet closeIcon = jst.getChildOf('.jst-modal-icon-close', this.#modal);\r\n\t\tcloseIcon = $(closeIcon);\r\n\t\t\r\n\t\tif (!this.#option.showCloseIcon) $(closeIcon).fadeOut(250);\r\n\t\telse $(closeIcon).fadeIn(250);\r\n\t\t\r\n\t\t/*\r\n\t\t * Apply position `absolute` to modal content to show it from\r\n\t\t * the top-left position within the modal.\r\n\t\t */\r\n\t\tlet modalContent = jst.getChildOf('.jst-modal-content', this.#modal);\r\n\t\tmodalContent = $(modalContent);\r\n\t\t\r\n\t\tif (!this.#option.decorated) {\r\n\t\t\t$(modalContent).css({\r\n\t\t\t\tposition: 'absolute',\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tright: 0,\r\n\t\t\t\tbottom: 0\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t$(modalContent).css({\r\n\t\t\t\tposition: 'initial'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t#applyTheme(isDark) {\r\n\t\tif (isDark) {\r\n\t\t\tthis.#modal.addClass('jst-dark');\r\n\t\t} else {\r\n\t\t\tthis.#modal.removeClass('jst-dark');\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.isIFramedModal()) return;\r\n\t\t\r\n\t\tif (isDark) {\r\n\t\t\t$(this.getIframeBody()).addClass('jst-dark');\r\n\t\t} else {\r\n\t\t\t$(this.getIframeBody()).removeClass('jst-dark');\r\n\t\t}\r\n\t}\r\n\t\r\n\t#updateTitle() {\r\n\t\tlet titleDOM = jst.getChildOf('.jst-modal-title', this.#modal);\r\n\t\t$(titleDOM).html(this.#option.title);\r\n\t}\r\n\t\r\n\t#show() {\r\n\t\t// #1 - Try to take over the overlay\r\n\t\tlet acquired = JstOverlay._acquire(this);\r\n\t\t\r\n\t\tif (!acquired) return;\r\n\t\t\r\n\t\t/*\r\n\t\t * #2\r\n\t\t * Only invoke onResume if it is iFramed modal but not the first\r\n\t\t * or it is not an iFramed modal!\r\n\t\t * */\r\n\t\tlet a = this.isIFramedModal() && !this.#firstBoot;\r\n\t\tlet b = !this.isIFramedModal();\r\n\t\tlet invoke = a || b;\r\n\t\tif (invoke) {\r\n\t\t\tthis.onResume(this.#firstBoot);\r\n\t\t}\r\n\t\t\r\n\t\t// #3 - Figure out the right callback to invoke on modal shown/resumed\r\n\t\t$(this.#modal).fadeIn(250, () => {\r\n\t\t\t/*\r\n\t\t\t * onShown method will be handled by iframe onLoad event callback\r\n\t\t\t * and first boot flag will be set to false. So only call onShown\r\n\t\t\t * if it not an iFramed modal or the first boot flag has been set\r\n\t\t\t * false!\r\n\t\t\t */\r\n\t\t\tif (this.isIFramedModal() && this.#firstBoot) return;\r\n\t\t\t\r\n\t\t\tthis.onShown(this.#firstBoot);\r\n\t\t\t\r\n\t\t\tif (this.#firstBoot) this.#firstBoot = false;\r\n\t\t})\r\n\t\t\r\n\t\t// #3 - Set hidden status\r\n\t\tthis.#hidden = false;\r\n\t}\r\n\t\r\n\t_setFirstBootComplete () {\r\n\t\tthis.#firstBoot = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method is invoked when a modal is in display and users hits the escape button.\r\n\t * JstOverlay calls this method automatically.\r\n\t * <br><b>Warning: This method should be called directly.</b>\r\n\t */\r\n\t_handleEscape() {\r\n\t\tif (!this.#option.cancelable) return;\r\n\t\t\r\n\t\tthis.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * JstOverlay invokes this method when the modal is being shown from hidden\r\n\t * state.\r\n\t * <br><b>Warning: It should be called directly.</b>\r\n\t */\r\n\t_makeVisible() {\r\n\t\tthis.#hidden = false;\r\n\t\t\r\n\t\tthis.onResume(false);\r\n\t\t\r\n\t\t$(this.#modal).fadeIn(250, () => this.onShown(false));\r\n\t}\r\n\t\r\n\t/**\r\n\t * JstOverlay invokes this method when the modal needs to be hidden on another modal requesting\r\n\t * it to be hidden.\r\n\t * <br><b>Warning: It should be called directly.</b>\r\n\t */\r\n\t_hide() {\r\n\t\tif (this.#hidden) {\r\n\t\t\twarn(`Visible popups must be closed first`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.#hidden = true;\r\n\t\t$(this.#modal).fadeOut(250, () => this.onHidden());\r\n\t}\r\n\t\r\n\t/**\r\n\t * When there is an iframe modal to come, then parent modal needs to hide\r\n\t * its header and stop scrolling its content to avoid capturing child's\r\n\t * event!\r\n\t *\r\n\t * @param {boolean} value whether to set/restore parent state\r\n\t * */\r\n\t_prepareForIframe (value) {\r\n\t\tif (!this.isIFramedModal()) return;\r\n\t\t\r\n\t\tlet iframe = jst.getChildOf(`#${this.#id}-frame`, this.#modal);\r\n\t\tlet body = $(iframe['contentDocument'].body);\r\n\t\t\r\n\t\tlet overflow = value ? 'auto' : 'hidden';\r\n\t\tbody.css('overflow', overflow);\r\n\t\t\r\n\t\tlet header = $(this.#modal).find('.jst-modal-header-less');\r\n\t\t\r\n\t\tif (value) {\r\n\t\t\t$(header).fadeIn(250);\r\n\t\t} else {\r\n\t\t\t$(header).fadeOut(250);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Shows the modal.\r\n\t *\r\n\t * @return {JstModal}\r\n\t */\r\n\tshow() {\r\n\t\t/*\r\n\t\t * If this modal is shown from an iFramed modal, then we need to check if the\r\n\t\t * parent modal wants to hide themselves or not. Invoke onHide on parent to\r\n\t\t * do that. If they agree, then init this modal.\r\n\t\t */\r\n\t\tif (this.isIFramedModal() && JstOverlay.hasParent()) {\r\n\t\t\tlet parentClient = window.parent.JstOverlay.getTopClient();\r\n\t\t\tlet canParentHide = parentClient?.onHide() ?? true;\r\n\t\t\tif (!canParentHide) return this;\r\n\t\t\t\r\n\t\t\tif (!this.#initialized) this.#init();\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.#initialized) {\r\n\t\t\tthrow new Error(`Modal #${this.#id} must have been initialized before it can be shown`);\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Show after a bit of delay to avoid overlay animation glitch because of caching\r\n\t\t */\r\n\t\tif (JstOverlay.isReady()) {\r\n\t\t\tthis.#show();\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tjst.runLater(0.05, () => this.#show());\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Dismisses the modal\r\n\t */\r\n\tclose() {\r\n\t\tif (this.#hidden) {\r\n\t\t\twarn(`Attempted to close hidden model #${this.id}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// Can we close this modal based on the provided close callback?\r\n\t\tlet canClose = this.onClose() ?? true;\r\n\t\t\r\n\t\tif (!canClose) return;\r\n\t\t\r\n\t\tJstOverlay._release(this);\r\n\t\t$(this.#modal).fadeOut(250, () => {\r\n\t\t\tthis.onClosed();\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Remove the iframe from the DOM and delete client data\r\n\t\t\t * if the iframe was set to be not reusable!\r\n\t\t\t */\r\n\t\t\tif (this.isIFramedModal() && !this.isReusable()) {\r\n\t\t\t\tthis.#modal.remove();\r\n\t\t\t\t\r\n\t\t\t\tif (this.#option.data && this.#option.url) {\r\n\t\t\t\t\tJstOverlay._deleteClientData(this.#injectDataId)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string}\r\n\t * */\r\n\tget id() {\r\n\t\treturn this.#id;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Callback, invoked when user closes the modal or pressed the escape\r\n\t * button. It is invoked by JstOverlay to determine if this modal wants to close\r\n\t * itself and release the acquired overlay for the next modals to use.\r\n\t * */\r\n\tonClose() {\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Callback, invoked when user closes the modal or pressed the escape\r\n\t * button.\r\n\t * */\r\n\tonClosed() {\r\n\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Callback, invoked when the modal is going to be hidden.\r\n\t * It is invoked by JstOverlay to determine if this modal wants to hide\r\n\t * itself and release the acquired overlay for the next modals to use.\r\n\t *\r\n\t * @return {boolean} boolean to indicate whether the modal can be hid or not\r\n\t * */\r\n\tonHide() {\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Callback, invoked when the modal has just been hidden\r\n\t */\r\n\tonHidden() {\r\n\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Callback, invoked when the modal is being shown from hidden state.\r\n\t *\r\n\t * @param {boolean} firstBoot True value indicates the model is shown for the first time. False value indicates\r\n\t * the normal resume of the modal from hidden state or closed state.\r\n\t * */\r\n\tonResume(firstBoot) {\r\n\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Callback, invoked when the modal has just been shown.\r\n\t *\r\n\t * @param {boolean} firstBoot True value indicates the model is shown for the first time. False value indicates\r\n\t * the normal resume of the modal from hidden state or closed state.\r\n\t * */\r\n\tonShown(firstBoot) {\r\n\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set theme to the modal.\r\n\t *\r\n\t * @param {'light'|'dark'} theme\r\n\t * */\r\n\tsetTheme(theme) {\r\n\t\t/*\r\n\t\t * Check if the theme was previously applied!\r\n\t\t */\r\n\t\tif (this.#option.theme === theme) return;\r\n\t\t\r\n\t\tthis.#option.theme = theme;\r\n\t\t\r\n\t\tlet dark = theme === 'dark';\r\n\t\tthis.#applyTheme(dark);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Tells whether the modal is shown or not\r\n\t *\r\n\t * @return {boolean} true if the modal is shown, false otherwise\r\n\t * */\r\n\tisShown() {\r\n\t\treturn !this.#hidden;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns whether the modal has overlay to show behind it\r\n\t *\r\n\t * @return boolean\r\n\t * */\r\n\tgetShowOverlay() {\r\n\t\treturn this.#option.overlay;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the opacity for overlay background\r\n\t *\r\n\t * @return {number}\r\n\t */\r\n\tgetOpacity() {\r\n\t\treturn this.#option.opacity;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns if the modal is cancelable on keyboard escape event or on mouse clicked\r\n\t * on outside the modal content area.\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\tisCancelable() {\r\n\t\treturn this.#option.cancelable;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Resizes the model width & height. Values can either be in number, number with units or even\r\n\t * percentage values like '100%' etc.\r\n\t *\r\n\t * @param {number|string} width\r\n\t * @param {number|string} height\r\n\t */\r\n\tsetSize(width, height) {\r\n\t\tthis.#option.width = width;\r\n\t\tthis.#option.height = height;\r\n\t\t\r\n\t\tthis.#adjustModalSize();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Change the modal width. Value can be number, number with units or even be a percentage value like\r\n\t * '100%' etc.\r\n\t *\r\n\t * @param {number|string} width\r\n\t */\r\n\tsetWidth(width) {\r\n\t\tthis.#option.width = width;\r\n\t\tthis.#adjustModalSize();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Change the modal height. Value can be number, number with units or even be a percentage value like\r\n\t * '100%' etc.\r\n\t *\r\n\t * @param {number|string} height\r\n\t */\r\n\tsetHeight(height) {\r\n\t\tthis.#option.height = height;\r\n\t\tthis.#adjustModalSize();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the modal title. It can be html or string value\r\n\t *\r\n\t * @param title {string} Modal title\r\n\t * */\r\n\tsetTitle(title) {\r\n\t\tthis.#option.title = title;\r\n\t\tthis.#updateTitle();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Changes cancelable property of the modal\r\n\t *\r\n\t * @param {boolean} value\r\n\t */\r\n\tsetCancelable(value) {\r\n\t\tthis.#option.cancelable = value;\r\n\t\tthis.#updateCloseIcon();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Show/hides the modal close icon in the header\r\n\t *\r\n\t * @param {boolean} value\r\n\t */\r\n\tsetShowCloseIcon(value) {\r\n\t\tthis.#option.showCloseIcon = value;\r\n\t\tthis.#updateCloseIcon();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns if the close icon is set to be shown/hidden.\r\n\t *\r\n\t * @return boolean\r\n\t * */\r\n\tgetShowCloseIcon() {\r\n\t\treturn this.#option.showCloseIcon;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns if the model loaded an iframe as model content.\r\n\t *\r\n\t * @return boolean\r\n\t * */\r\n\tisIFramedModal() {\r\n\t\treturn this.#option.url != null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Runs the callback only once for a reusable modal. Helpful for scenarios\r\n\t * where a code-block needs to run once. It always invokes in order as it appears\r\n\t * in method chaining or program flow!\r\n\t *\r\n\t * @param {function(JstModal)} fn\r\n\t * */\r\n\tsetup (fn) {\r\n\t\tif (!this.#runSetupFn) return this;\r\n\t\tthis.#runSetupFn = false;\r\n\t\t\r\n\t\tfn(this);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any type of topic can be listened and a callback will be invoked on that\r\n\t * topic emission in code. Callback invocation happens down stream meaning\r\n\t * emitting an event of a topic will always go to parent modal/client!\r\n\t *\r\n\t *\r\n\t * @param {string} topic\r\n\t * @param {function(data: object)} callback. Callback should decide whether to bubble down\r\n\t * the topic dispatching down the hierarchy by returning true/false. By default, default it\r\n\t * returns true and propagates the topic event. Return false to stop.\r\n\t *\r\n\t * @return {JstModal}\r\n\t * */\r\n\tsubscribeEvent (topic, callback) {\r\n\t\t/*\r\n\t\t * Check if the topic was subscribed previously\r\n\t\t * */\r\n\t\tif (this.#topicCallback.owns(topic)) {\r\n\t\t\tconsole.warn(`Topic ${topic} has already been subscribed`);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tthis.#topicCallback[topic] = JstOverlay.subscribeEvent(topic, callback);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Unsubscribes from listening the topic registered before.\r\n\t *\r\n\t * @param {string} topic\r\n\t * */\r\n\tunsubscribeEvent (topic) {\r\n\t\tif (!this.#topicCallback.owns(topic)) {\r\n\t\t\tconsole.warn(`Unknown topic ${topic} can't be unsubscribed`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tdelete this.#topicCallback[topic];\r\n\t\treturn JstOverlay.unsubscribeEvent(this.#topicCallback[topic]);\r\n\t}\r\n\t\r\n\t/**\r\n\t * For a topic registered with JstOverlay, topic callback id is returned.\r\n\t *\r\n\t * @param {string} topic\r\n\t * @return {?string}\r\n\t * */\r\n\tgetTopicId (topic) {\r\n\t\treturn this.#topicCallback[topic] ?? null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Emits event for the topic with data.\r\n\t *\r\n\t * @param {string} topic\r\n\t * @param {object} data\r\n\t * */\r\n\temmitEvent (topic, data) {\r\n\t\tJstOverlay.emitEvent(topic, data);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {?HTMLElement}\r\n\t * */\r\n\tgetIframeBody () {\r\n\t\treturn document.getElementById(`${this.#id}-frame`)?.contentDocument.body ?? null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns if the modal is set to reusable or not.\r\n\t * This only applies to iframe modal.\r\n\t *\r\n\t * @return {boolean}\r\n\t * */\r\n\tisReusable () {\r\n\t\tif (!this.#option.url) return true;\r\n\t\t\r\n\t\treturn this.#option.reusable;\r\n\t}\r\n\t\r\n}","\r\nclass JstNum {\r\n\t\r\n\t/*\r\n    * currency sign constants\r\n    * */\r\n\t\r\n\tstatic MONEY_BD = '৳';\r\n\tstatic MONEY_GBP = '£';\r\n\tstatic MONEY_USD = '$';\r\n\t\r\n\t/**\r\n\t * Any number can be formatted in either currency format with sign or fractional\r\n\t * number with specified place.\r\n\t *\r\n\t * @param {number|string} input the number is either in string or number format.\r\n\t * @param {string} money currency sign for the number.\r\n\t * @param {boolean} lead0 indicates whether to add leading zero before the number.\r\n\t * @param {number} place the fractional place of number.\r\n\t * @param {boolean} addComma adds commas in formatted numbers\r\n\t * @return {string} formatted number with currency sign as specified by arguments.\r\n\t * */\r\n\tstatic format(input, money = '', lead0 = false, place = 2, addComma = true) {\r\n\t\t// Ensure we have a valid number\r\n\t\tlet num = parseFloat(input);\r\n\t\tif (isNaN(num)) return '0-0';\r\n\t\t\r\n\t\t// Determine if it's an integer or floating-point value\r\n\t\tlet integer = Number.isSafeInteger(num);\r\n\t\t\r\n\t\t// Check if it's negative\r\n\t\tlet negative = num < 0;\r\n\t\tnum = negative ? Math.abs(num) : num;\r\n\t\t\r\n\t\t// Add the symbol for negative values and any currency symbol\r\n\t\tlet symbol = negative ? '-' : '';\r\n\t\tsymbol += money.length === 0 ? '' : money;\r\n\t\t\r\n\t\t// Format the number with the specified decimal places\r\n\t\tnum = !integer ? num.toFixed(place) : num.toString();\r\n\t\t\r\n\t\t// Split the number into integer and decimal parts (if any)\r\n\t\tlet [integerPart, decimalPart] = num.split('.');\r\n\t\t\r\n\t\t// Add commas to the integer part if addComma is true\r\n\t\tif (addComma) {\r\n\t\t\tintegerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n\t\t}\r\n\t\t\r\n\t\t// Rejoin the integer and decimal parts (if any)\r\n\t\tnum = decimalPart ? `${integerPart}.${decimalPart}` : integerPart;\r\n\t\t\r\n\t\t// Add leading zero if requested\r\n\t\tnum = lead0 ? this.lead0(num) : num;\r\n\t\t\r\n\t\treturn `${symbol}${num}`;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Number formatted in currency can be parsed back to float number using this\r\n\t * method. By the default, sign is GBP(Great Britten Pound).\r\n\t *\r\n\t * @param {string} input number is in currency format.\r\n\t * @param {string} sign currency sign.\r\n\t * @return {number} the parsed floating number.\r\n\t * */\r\n\tstatic moneyToNum(input, sign = JstNum.MONEY_GBP) {\r\n\t\tinput = String(input);\r\n\t\treturn parseFloat(input.replace(sign, ''));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Leading zero can be added to any number if it is less than 10.\r\n\t *\r\n\t * @param {number} number the number.\r\n\t * @return {string} number with leading zero if needed.\r\n\t * */\r\n\tstatic lead0(number) {\r\n\t\treturn (number < 10) ? `0${number}` : number;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Converts numbers from English to Bangla notation.\r\n\t *\r\n\t * This function takes a number or a string that represents a number in English\r\n\t * notation and returns a string with each digit converted to Bangla. It's designed\r\n\t * to work with both integer and floating-point numbers represented as strings.\r\n\t * Non-numeric characters within the string are not converted but are preserved\r\n\t * in the output.\r\n\t *\r\n\t * @param {Number|String} englishNumber - The number or string representing a number\r\n\t *        to be converted from English to Bangla digits. This parameter can handle\r\n\t *        both numeric and string types. For string inputs, the function iterates\r\n\t *        through each character, converting numeric characters to Bangla while\r\n\t *        leaving non-numeric characters unchanged.\r\n\t *\r\n\t * @returns {String} A string representation of the input number where each English\r\n\t *         digit has been replaced with its corresponding Bangla digit. Non-numeric\r\n\t *         characters in the input are returned as is in the output string.\r\n\t *\r\n\t * @example\r\n\t * // Convert a numeric value\r\n\t * console.log(convertToBanglaNumber(2023)); // Outputs: ২০২৩\r\n\t *\r\n\t * // Convert a string representing a numeric value\r\n\t * console.log(convertToBanglaNumber(\"4567\")); // Outputs: ৪৫৬৭\r\n\t *\r\n\t * // Mixed input with non-numeric characters\r\n\t * console.log(convertToBanglaNumber(\"Flight 370\")); // Outputs: Flight ৩৭০\r\n\t */\r\n\tstatic bdNum(englishNumber) {\r\n\t\t// Mapping of English digits to Bangla digits\r\n\t\tconst banglaDigits = {\r\n\t\t\t'0': '০', '1': '১', '2': '২', '3': '৩',\r\n\t\t\t'4': '৪', '5': '৫', '6': '৬', '7': '৭',\r\n\t\t\t'8': '৮', '9': '৯'\r\n\t\t};\r\n\t\t\r\n\t\t// Convert the number to a string to iterate over each digit\r\n\t\tlet englishNumberStr = englishNumber.toString();\r\n\t\t\r\n\t\t// Replace each English digit with its Bangla counterpart\r\n\t\tlet banglaNumberStr = '';\r\n\t\tfor (let char of englishNumberStr) {\r\n\t\t\tbanglaNumberStr += banglaDigits[char] ?? char; // Keep the character as is if not found in the map\r\n\t\t}\r\n\t\t\r\n\t\treturn banglaNumberStr;\r\n\t}\r\n\t\r\n\tstatic bdOrdinal(num) {\r\n\t\t// Ensure num is treated as a number\r\n\t\tnum = typeof num === 'string' ? parseInt(num, 10) : num;\r\n\t\t\r\n\t\t// Define ordinal representations for 1 through 10\r\n\t\tconst ordinals = {\r\n\t\t\t1: 'প্রথম',\r\n\t\t\t2: 'দ্বিতীয়',\r\n\t\t\t3: 'তৃতীয়',\r\n\t\t\t4: 'চতুর্থ',\r\n\t\t\t5: 'পঞ্চম',\r\n\t\t\t6: 'ষষ্ঠ',\r\n\t\t\t7: 'সপ্তম',\r\n\t\t\t8: 'অষ্টম',\r\n\t\t\t9: 'নবম',\r\n\t\t\t10: 'দশম'\r\n\t\t}\r\n\t\t\r\n\t\t// Check if num is in the predefined range\r\n\t\tif (ordinals[num]) {\r\n\t\t\treturn ordinals[num]\r\n\t\t} else if (num > 10) {\r\n\t\t\treturn `${this.bdNum(num)}তম`\r\n\t\t} else {\r\n\t\t\treturn '০'\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n}","(() => {\r\n\t\r\n\tclass JstOverlay {\r\n\t\t#theme;\r\n\t\t\r\n\t\t#childOverlay = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {[JstModal]}\r\n\t\t * */\r\n\t\t#clientList = [];\r\n\t\t\r\n\t\t#reusableClientList = {};\r\n\t\t#injectedData = {};\r\n\t\t\r\n\t\t#ready = false;\r\n\t\t#overlay;\r\n\t\t\r\n\t\t#topicClientMap = {};\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tjst.run(() => {\r\n\t\t\t\t/*\r\n\t\t\t\t * Initialize the theme\r\n\t\t\t\t */\r\n\t\t\t\tthis.#theme = JstTheme.isDark() ? 'dark' : 'light';\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Check if the overlay DOM was already inserted!\r\n\t\t\t\t */\r\n\t\t\t\tlet overlayDOM = document.getElementById('jst-overlay');\r\n\t\t\t\t\r\n\t\t\t\tif (overlayDOM) return;\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Insert the overlay DOM element\r\n\t\t\t\t */\r\n\t\t\t\tlet overlay = `<div id=\"jst-overlay\" class=\"jst-overlay\"></div>`;\r\n\t\t\t\t$('body').prepend(overlay);\r\n\t\t\t\tthis.#overlay = $('#jst-overlay');\r\n\t\t\t\t\r\n\t\t\t\t// Pass the keydown escape or mouse click event to the currently shown modal/dialog\r\n\t\t\t\t$(document).on('keydown click', this.#overlay, (event) => this._handleEscapeEvent(event));\r\n\t\t\t\t\r\n\t\t\t\tthis.#overlay.hide();\r\n\t\t\t\tthis.#ready = true;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t_handleEscapeEvent(e, escapeEventCheck = false) {\r\n\t\t\t/*\r\n\t\t\t * If this overlay has child, then pass down this escape event call\r\n\t\t\t * to that & return.\r\n\t\t\t */\r\n\t\t\tif (this.#childOverlay) {\r\n\t\t\t\tthis.#childOverlay._handleEscapeEvent(e, true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet keyboard = e.type === 'keydown' && e.key === 'Escape';\r\n\t\t\tlet click = e.type === 'click' && $(e.target).hasClass('jst-modal-d-block');\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * The 'escapeEventCheck' parameter will tell us whether the child overlay should ignore\r\n\t\t\t * to check if it was a valid escape event coming from its overlay, not from the parent.\r\n\t\t\t */\r\n\t\t\tif (!escapeEventCheck && !keyboard && !click) return;\r\n\t\t\t\r\n\t\t\tthis.#clientList.peek()?._handleEscape(e);\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Shows the last hidden modal if there is any. If it was an inner OM, then on\r\n\t\t * reaching zero client, it delegates update call to its parent OM so that the\r\n\t\t * life cycles of modals seem natural!\r\n\t\t * */\r\n\t\t#update() {\r\n\t\t\tif (!this.#clientList.isEmpty()) {\r\n\t\t\t\tlet client = this.#clientList.peek();\r\n\t\t\t\t\r\n\t\t\t\tthis.#updateOverlay(client);\r\n\t\t\t\tclient._makeVisible();\r\n\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * If there is no client to overlay then wait for 75 milliseconds before\r\n\t\t\t * hiding the overlay. Another client may show up in the half way hiding.\r\n\t\t\t */\r\n\t\t\tjst.runLater(.075, () => {\r\n\t\t\t\tif (this.#clientList.isEmpty()) {\r\n\t\t\t\t\tthis.#hideOverlay();\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Unregister this overlay as child in parent!\r\n\t\t\t\t\twindow.parent.JstOverlay._unsetChildOM();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet client = this.#clientList.peek();\r\n\t\t\t\t\r\n\t\t\t\tthis.#updateOverlay(client);\r\n\t\t\t\tclient._makeVisible();\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Overlay can be acquired by any client. The client must have the interface\r\n\t\t * consists of methods: id, _handleEscape(event), _makeVisible(), _hide()\r\n\t\t *\r\n\t\t * @param {JstModal|JstAlert} client\r\n\t\t * @return {boolean} Returns if currently shown modal is wiling to release the\r\n\t\t * overlay to the client modal or not.\r\n\t\t * */\r\n\t\t_acquire(client) {\r\n\t\t\t/*\r\n\t\t\t * #1\r\n\t\t\t * If the child list is empty, check if this overlay has parent.\r\n\t\t\t * If so, register this overlay as child.\r\n\t\t\t */\r\n\t\t\tif (this.#clientList.isEmpty() && this.hasParent()) {\r\n\t\t\t\twindow.parent.JstOverlay._setChildOM(this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t* #2\r\n\t\t\t* Important to check if it is iframe coming from an iFramed modal\r\n\t\t\t* which will cover the parent iFramed modal. It makes sense to call hide\r\n\t\t\t* related methods and meet the expectations! So try to get parent client.\r\n\t\t\t*/\r\n\t\t\tlet parentClient;\r\n\t\t\t\r\n\t\t\tif (client.isIFramedModal() && this.hasParent()) {\r\n\t\t\t\tparentClient = window.parent.JstOverlay.getTopClient();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// #3 - Check if the current client is able to hide\r\n\t\t\tlet topClient = this.#clientList.peek();\r\n\t\t\t\r\n\t\t\t// JstAlert can always acquire overlay no matter what!\r\n\t\t\tlet canHide = (client instanceof JstAlert || topClient?.onHide()) ?? true;\r\n\t\t\tif (!canHide) return false;\r\n\t\t\t\r\n\t\t\t// #4 - Push the new client on the stack\r\n\t\t\tthis.clientList.push(client);\r\n\t\t\t\r\n\t\t\t// #5 - Invoke onHidden method on parent iFrame, if it has so!\r\n\t\t\tparentClient?.onHidden();\r\n\t\t\t\r\n\t\t\t// #6 - Ask the currently shown client to hide, if there is any shown\r\n\t\t\ttopClient?._hide();\r\n\t\t\t\r\n\t\t\t// #7 - Update the overlay as per the client's requirement, whether to show/hide\r\n\t\t\tthis.#updateOverlay(client);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Client can release any acquired overlay. The client must have an interface of\r\n\t\t * essential methods which are needed by JstOverlay to handle the complete\r\n\t\t * lifecycle of the overlay.\r\n\t\t *\r\n\t\t * See {@link JstOverlay._acquire()} method for more details.\r\n\t\t *\r\n\t\t * @param {JstModal|JstAlert} client\r\n\t\t * */\r\n\t\t_release(client) {\r\n\t\t\t// #1 - Pop, if release request came from the top-most client on the stack\r\n\t\t\tlet topMostClient = this.clientList.peek();\r\n\t\t\t\r\n\t\t\tif (topMostClient?.id === client.id) this.#clientList.pop();\r\n\t\t\t\r\n\t\t\t// #2 - Update the overlay after releasing the top-most client\r\n\t\t\tthis.#update();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns if this OM has a parent OM\r\n\t\t *\r\n\t\t * @return boolean\r\n\t\t * */\r\n\t\thasParent() {\r\n\t\t\treturn window !== window.parent;\r\n\t\t}\r\n\t\t\r\n\t\t#getOpacity() {\r\n\t\t\t// Adjust the overlay as asked!\r\n\t\t\tlet opacity = this.#clientList.peek().getOpacity();\r\n\t\t\t\r\n\t\t\t// Opacity wasn't set by the client or set to -1\r\n\t\t\tif (opacity === -1) opacity = this.#theme === 'dark' ? .85 : .5;\r\n\t\t\t\r\n\t\t\treturn opacity;\r\n\t\t}\r\n\t\t\r\n\t\t#showOverlay() {\r\n\t\t\tthis.#overlay.css('opacity', this.#getOpacity());\r\n\t\t\t\r\n\t\t\tif (this.#overlay.css('display') === 'block') return;\r\n\t\t\t\r\n\t\t\t$(this.#overlay).fadeIn(250);\r\n\t\t}\r\n\t\t\r\n\t\t#hideOverlay() {\r\n\t\t\t$(this.#overlay).fadeOut(250);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Shows/hides the overlay behind the modal as required by the modal.\r\n\t\t *\r\n\t\t * @param {JstModal} client\r\n\t\t * */\r\n\t\t#updateOverlay(client) {\r\n\t\t\tif (client.getShowOverlay()) this.#showOverlay();\r\n\t\t\telse if (!client.getShowOverlay()) this.#hideOverlay();\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Caches the modal to be reused if the modal is either an iFramed modal reusable\r\n\t\t * or a basic modal.\r\n\t\t *\r\n\t\t * @param {JstModal} client\r\n\t\t * */\r\n\t\t_cacheClient (client) {\r\n\t\t\tif (!client.isIFramedModal() || (client.isIFramedModal() && client.isReusable())) {\r\n\t\t\t\tif (!this.#reusableClientList.owns(client.id)) {\r\n\t\t\t\t\tthis.#reusableClientList[client.id] = client;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets the inner JstOverlay.\r\n\t\t *\r\n\t\t * @param {JstOverlay} innerJstOverlay the inner overlay manager instance\r\n\t\t * */\r\n\t\t_setChildOM(innerJstOverlay) {\r\n\t\t\t// If set then no need to go further!\r\n\t\t\tif (this.#childOverlay !== null) return;\r\n\t\t\t\r\n\t\t\tthis.#childOverlay = innerJstOverlay;\r\n\t\t\tthis._prepareParent();\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Unsets the inner OM, as the inner OM has reached zero modal client.\r\n\t\t * */\r\n\t\t_unsetChildOM() {\r\n\t\t\tthis._restoreParent();\r\n\t\t\tthis.#childOverlay = null;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * When there is an inner JstOverlay to come, it hides close icon and\r\n\t\t * sets the content not scrollable of currently shown modal of this OM.\r\n\t\t * */\r\n\t\t_prepareParent() {\r\n\t\t\tlet client = this.#clientList.peek();\r\n\t\t\t\r\n\t\t\tif (client.isIFramedModal()) {\r\n\t\t\t\tclient._prepareForIframe(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t * Restores the current client (shown model on this OM) to previous state.\r\n\t\t * Close icon will be show (if configured so) and content is made scrollable.\r\n\t\t * */\r\n\t\t_restoreParent() {\r\n\t\t\tthis.#clientList.peek()?._prepareForIframe(true);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Set injected data by client in GOD-parent OM.\r\n\t\t *\r\n\t\t * @param {string} clientId randomly generated unique client id for tracking data\r\n\t\t * @param {object} data injected data\r\n\t\t * */\r\n\t\t_setClientData (clientId, data) {\r\n\t\t\tif (this.hasParent()) {\r\n\t\t\t\twindow.parent.JstOverlay._setClientData(clientId, data);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.#injectedData[clientId] = data;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes injected data stored by the unique tracking id.\r\n\t\t *\r\n\t\t * @param {string} clientId\r\n\t\t * */\r\n\t\t_deleteClientData (clientId) {\r\n\t\t\tif (this.hasParent()) {\r\n\t\t\t\twindow.parent.JstOverlay._deleteClientData(clientId);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdelete this.#injectedData[clientId];\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the injected client data.\r\n\t\t * This method is not invoked on JstOverlay instance directly by code as there\r\n\t\t * is no way to track the clientId param.\r\n\t\t *\r\n\t\t * @param {string} clientId\r\n\t\t * @return {object} injected data. Returns empty object if none was set.\r\n\t\t * */\r\n\t\t_getClientData (clientId) {\r\n\t\t\tif (this.hasParent()) {\r\n\t\t\t\treturn window.parent.JstOverlay._getClientData(clientId);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.#injectedData[clientId] ?? {};\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {string} topic\r\n\t\t * @param {function(data: object)} callback\r\n\t\t * */\r\n\t\tsubscribeEvent(topic, callback) {\r\n\t\t\tlet subscriberId = jst.uniqueId();\r\n\t\t\t\r\n\t\t\t// Create topic object if it is not present\r\n\t\t\tif (!this.#topicClientMap.owns(topic)) {\r\n\t\t\t\tthis.#topicClientMap[topic] = {};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.#topicClientMap[topic][subscriberId] = callback;\r\n\t\t\treturn subscriberId;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {string} subscriberId\r\n\t\t * */\r\n\t\tunsubscribeEvent(subscriberId) {\r\n\t\t\tfor (let topicKey in this.#topicClientMap) {\r\n\t\t\t\tlet topicMap = this.#topicClientMap[topicKey];\r\n\t\t\t\t\r\n\t\t\t\tif (topicMap.hasOwnProperty(subscriberId)) {\r\n\t\t\t\t\tdelete topicMap[subscriberId];\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @param {string} topic\r\n\t\t * @param {object} data\r\n\t\t * */\r\n\t\temitEvent(topic, data) {\r\n\t\t\tlet topicSubscriberMap = this.#topicClientMap[topic] ?? null;\r\n\t\t\t\r\n\t\t\tlet bubbleDown = true;\r\n\t\t\t\r\n\t\t\tif (topicSubscriberMap) {\r\n\t\t\t\tfor (let subscriberId in topicSubscriberMap) {\r\n\t\t\t\t\tif (!topicSubscriberMap[subscriberId](data)) {\r\n\t\t\t\t\t\tbubbleDown = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!bubbleDown || !this.hasParent()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twindow.parent.JstOverlay.emitEvent(topic, data);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the currently active client modal\r\n\t\t *\r\n\t\t * @return {JstModal}\r\n\t\t * */\r\n\t\tgetTopClient() {\r\n\t\t\treturn this.#clientList.peek();\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Sets the OM theme configuration to light/dark and updates the client modals.\r\n\t\t *\r\n\t\t * @param {'light'|'dark'} theme\r\n\t\t * */\r\n\t\tsetTheme(theme) {\r\n\t\t\tthis.#theme = theme;\r\n\t\t\t\r\n\t\t\tlet isDark = theme === 'dark';\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Change background color of the overlay\r\n\t\t\t * */\r\n\t\t\tlet ele = $('.jst-overlay');\r\n\t\t\tjst.switchCls(isDark, 'jst-overlay-dark', ele);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Apply this theme change to all the overlay clients\r\n\t\t\t */\r\n\t\t\tthis.#clientList.forEach((client) => client.setTheme(theme));\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Let's not forget about reusable clients\r\n\t\t\t */\r\n\t\t\tfor (const key in this.#reusableClientList) {\r\n\t\t\t\tthis.#reusableClientList[key].setTheme(theme);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Pass it down to child JstOverlay\r\n\t\t\t * */\r\n\t\t\tthis.#childOverlay?.setTheme(theme);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the current theme set up.\r\n\t\t *\r\n\t\t * @return {'light' | 'dark'}\r\n\t\t * */\r\n\t\tgetTheme() {\r\n\t\t\treturn (\r\n\t\t\t\tthis.hasParent() ?\r\n\t\t\t\twindow.parent.JstOverlay.getTheme() :\r\n\t\t\t\tthis.#theme\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns whether the modal specified by the id is currently shown.\r\n\t\t *\r\n\t\t * @return boolean\r\n\t\t * */\r\n\t\tisUp(id) {\r\n\t\t\treturn this.#clientList.peek()?.id === id;\r\n\t\t}\r\n\t\t\r\n\t\tisReady() {\r\n\t\t\treturn this.#ready;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @return {[JstModal]}\r\n\t\t * */\r\n\t\tget clientList() {\r\n\t\t\treturn this.#clientList;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * It looks at the reusable client list to find a popup by id.\r\n\t\t * If not found, it then uses the client list array to find the modal.\r\n\t\t *\r\n\t\t * @param {string} id client id\r\n\t\t * @return {?JstModal}\r\n\t\t * */\r\n\t\tgetPopup(id) {\r\n\t\t\tlet client = this.#reusableClientList?.[id];\r\n\t\t\t\r\n\t\t\tif (client) return client;\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < this.#clientList.length; i++) {\r\n\t\t\t\tlet c = this.#clientList[i];\r\n\t\t\t\t\r\n\t\t\t\tif (c.id === id) return c;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\twindow.JstOverlay = new JstOverlay();\r\n\t\r\n\t/**\r\n\t * Any type of topic can be listened and a callback will be invoked on that\r\n\t * topic emission in code. Callback invocation happens down stream meaning\r\n\t * emitting an event of a topic will always go to parent modal/client!\r\n\t *\r\n\t *\r\n\t * @param {string} topic\r\n\t * @param {function(data: object)} callback. Callback should decide whether to bubble down\r\n\t * the topic dispatching down the hierarchy by returning true/false. By default, default it\r\n\t * returns true and propagates the topic event. Return false to stop.\r\n\t *\r\n\t * @return {string} subscription id. It can be used to unsubscribe the topic.\r\n\t * */\r\n\twindow.subscribeEvent = (topic, callback) => {\r\n\t\treturn window.JstOverlay.subscribeEvent(topic, callback);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Any topic can be unsubscribed using subscriber id which was returned by {@link subscribeEvent()}\r\n\t * call.\r\n\t *\r\n\t * @param {string} subscriberId\r\n\t * */\r\n\twindow.unsubscribeEvent = (subscriberId) => {\r\n\t\treturn window.JstOverlay.unsubscribeEvent(subscriberId);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Get popup by the id provided.\r\n\t *\r\n\t * @param {string} id The popup id\r\n\t * @returns {JstModal} undefined if there is no popup with the id otherwise the popup\r\n\t * */\r\n\twindow.getPopup = (id) => {\r\n\t\treturn window.JstOverlay.getPopup(id);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Closes the top-most modal off the stack.\r\n\t * */\r\n\twindow.closePopup = () => {\r\n\t\t/*\r\n\t\t * If there is no client and this OM has parent and delegate this\r\n\t\t * call to the parent OM to close!\r\n\t\t * */\r\n\t\tlet om = window.JstOverlay;\r\n\t\r\n\t\tif (om.clientList.isEmpty() && om.hasParent()) {\r\n\t\t\twindow.parent.closePopup();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// Try to close current client on this OM!\r\n\t\tom.clientList.peek()?.close();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns injected data from the parent modal for child modal.\r\n\t *\r\n\t * @return {object} object data. Returns empty object if no data was set by parent!\r\n\t * */\r\n\twindow.getClientData = () => {\r\n\t\tlet iframeId = window.frameElement?.getAttribute('data-data-id') ?? null;\r\n\t\t\r\n\t\tif (!iframeId) return {};\r\n\t\t\r\n\t\treturn window.JstOverlay._getClientData(iframeId);\r\n\t};\r\n\t\r\n})();","class JstStorage {\r\n\t\r\n\t/**\r\n\t * @param {string} key\r\n\t * @param {number|string|boolean} value\r\n\t * */\r\n\tstatic set(key, value) {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} key\r\n\t * */\r\n\tstatic unset(key) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} key\r\n\t * @param {boolean} defValue\r\n\t * @return {boolean}\r\n\t * */\r\n\tstatic bool(key, defValue) {\r\n\t\treturn Boolean(localStorage.getItem(key)) ?? defValue;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} key\r\n\t * @param {string} defValue\r\n\t * @return {string}\r\n\t * */\r\n\tstatic str(key, defValue) {\r\n\t\treturn localStorage.getItem(key) ?? defValue;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} key\r\n\t * @param {number} defValue\r\n\t * @return {number}\r\n\t * */\r\n\tstatic int (key, defValue) {\r\n\t\tlet data = localStorage.getItem(key) ?? defValue;\r\n\t\tdata = parseInt(data);\r\n\t\t\r\n\t\treturn isNaN(data) ? defValue : data;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} key\r\n\t * @param {number} defValue\r\n\t * @return {number}\r\n\t * */\r\n\tstatic float (key, defValue) {\r\n\t\tlet data = localStorage.getItem(key) ?? defValue;\r\n\t\tdata = parseFloat(data);\r\n\t\t\r\n\t\treturn isNaN(data) ? defValue : data;\r\n\t}\r\n\t\r\n\tstatic setCookie(key, value, expDay= 365) {\r\n\t\tconst d = new Date();\r\n\t\td.setTime(d.getTime() + (expDay * 24 * 60 * 60 * 1000));\r\n\t\tlet expires = \"expires=\"+ d.toUTCString();\r\n\t\tdocument.cookie = key + \"=\" + value + \";\" + expires + \";SameSite=Lax; path=/\";\r\n\t}\r\n\t\r\n\tstatic unsetCookie(key) {\r\n\t\tdocument.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;SameSite=Lax`;\r\n\t}\r\n\t\r\n\tstatic cookieBool(key, defaultValue) {\r\n\t\tlet value = JstStorage.cookieStr(key, null);\r\n\t\tif (value == null) return defaultValue;\r\n\t\treturn value === 'true';\r\n\t}\r\n\t\r\n\tstatic cookieInt(key, defaultValue) {\r\n\t\treturn parseInt(JstStorage.cookieStr(key, defaultValue));\r\n\t}\r\n\t\r\n\tstatic cookieFloat(key, defaultValue) {\r\n\t\treturn parseFloat(JstStorage.cookieStr(key, defaultValue));\r\n\t}\r\n\t\r\n\tstatic cookieStr(key, defaultValue) {\r\n\t\tlet name = key + \"=\";\r\n\t\tlet decodedCookie = decodeURIComponent(document.cookie);\r\n\t\t\r\n\t\tlet ca = decodedCookie.split(';');\r\n\t\tfor(let i = 0; i < ca.length; i++) {\r\n\t\t\tlet c = ca[i];\r\n\t\t\twhile (c.charAt(0) === ' ') {\r\n\t\t\t\tc = c.substring(1);\r\n\t\t\t}\r\n\t\t\tif (c.indexOf(name) === 0) return c.substring(name.length, c.length);\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t}\r\n}","class JstTable {\r\n\t\r\n\t#id;\r\n\t#table;\r\n\t\r\n\t#filterBy = -1;\r\n\t\r\n\t#sort = 'desc';\r\n\t#lastSortedIcon = null;\r\n\t#lastSortedCol = null;\r\n\t\r\n\tconstructor(id) {\r\n\t\tthis.#id = id;\r\n\t\tthis.#table = $(`#${id}`);\r\n\t\t\r\n\t\tthis.#hookFilterListener();\r\n\t\tthis.#loadFilter();\r\n\t\t\r\n\t\tthis.#hookSortListener();\r\n\t}\r\n\t\r\n\t#hookSortListener() {\r\n\t\tlet thisObj = this;\r\n\t\t\r\n\t\t/*\r\n\t\t * Add click listener to sort icons found in table header\r\n\t\t * */\r\n\t\t$(`#${this.#id} .jst-table-col-icon-sort`).click(function () {\r\n\t\t\tthisObj.#lastSortedIcon = this;\r\n\t\t\t\r\n\t\t\t// Toggle the sort direction\r\n\t\t\tthisObj.#sort = thisObj.#sort === 'asc' ? 'desc' : 'asc';\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Update sort icon UI\r\n\t\t\t * */\r\n\t\t\tlet angle = thisObj.#sort === 'desc' ? 'rotate(0deg) scaleX(1)' : 'rotate(180deg) scaleX(-1)';\r\n\t\t\t$(this).css('transform', angle);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Remove all shown sort icons\r\n\t\t\t * */\r\n\t\t\tlet parent = this.parentElement;\r\n\t\t\t$(parent).toggleClass('jst-table-col-icon-sort-show', true);\r\n\t\t\t\r\n\t\t\tif (thisObj.#lastSortedCol !== parent) {\r\n\t\t\t\t$(thisObj.#lastSortedCol).removeClass('jst-table-col-icon-sort-show');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Update the last sorted col\r\n\t\t\tthisObj.#lastSortedCol = parent;\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Sort the table rows\r\n\t\t\t * */\r\n\t\t\tlet rows = thisObj.#table.find('tbody tr').toArray();\r\n\t\t\tlet index = $(parent).index();\r\n\t\t\tlet descending = thisObj.#sort !== 'asc';\r\n\t\t\t\r\n\t\t\trows.sort(function(rowA, rowB) {\r\n\t\t\t\tlet cellA = $(rowA).children('td').eq(index).text().trim();\r\n\t\t\t\tlet cellB = $(rowB).children('td').eq(index).text().trim();\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Oh, you number!\r\n\t\t\t\t * */\r\n\t\t\t\tif (['৳', '£', '$'].includes(cellA[0])) {\r\n\t\t\t\t\tcellA = cellA.replace(/[৳£$,]/g, '');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (['৳', '£', '$'].includes(cellB[0])) {\r\n\t\t\t\t\tcellB = cellB.replace(/[৳£$,]/g, '');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif ($.isNumeric(cellA) && $.isNumeric(cellB)) {\r\n\t\t\t\t\treturn descending ? cellB - cellA : cellA - cellB;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn descending ? cellB.localeCompare(cellA) : cellA.localeCompare(cellB);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// Append the sorted rows to the table\r\n\t\t\t$.each(rows, function(index, row) {\r\n\t\t\t\tthisObj.#table.children('tbody').append(row);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*\r\n\t * For a column name, it figures out the index of the column in table\r\n\t * header. Returns -1 if it couldn't find the column in the table header.\r\n\t * */\r\n\t#getColumnIndex(colName) {\r\n\t\tlet colIndex = -1;\r\n\t\t\r\n\t\t$(`#${this.#id} th .jst-table-col-label`).each(function (i) {\r\n\t\t\tif ($(this).text().toLowerCase().trim() === colName.trim().toLowerCase()) {\r\n\t\t\t\tcolIndex = i;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn colIndex;\r\n\t}\r\n\t\r\n\t#loadFilter() {\r\n\t\tlet cachedFilter = localStorage.getItem(`jst_tab_filter_by_${this.#id}`) ?? null;\r\n\t\t$(`#${this.#id}-filter input`).prop('disabled', !cachedFilter);\r\n\t\t\r\n\t\tif (!cachedFilter) return;\r\n\t\t\r\n\t\tthis.#filterBy = this.#getColumnIndex(cachedFilter);\r\n\t\t\r\n\t\tif (this.#filterBy === -1) return;\r\n\t\t\r\n\t\t/*\r\n\t\t * Find the option if available in the select by the cached value\r\n\t\t * */\r\n\t\tlet options = $(`#${this.#id}-filter select option`).filter(function () {\r\n\t\t\treturn $(this).val().toLowerCase() === cachedFilter;\r\n\t\t});\r\n\t\t\r\n\t\tif (options.length <= 0) return;\r\n\t\t\r\n\t\t$(`#${this.#id}-filter select`).val(options.val());\r\n\t}\r\n\t\r\n\t#hookFilterListener() {\r\n\t\tlet filterDiv = `#${this.#id}-filter`;\r\n\t\tlet keywordInput = $(`${filterDiv} input`);\r\n\t\t\r\n\t\tlet thisObj = this;\r\n\t\t\r\n\t\t/*\r\n\t\t * Add select option change listener\r\n\t\t * */\r\n\t\t$(`${filterDiv} select`).change((i) => {\r\n\t\t\t/*\r\n\t\t\t * Get the selected option value and disable input box if empty/undefined\r\n\t\t\t * */\r\n\t\t\tlet colName = i.target.value?.toLowerCase().trim();\r\n\t\t\tkeywordInput.prop('disabled', !colName);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Get the column index\r\n\t\t\t * */\r\n\t\t\tthis.#filterBy = this.#getColumnIndex(colName);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * TODO - Do we need to allow it via configuration option?\r\n\t\t\t * */\r\n\t\t\t// if (this.#filterBy === -1) return;\r\n\t\t\t\r\n\t\t\t// Cache the option selected\r\n\t\t\tlocalStorage.setItem(`jst_tab_filter_by_${this.#id}`, colName);\r\n\t\t});\r\n\t\t\r\n\t\t/*\r\n\t\t * Add keyup listener to filter input box\r\n\t\t * */\r\n\t\tkeywordInput.keyup(function () {\r\n\t\t\tlet column = thisObj.#filterBy;\r\n\t\t\tif (column === -1) return;\r\n\t\t\t\r\n\t\t\t// Get filter keywords\r\n\t\t\tlet keywords = $(this).val()?.trim().toLowerCase();\r\n\t\t\t\r\n\t\t\t$(thisObj.#table).find(`tbody tr`).filter(function() {\r\n\t\t\t\t// Get column keywords to match the keywords in\r\n\t\t\t\tlet colValue = $($(this).find('td')[column]).text().trim().toLowerCase();\r\n\t\t\t\t$(this).toggle(colValue.includes(keywords));\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n}","(() => {\r\n\r\n\tclass JstTheme {\r\n\t\t#listeners = [];\r\n\t\t\r\n\t\t// TODO - make a method to return 'light|dark'\r\n\t\t// TODO - make sure theme sets JstOverlay properly!\r\n\r\n\t\tconstructor() {\r\n\t\t\tjst.run(() => {\r\n\t\t\t\t/*\r\n\t\t\t\t * Get the theme attribute\r\n\t\t\t\t */\r\n\t\t\t\tlet themeAttr = getComputedStyle(document.documentElement).getPropertyValue('--jst-theme-attr');\r\n\t\t\t\tif (themeAttr) jst.themeAttribute = themeAttr;\r\n\t\t\t\t\r\n\t\t\t\tlet config = {\r\n\t\t\t\t\tattributes: true,\r\n\t\t\t\t\tattributeFilter: [themeAttr]\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tlet callback = (mutationsList) => {\r\n\t\t\t\t\tlet value = this.isDark() ? 'dark' : 'light';\r\n\t\t\t\t\tJstStorage.setCookie('theme', value);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let mutation of mutationsList) {\r\n\t\t\t\t\t\tif (mutation.type !== 'attributes') continue\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.#listeners.forEach((listener) => listener(this.isLight()))\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tJstOverlay.setTheme(value);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Create an observer instance linked to the callback function\r\n\t\t\t\tlet observer = new MutationObserver(callback);\r\n\r\n\t\t\t\t// Start observing the target node for configured mutations\r\n\t\t\t\t$(document).ready(() => observer.observe($('body')[0], config));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param callback {function(string:theme)}\r\n\t\t * */\r\n\t\tlistenChange(callback) {\r\n\t\t\tthis.#listeners.push(callback);\r\n\t\t}\r\n\t\t\r\n\t\tisDark() {\r\n\t\t\treturn document.body.getAttribute(jst.themeAttribute)?.toLowerCase() === 'dark';\r\n\t\t}\r\n\t\t\r\n\t\tisLight() {\r\n\t\t\treturn !this.isDark();\r\n\t\t}\r\n\r\n\t\ttoggle(theme = null) {\r\n\t\t\tthis.#setTransitionEffect();\r\n\r\n\t\t\tif (theme === null) {\r\n\t\t\t\ttheme = this.isDark() ? 'light' : 'dark';\r\n\t\t\t}\r\n\r\n\t\t\tdocument.body.setAttribute(jst.themeAttribute, theme);\r\n\t\t\tJstStorage.setCookie('theme', theme);\r\n\r\n\t\t\tjst.runLater(2, this.#removeTransitionEffect);\r\n\t\t}\r\n\r\n\t\tload() {\r\n\t\t\tlet theme = JstStorage.cookieStr('theme', 'dark');\r\n\r\n\t\t\t/*\r\n\t\t\t * Check if the theme attribute is applied with the value already\r\n\t\t\t * */\r\n\t\t\tif (document.body.getAttribute(jst.themeAttribute)?.toLowerCase() === theme)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tthis.toggle(theme);\r\n\t\t}\r\n\r\n\t\t#setTransitionEffect() {\r\n\t\t\tlet style = document.createElement('style');\r\n\t\t\tstyle.id = 'dynamicTransition';\r\n\t\t\tstyle.innerHTML = `* { transition: background 600ms !important; }`;\r\n\t\t\t\r\n\t\t\tdocument.head.appendChild(style);\r\n\t\t}\r\n\r\n\t\t#removeTransitionEffect() {\r\n\t\t\tlet styleElement = document.querySelector('#dynamicTransition');\r\n\t\t\t\r\n\t\t\tif (styleElement) {\r\n\t\t\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\twindow.JstTheme = new JstTheme();\r\n\r\n})();\r\n","\r\n/*\r\n* Any feedback to the user can be displayed at the right bottom side of the document\r\n* with auto hiding animation or can be shown sticky. Toast can invoke callback if set\r\n* when the toast has been done with hiding.\r\n*\r\n* It also has a feature which can look into the cookie to see if any toast is pending to\r\n* show on document ready event and after showing the message it clears the toast cookies.\r\n* */\r\n(() => {\r\n\t\r\n\tclass JstToast {\r\n\t\t\r\n\t\t#toastMsg = 'A sweet and delicious toast to eat! 😎';\r\n\t\t\r\n\t\tERROR = -1;\r\n\t\tWARNING = 0;\r\n\t\tSUCCESS = 1;\r\n\t\tINFO = 2;\r\n\t\t\r\n\t\t#delay;\r\n\t\t\r\n\t\t#injected = false;\r\n\t\t#toast;\r\n\t\t#icon;\r\n\t\t#msg;\r\n\t\t#guide;\r\n\t\t#bar;\r\n\t\t\r\n\t\t#autoHide;\r\n\t\t#callback;\r\n\t\t\r\n\t\terror(msg, autoHide = true, callback = null, delay = 3) {\r\n\t\t\tthis.show(this.ERROR, msg, autoHide, callback, delay);\r\n\t\t}\r\n\t\t\r\n\t\twarning(msg, autoHide = true, callback = null, delay = 3) {\r\n\t\t\tthis.show(this.WARNING, msg, autoHide, callback, delay);\r\n\t\t}\r\n\t\t\r\n\t\tsuccess(msg, autoHide = true, callback = null, delay = 3) {\r\n\t\t\tthis.show(this.SUCCESS, msg, autoHide, callback, delay);\r\n\t\t}\r\n\t\t\r\n\t\tinfo(msg, autoHide = true, callback = null, delay = 3) {\r\n\t\t\tthis.show(this.INFO, msg, autoHide, callback, delay);\r\n\t\t}\r\n\t\t\r\n\t\tshow(type, msg, autoHide = true, callback = null, delay = 3) {\r\n\t\t\tthis.#stopAnimation();\r\n\t\t\t\r\n\t\t\tthis.#toastMsg = msg;\r\n\t\t\tthis.#autoHide = autoHide;\r\n\t\t\tthis.#callback = callback;\r\n\t\t\tthis.#delay = delay;\r\n\t\t\t\r\n\t\t\t// make sure we have injected DOM into the document\r\n\t\t\tthis.#injectDOM();\r\n\t\t\t\r\n\t\t\t// hider bar border, if it was showing previously\r\n\t\t\t$(this.#bar).hide();\r\n\t\t\t\r\n\t\t\t// remove listeners from the toast, if added previously\r\n\t\t\tthis.#removeListener();\r\n\t\t\t\r\n\t\t\tif (this.#autoHide) this.#addListener();\r\n\t\t\t\r\n\t\t\t// apply themes, styles to toast DOMs and show the toast with animation\r\n\t\t\tthis.#setup(type);\r\n\t\t\t\r\n\t\t\tif (this.#autoHide) {\r\n\t\t\t\t// show bar border\r\n\t\t\t\t$(this.#bar).show();\r\n\t\t\t\tthis.#startAnimation();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t#setup(type) {\r\n\t\t\tthis.hide();\r\n\t\t\tthis.#decorate(type);\r\n\t\t\t\r\n\t\t\t$(this.#toast).show().animate({right: 0}, 750, 'swing');\r\n\t\t}\r\n\t\t\r\n\t\t#addListener() {\r\n\t\t\t$(this.#toast).on('mouseenter', () => { this.#stopAnimation(); });\r\n\t\t\t$(this.#toast).on('mouseleave', () => { this.#startAnimation(); });\r\n\t\t}\r\n\t\t\r\n\t\t#removeListener() {\r\n\t\t\t$(this.#toast).off('mouseenter, mouseleave');\r\n\t\t}\r\n\t\t\r\n\t\t#startAnimation() {\r\n\t\t\t$(this.#bar).css('width', '0');\r\n\t\t\t$(this.#bar).delay(750).animate({width: '100%'}, this.#delay * 1000, 'linear', () => {\r\n\t\t\t\t$(this.#toast).delay(2000).animate({'right': '-360px'}, 1000, 'swing');\r\n\t\t\t\tif (this.#callback != null) this.#callback();\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t#stopAnimation() { $(this.#bar).stop(); }\r\n\t\t\r\n\t\t#injectDOM() {\r\n\t\t\tif (this.#injected) return;\r\n\t\t\t\r\n\t\t\tlet dom = `\r\n                <div id=\"toast\" style=\"display: none; overflow: clip; position: fixed; right: -360px; bottom: 32px; min-width: 280px; max-width: 360px; font-size: 0.98em; line-height: 1.15em; box-shadow: 1px 1px 2px black; z-index: 100000; border-radius: 0.25rem 0 0 0.25rem;\">\r\n                    <div style=\"display: flex; padding: 16px; align-items: center;\">\r\n                        <span id=\"toast-icon\" style=\"user-select: none; margin-right: 12px; font-size: 24px;\">&#128073;</span>\r\n                        <span id=\"toast-msg\" style=\"line-height: 1.25;\">A sweet and delicious toast to eat!😎😉</span>\r\n                    </div>\r\n                    <div id=\"toast-pro-bar-guide\">\r\n                        <div id=\"toast-pro-bar\" style=\"display: none; width: 100%; height: 1px; margin: 0 0; padding: 2px; background-color: #0B5ED7;\"></div>                \r\n                    </div>\r\n                </div>\r\n            `;\r\n\t\t\t$('body').append(dom);\r\n\t\t\t\r\n\t\t\tthis.#toast = $(\"#toast\");\r\n\t\t\tthis.#icon = $(\"#toast-icon\");\r\n\t\t\tthis.#msg = $(\"#toast-msg\");\r\n\t\t\tthis.#guide = $(\"#toast-pro-bar-guide\");\r\n\t\t\tthis.#bar = $(\"#toast-pro-bar\");\r\n\t\t\t\r\n\t\t\tthis.#injected = true;\r\n\t\t}\r\n\t\t\r\n\t\t#decorate(type) {\r\n\t\t\t$(this.#msg).text(this.#toastMsg);\r\n\t\t\t\r\n\t\t\t// theme for different type of toast\r\n\t\t\tlet themeSettings = {\r\n\t\t\t\tsuccess :   { color : '#0f5132', bg : '#d1e7dd', guide : '#009A68', bar : '#52C400', icon : '&#9989;'},\r\n\t\t\t\tinfo    :   { color : '#084298', bg : '#CFF4FC', guide : '#0a95b1', bar : '#0DCAF0', icon : '&#128172;'},\r\n\t\t\t\twarning :   { color : '#664d03', bg : '#fff3cd', guide : '#937005', bar : '#FFCA2C', icon : '&#128721;'},\r\n\t\t\t\terror   :   { color : '#842029', bg : '#f8d7da', guide : '#7A1E27', bar : '#DB3948', icon : '&#9940;'}\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tlet theme;\r\n\t\t\tif (type === this.SUCCESS) theme = themeSettings.success;\r\n\t\t\telse if (type === this.WARNING) theme = themeSettings.warning;\r\n\t\t\telse if (type === this.ERROR) theme = themeSettings.error;\r\n\t\t\telse theme = themeSettings.info;\r\n\t\t\t\r\n\t\t\t$(this.#toast).css('color', theme.color);\r\n\t\t\t$(this.#toast).css('background-color', theme.bg);\r\n\t\t\t$(this.#icon).html(theme.icon);\r\n\t\t\t$(this.#guide).css('background-color', theme.guide);\r\n\t\t\t$(this.#bar).css('background-color', theme.bar);\r\n\t\t}\r\n\t\t\r\n\t\thide() { $(this.#toast).css('right', '-360px'); }\r\n\t\t\r\n\t}\r\n\t\r\n\twindow.JstToast = new JstToast();\r\n\t\r\n\twindow.JstToast.loadToast = (msg, type = window.JstToast.SUCCESS, autoHide = true, delay = 3) => {\r\n\t\tJstStorage.setCookie('toast_msg', msg);\r\n\t\tJstStorage.setCookie('toast_type', type);\r\n\t\tJstStorage.setCookie('toast_auto_hide', autoHide);\r\n\t\tJstStorage.setCookie('toast_delay', delay);\r\n\t};\r\n\t\r\n\tjst.run( () => {\r\n\t\t// let's see if we have any cookie message to show\r\n\t\tlet msg = JstStorage.cookieStr('toast_msg', '');\r\n\t\tif (msg.length === 0) return;\r\n\t\t\r\n\t\tlet type = JstStorage.cookieInt('toast_type', JstToast.INFO);\r\n\t\tlet autoHide = JstStorage.cookieBool('toast_auto_hide', true);\r\n\t\tlet delay = JstStorage.cookieInt('toast_delay', 3);\r\n\t\t\r\n\t\twindow.JstToast.show(type, msg, autoHide, null, delay);\r\n\t\tJstStorage.unsetCookie('toast_msg');\r\n\t\tJstStorage.unsetCookie('toast_type');\r\n\t\tJstStorage.unsetCookie('toast_auto_hide');\r\n\t\tJstStorage.unsetCookie('toast_delay');\r\n\t});\r\n\t\r\n})();","class Shomoy {\r\n\t\r\n\t#datetime;\r\n\t\r\n\t/**\r\n\t * Create a shomoy object.\r\n\t *\r\n\t * @param {number|string|Date|Shomoy} datetime The value can a valid value that JS accepts\r\n\t * for Date object. Moreover, another date or shomoy object can passed-in as value.\r\n\t * By default, it creates from the current datetime.\r\n\t * */\r\n\tconstructor(datetime = new Date()) {\r\n\t\tif (datetime instanceof Date) this.#datetime = new Date(datetime.toISOString());\r\n\t\telse if (datetime instanceof Shomoy) this.#datetime = new Date(datetime.iso());\r\n\t\telse if (jQuery.type(datetime) === 'string') this.#datetime =  new Date(datetime);\r\n\t\telse if (jQuery.type(datetime) === 'number') this.#datetime =  new Date(datetime);\r\n\t\telse new Error('Invalid time value was passed');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Using this method, the starting millisecond of the shomoy can be calculated.\r\n\t *\r\n\t * @return {number} the starting millisecond of the shomoy object.\r\n\t */\r\n\tshomoyStart() { return new Date(this.iso()).setHours(0, 0, 0, 0); }\r\n\t\r\n\t/**\r\n\t * Using this method, the ending millisecond of the shomoy can be calculated.\r\n\t *\r\n\t * @return {number} the ending milliseconds of the shomoy object.\r\n\t */\r\n\tshomoyEnd() { return this.shomoyStart() - 1 + Shomoy.msInDay(1); }\r\n\t\r\n\t/**\r\n\t * A shomoy object can compare itself with other shomoy object. Internally it\r\n\t * uses the valueOf() method of date object to calculate the difference in\r\n\t * timestamp and returns either 0, 1, or -1 based on the calculation.\r\n\t *\r\n\t * @param {Shomoy} shomoy The Shomoy object to calculate against\r\n\t *\r\n\t * @return {number} int the difference between two shomoy objects. Returns 0 if both\r\n\t * shomoy are equal, -1 if the comparing shomoy is bigger, otherwise 1.\r\n\t * */\r\n\tcompare (shomoy) {\r\n\t\tif (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\t\t\r\n\t\tlet shomoyA = this.datetime.valueOf();\r\n\t\tlet shomoyB = shomoy.dateTime.valueOf();\r\n\t\t\r\n\t\tif (shomoyA < shomoyB) return -1;\r\n\t\telse if (shomoyA > shomoyB) return 1;\r\n\t\telse return 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The difference between two shomoy objects can be calculated either in\r\n\t * milliseconds(which is default) or microseconds(timestamp) value. It always\r\n\t * finds the difference from $this object to passed one.\r\n\t *\r\n\t * @param {Shomoy} shomoy the Shomoy object to calculate the difference against\r\n\t * @param {boolean} inMilli indicates whether to calculate in milliseconds or microseconds\r\n\t * @return {number} the difference between two Shomoy objects.\r\n\t * */\r\n\tdiff(shomoy, inMilli = true) {\r\n\t\tif (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\t\t\r\n\t\tif (inMilli) return this.getMilliseconds() - shomoy.getMilliseconds();\r\n\t\telse return this.getTimestamp() - shomoy.getTimestamp();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Difference in hour with another shomoy object can be calculated. It internally\r\n\t * uses Shomoy.diff() method.\r\n\t *\r\n\t * @param {Shomoy} shomoy A shomoy to calculate against\r\n\t * @return {number} The difference from the passed-in shomoy\r\n\t * */\r\n\tdiffHour(shomoy) {\r\n\t\tif (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\t\tlet diff = this.diff(shomoy, false);\r\n\t\treturn diff / 3600;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Difference with another shomoy object can be calculated and returned as an array of components\r\n\t * of time in order: sec, min, hour, day.\r\n\t *\r\n\t * @param {Shomoy} shomoy The shomoy object to calculate against\r\n\t * @return {array} Containing time components\r\n\t * */\r\n\tdiffCompo(shomoy) {\r\n\t\tif (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\t\t\r\n\t\tlet time = this.diff(shomoy, false);\r\n\t\t\r\n\t\tlet secInDay = 60 * 60 * 24;\r\n\t\t\r\n\t\t// day\r\n\t\tlet day = time / secInDay;\r\n\t\tlet dayLeft = ~~day;\r\n\t\t\r\n\t\t// hour\r\n\t\tlet hour = (day % 1) * 24;\r\n\t\tlet hourLeft = ~~hour;\r\n\t\t\r\n\t\t// min\r\n\t\tlet min = (hour % 1) * 60;\r\n\t\tlet minLeft = ~~min;\r\n\t\t\r\n\t\t// sec\r\n\t\tlet secLeft = (min % 1) * 60;\r\n\t\t\r\n\t\t// fix the round up second problem\r\n\t\tif (Math.round(secLeft) === 60) {\r\n\t\t\tsecLeft = 0;\r\n\t\t\tminLeft += 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn [secLeft, minLeft, hourLeft, dayLeft];\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of milliseconds can be added to the Shomoy object using this method.\r\n\t * Negative value can be added too.\r\n\t *\r\n\t * @param {number} ms number of milliseconds to be added.\r\n\t * */\r\n\taddMs(ms) {\r\n\t\tms = this.datetime.getMilliseconds() + ms;\r\n\t\tthis.datetime.setMilliseconds(ms);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of seconds can be added to the Shomoy object using this method.\r\n\t * Negative value can be added too.\r\n\t *\r\n\t * @param {number} sec number of seconds to be added.\r\n\t * */\r\n\taddSec(sec) {\r\n\t\tsec = this.datetime.getSeconds() + sec;\r\n\t\tthis.datetime.setSeconds(sec);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of minutes can be added to the Shomoy object using this method.\r\n\t * Negative value can be added too.\r\n\t *\r\n\t * @param {number} min number of minutes to be added.\r\n\t * */\r\n\taddMin(min) {\r\n\t\tmin = this.datetime.getMinutes() + min;\r\n\t\tthis.datetime.setMinutes(min);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of hours can be added to the Shomoy object using this method.\r\n\t * It also takes negative hours which subtracts the hours from the shomoy,\r\n\t *\r\n\t * @param {number} hour number of hours to be added.\r\n\t * */\r\n\taddHour(hour) {\r\n\t\thour = this.datetime.getHours() + hour;\r\n\t\tthis.datetime.setHours(hour);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of days can be added to the Shomoy object using this method.\r\n\t * It also takes negative day which subtracts the days from the shomoy,\r\n\t *\r\n\t * @param {number} day number of days to be added.\r\n\t * */\r\n\taddDay(day) {\r\n\t\tday = this.datetime.getDate() + day;\r\n\t\tthis.datetime.setDate(day);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of months can be added to the Shomoy object using this method.\r\n\t * Negative value can be added too.\r\n\t *\r\n\t * @param {number} month number of months to be added.\r\n\t * */\r\n\taddMonth(month) {\r\n\t\tmonth = this.datetime.getMonth() + month;\r\n\t\tthis.datetime.setMonth(month);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Any number of years can be added to the Shomoy object using this method.\r\n\t * Negative value can be added too.\r\n\t *\r\n\t * @param {number} year number of years to be added.\r\n\t * */\r\n\taddYear(year) {\r\n\t\tyear = this.year() + year;\r\n\t\tthis.datetime.setFullYear(year);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tiso() { return `${this.year()}-${this.month()}-${this.date()} ${this.hour()}:${this.min()}:${this.sec()}`; }\r\n\t\r\n\ttoString() { return this.iso(); }\r\n\t\r\n\tisoDate () { return this.iso().slice(0, 10); }\r\n\t\r\n\tisoTime() { return `${this.hour()}:${this.min()}:${this.sec()}`; }\r\n\t\r\n\tgetMilliseconds () { return this.datetime.getTime(); }\r\n\t\r\n\tgetTimestamp () { return this.getMilliseconds() / 1000; }\r\n\t\r\n\tgetDate = () => this.#datetime.getDate();\r\n\t\r\n\tgetMonth = () => this.#datetime.getMonth();\r\n\t\r\n\tgetYear = () => this.#datetime.getFullYear();\r\n\t\r\n\tgetDay = () => this.#datetime.getDay();\r\n\t\r\n\tgetHours = () => this.#datetime.getHours();\r\n\t\r\n\tgetMinutes = () => this.#datetime.getMinutes();\r\n\t\r\n\tgetSeconds = () => this.#datetime.getSeconds();\r\n\t\r\n\tsetYear = (year) => {\r\n\t\tthis.#datetime.setYear(year);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tsetMonth = (month) => {\r\n\t\tthis.#datetime.setMonth(month);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tsetDate = (date) => {\r\n\t\tthis.#datetime.setDate(date);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tsetHour = (hour) => {\r\n\t\tthis.#datetime.setHours(hour);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tsetMin = (min) => {\r\n\t\tthis.#datetime.setMinutes(min);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tsetSec = (sec) => {\r\n\t\tthis.#datetime.setSeconds(sec);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tsetMilli = (milli) => {\r\n\t\tthis.#datetime.setMilliseconds(milli);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tvalueOf = () => this.#datetime.valueOf();\r\n\t\r\n\thour (twenty_four = true, lead0 = true) {\r\n\t\tlet hour = this.datetime.getHours();\r\n\t\tif (!twenty_four) {\r\n\t\t\thour = hour % 12;\r\n\t\t\thour = hour === 0 ? 12 : hour;\r\n\t\t}\r\n\t\treturn lead0 ? JstNum.lead0(hour) : hour;\r\n\t}\r\n\t\r\n\tmin (lead0 = true) {\r\n\t\tlet min = this.datetime.getMinutes();\r\n\t\treturn lead0 ? JstNum.lead0(min) : min;\r\n\t}\r\n\t\r\n\tsec (lead0 = true) {\r\n\t\tlet sec = this.datetime.getSeconds();\r\n\t\treturn lead0 ? JstNum.lead0(sec) : sec;\r\n\t}\r\n\t\r\n\tyear () { return this.datetime.getFullYear(); }\r\n\t\r\n\tmonth (lead0 = true) {\r\n\t\tlet month = this.datetime.getMonth() + 1;\r\n\t\treturn lead0 ? JstNum.lead0(month) : month;\r\n\t}\r\n\t\r\n\tdate (lead0 = true) {\r\n\t\tlet date = this.datetime.getDate();\r\n\t\treturn lead0 ? JstNum.lead0(date) : date;\r\n\t}\r\n\t\r\n\tday(short = true) {\r\n\t\tlet days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\t\tlet day = days[this.datetime.getDay()];\r\n\t\treturn short ? day.slice(0, 3) : day;\r\n\t}\r\n\t\r\n\tmonthStr(short = true) {\r\n\t\tlet months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\t\tlet month = months[this.month() - 1];\r\n\t\treturn short ? month.slice(0, 3) : month;\r\n\t}\r\n\t\r\n\tampm(uppercase = true) {\r\n\t\tlet hour = this.datetime.getHours() + 1;\r\n\t\tif (hour >= 12 && hour <= 23) {\r\n\t\t\treturn uppercase ? 'PM' : 'pm';\r\n\t\t} else { return uppercase ? 'AM' : 'am'; }\r\n\t}\r\n\t\r\n\tstrTime24(sec = true) {\r\n\t\tif (sec) return `${this.hour()}:${this.min()}:${this.sec()}`;\r\n\t\telse return `${this.hour()}:${this.min()}`;\r\n\t}\r\n\t\r\n\tstrTime(sec = true, ampm = true, uppercase = true) {\r\n\t\tif (sec) {\r\n\t\t\tif (ampm)\r\n\t\t\t\treturn `${this.hour(false)}:${this.min()}:${this.sec()} ${this.ampm(uppercase)}`;\r\n\t\t\telse\r\n\t\t\t\treturn `${this.hour(false)}:${this.min()}:${this.sec()}`;\r\n\t\t} else {\r\n\t\t\tif (ampm)\r\n\t\t\t\treturn `${this.hour(false)}:${this.min()} ${this.ampm(uppercase)}`;\r\n\t\t\telse\r\n\t\t\t\treturn `${this.hour(false)}:${this.min()}`;\r\n\t\t}\r\n\t}\r\n\t\r\n\tstrDate(separated = false) {\r\n\t\tif (separated) return `${this.date()}-${this.month()}-${this.year()}`;\r\n\t\telse return `${this.date()} ${this.monthStr(true)}, ${this.year()}`;\r\n\t}\r\n\t\r\n\tstrDateTime() {\r\n\t\treturn `${this.date()} ${this.monthStr()} ${this.year()}, ${this.hour()}:${this.min()}`;\r\n\t}\r\n\t\r\n\tget datetime () { return this.#datetime; }\r\n\t\r\n\tstatic isoNow = () => { return new Shomoy().iso(); };\r\n\t\r\n\tstatic secInMin(of) { return 60 * of; }\r\n\t\r\n\tstatic secInHour(of) { return 60 * 60 * of; }\r\n\t\r\n\tstatic secInDay(of) { return 60 * 60 * 24 * of; }\r\n\t\r\n\tstatic msInDay(of) { return 1000 * 60 * 60 * 24 * of; }\r\n\t\r\n\tstatic isoDate() { return new Shomoy().isoDate(); }\r\n\t\r\n\tstatic isoTime() { return new Shomoy().isoTime(); }\r\n\t\r\n\tstatic clone(shomoy) {\r\n\t\tif (!shomoy instanceof Shomoy) throw new Error('Argument must be instance of Shomoy.');\r\n\t\treturn new Shomoy(shomoy);\r\n\t}\r\n\t\r\n\t/**\r\n\t * For a specified month and year, it returns Date for the first of day of the month.\r\n\t * <b>Month is not zero based. January is at 1.</b> If no month & year specified, it\r\n\t * returns for the current month.\r\n\t *\r\n\t * @param {number} month Month\r\n\t * @param {number} year Year\r\n\t * @return {Date} Date object for the first of the month as specified\r\n\t * */\r\n\tstatic firstDayOfMonth(month, year) {\r\n\t\tlet now = new Shomoy();\r\n\t\t\r\n\t\tif (!Number.isSafeInteger(year)) year = now.getYear();\r\n\t\tmonth = !Number.isSafeInteger(month) ? now.getMonth() : month-1;\r\n\t\t\r\n\t\tnow.setYear(year).setMonth(month).setDate(1).setHour(0).setMin(0).setSec(0).setMilli(0);\r\n\t\treturn now.datetime;\r\n\t}\r\n\t\r\n\t/**\r\n\t * For a specified month and year, it returns Date for the last of day of the month.\r\n\t * <b>Month is not zero based. January is at 1.</b> If no month & year specified, it\r\n\t * returns for the current month.\r\n\t *\r\n\t * @param {number} month Month\r\n\t * @param {number} year Year\r\n\t * @return {Date} Date object for the last of the month as specified\r\n\t * */\r\n\tstatic lastDayOfMonth(month, year) {\r\n\t\tlet shomoy = new Shomoy();\r\n\t\t\r\n\t\tif (!Number.isSafeInteger(year)) year = shomoy.getYear();\r\n\t\tmonth = !Number.isSafeInteger(month) ? shomoy.getMonth() : month-1;\r\n\t\t\r\n\t\tshomoy.setYear(year).setMonth(month+1).setDate(0).setHour(0).setMin(0).setSec(0).setMilli(0);\r\n\t\treturn shomoy.datetime;\r\n\t}\r\n\t\r\n\t/**\r\n\t * For a time range, specified by month & year pair in two arrays (since & to), it calculates\r\n\t * start & end times in Shomoy for each week found within the range specified.\r\n\t *\r\n\t * End range it not inclusive.\r\n\t *\r\n\t * For each week, it composes objects containing array of time range. Both key & value can be\r\n\t * derived using decorator functions. Decorator functions take on from and to shomoy objects\r\n\t * in order. <b>End range is not inclusive.</b>\r\n\t *\r\n\t * If no range is specified, then the current month & year is calculated only.\r\n\t *\r\n\t * Months are not zero. January is always 1 in this case. The week start from Monday.\r\n\t *\r\n\t * @param {Array} since Containing the month and year in order.\r\n\t * @param {Array} to Containing the month and year in order.\r\n\t * @param {function(Shomoy, Shomoy)} keyDecFn Decorator function for keys.\r\n\t * @param {function(Shomoy, Shomoy)} valDecFn Decorator function for values.\r\n\t * @return {Array} Containing objects of time range values under keys as specified by decorator functions.\r\n\t * */\r\n\tstatic listWeek(since = [], to = [], keyDecFn = null, valDecFn = null) {\r\n\t\tconst WEEK_START = 1;\r\n\t\t\r\n\t\tlet valDecorator = valDecFn || Shomoy.#valDecorator;\r\n\t\tlet keyDecorator = keyDecFn || Shomoy.#weekKeyDecorator;\r\n\t\t\r\n\t\tlet weeks = [];\r\n\t\t\r\n\t\t// get the limit parameters\r\n\t\tlet now = new Date();\r\n\t\t\r\n\t\tlet monthTo = Number.isSafeInteger(to[0]) ? (to[0] - 1) : (now.getMonth() + 1) ;\r\n\t\tlet yearTo = to[1] || now.getFullYear();\r\n\t\t\r\n\t\tlet monthFrom = Number.isSafeInteger(since[0]) ? (since[0] - 1) : now.getMonth();\r\n\t\tlet yearFrom = since[1] || now.getFullYear();\r\n\t\t\r\n\t\t// build up shomoy objects for getting start and end limit\r\n\t\tlet end = new Shomoy(Shomoy.firstDayOfMonth(monthTo, yearTo)).addSec(-1).valueOf();\r\n\t\t\r\n\t\t// construct a shomoy with given month and year\r\n\t\tlet shomoy  = new Shomoy(Shomoy.firstDayOfMonth(monthFrom, yearFrom));\r\n\t\t\r\n\t\t// start with the 'from' month, where we may find broken week and discard that week\r\n\t\tlet momStartDay = shomoy.getDay();\r\n\t\tif (momStartDay !== WEEK_START) {\r\n\t\t\t// find out how far the next week start day is\r\n\t\t\t// if it is sunday(0) which is one day to monday.\r\n\t\t\tlet daysTo = (momStartDay === 0) ? 1 : 8 - momStartDay;\r\n\t\t\tshomoy.addDay(daysTo);\r\n\t\t}\r\n\t\t\r\n\t\tlet makeStop = false;\r\n\t\t\r\n\t\twhile (true) {\r\n\t\t\tif (makeStop) break;\r\n\t\t\t\r\n\t\t\tlet currentMilli = shomoy.valueOf();\r\n\t\t\t\r\n\t\t\t// are we exceeding the limit?\r\n\t\t\tif (currentMilli >= end) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet to = Shomoy.clone(shomoy);\r\n\t\t\tto.addDay(7).addSec(-1);\r\n\t\t\t\r\n\t\t\tlet obj = {};\r\n\t\t\tlet key1 = keyDecorator(shomoy, to);\r\n\t\t\tobj[key1] = valDecorator(shomoy, to);\r\n\t\t\tweeks.push(obj);\r\n\t\t\t\r\n\t\t\tshomoy.addDay(7);\r\n\t\t}\r\n\t\t\r\n\t\treturn weeks;\r\n\t}\r\n\t\r\n\t/**\r\n\t * For a time range, specified by month & year pair in two arrays (since & to), it calculates\r\n\t * start & end times in Shomoy for each month found within the range specified. <b>End range\r\n\t * is not inclusive.</b>\r\n\t *\r\n\t * If no range is specified, then the current month & year is calculated only.\r\n\t *\r\n\t * For each month, it composes objects containing array of time range. Both key & value can be\r\n\t * derived using decorator functions. Decorator functions take on from and to shomoy objects\r\n\t * in order.\r\n\t *\r\n\t * Months are not zero. January is always 1 in this case. The week start from Monday.\r\n\t *\r\n\t * @param {Array} since Containing the month and year in order.\r\n\t * @param {Array} to Containing the month and year in order.\r\n\t * @param {function(Shomoy)} keyDecFn Decorator function for keys.\r\n\t * @param {function(Shomoy, Shomoy)} valDecFn Decorator function for values.\r\n\t * @return {Array} Containing objects of time range values under keys as specified by decorator functions.\r\n\t * */\r\n\tstatic listMonth(since = [], to = [], keyDecFn = null, valDecFn = null) {\r\n\t\t\r\n\t\t// get the limit parameters\r\n\t\tlet now = new Date();\r\n\t\t\r\n\t\tlet monthFrom = Number.isSafeInteger(since[0]) ? (since[0] - 1) : now.getMonth();\r\n\t\tlet yearFrom = since[1] || now.getFullYear();\r\n\t\t\r\n\t\tlet monthTo = Number.isSafeInteger(to[0]) ? (to[0] - 1) : (now.getMonth()) ;\r\n\t\tlet yearTo = to[1] || now.getFullYear();\r\n\t\t\r\n\t\tlet end = new Shomoy(Shomoy.lastDayOfMonth(monthTo, yearTo)).addHour(24).addSec(-1).valueOf();\r\n\t\t\r\n\t\tlet shomoy = new Shomoy();\r\n\t\tshomoy.setMonth(monthFrom);\r\n\t\tshomoy.setYear(yearFrom);\r\n\t\t\r\n\t\tlet valDecorator = valDecFn || Shomoy.#valDecorator;\r\n\t\tlet keyDecorator = keyDecFn || Shomoy.#dayKeyDecorator;\r\n\t\tlet result = [];\r\n\t\t\r\n\t\twhile(true) {\r\n\t\t\tlet shoA = new Shomoy(Shomoy.firstDayOfMonth(shomoy.getMonth(), shomoy.getYear()));\r\n\t\t\tlet shoB = new Shomoy(Shomoy.lastDayOfMonth(shomoy.getMonth(), shomoy.getYear())).addHour(24).addSec(-1);\r\n\t\t\tshoA.valueOf();\r\n\t\t\tlet b = shoB.valueOf();\r\n\t\t\tif (b > end) break;\r\n\t\t\t\r\n\t\t\tlet obj = {};\r\n\t\t\tobj[keyDecorator(shomoy)] = valDecorator(shoA, shoB);\r\n\t\t\tresult.push(obj);\r\n\t\t\t\r\n\t\t\t// keep going until break\r\n\t\t\tshomoy.addMonth(1);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method adds given seconds, minutes, hours and day as seconds to current time. When no\r\n\t * argument is set, then it returns current in milliseconds. All the argument's value will be\r\n\t * converted into seconds before they get added to the current time in second except the sec\r\n\t * argument.\r\n\t *\r\n\t * All the arguments values have to be of type number. If not, then an exception is thrown.\r\n\t *\r\n\t * This method can come in handy in situations like setting cookie value with expiration,\r\n\t * calculating future date time etc.\r\n\t *\r\n\t * @param {number} sec Number of seconds is to be added to the current time in second.\r\n\t * @param {number} min Number of minutes is to be added to the current time in second.\r\n\t * @param {number} hour Number of hours is to be added to the current time in second.\r\n\t * @param {number} day Number of days is to be added to the current time in second.\r\n\t *\r\n\t * @return {number} Seconds added to the current time as defined by the arguments.\r\n\t *\r\n\t * @throws {Error} If all the arguments are not of type integer\r\n\t * */\r\n\taddToNow(sec = 0, min = 0, hour = 0, day = 0) {\r\n\t\tif (Number.isNaN(day) || Number.isNaN(hour) || Number.isNaN(min) || Number.isNaN(sec))\r\n\t\t\tthrow new Error('Make sure day, hour and minute are of type number.');\r\n\t\t\r\n\t\tlet now = new Date().valueOf();\r\n\t\t\r\n\t\tif (sec !== 0) now += sec;\r\n\t\tif (min !== 0) now += min * 60;\r\n\t\tif (hour !== 0) now += hour * 60 * 60;\r\n\t\tif (day !== 0) now += day * 24 * 60 * 60;\r\n\t\t\r\n\t\treturn now;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Default value decorator\r\n\t *\r\n\t * @param {Shomoy} from\r\n\t * @param {Shomoy} to\r\n\t * */\r\n\tstatic #valDecorator(from, to) {\r\n\t\tlet start = from.getTimestamp();\r\n\t\tlet end = to.getTimestamp();\r\n\t\treturn [start, end];\r\n\t};\r\n\t\r\n\t/**\r\n\t * Default week key decorator\r\n\t *\r\n\t * @param {Shomoy} from\r\n\t * @param {Shomoy} to\r\n\t * */\r\n\tstatic #weekKeyDecorator(from, to) {\r\n\t\tlet month = from.getMonth() !== to.getMonth() ? `${from.monthStr()}-${to.monthStr()}` : `${from.monthStr()}`;\r\n\t\tlet year = from.getYear() !== to.getYear() ? `${from.year()}-${to.year()}` : `${from.year()}`;\r\n\t\treturn `${from.date()}-${to.date()} ${month}, ${year}`;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Default day key decorator\r\n\t *\r\n\t * @param {Shomoy} month\r\n\t * */\r\n\tstatic #dayKeyDecorator(month) {\r\n\t\treturn `${month.monthStr()} ${month.year()}`;\r\n\t};\r\n\t\r\n}\r\n"]}