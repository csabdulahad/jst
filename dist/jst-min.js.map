{"version":3,"sources":["ActiveNav.js","Biscuit.js","Blogger.js","Connect.js","Dialog.js","FormInspector.js","Icon.js","jst.js","Modal.js","Num.js","OverlayManager.js","OverlayScrollbars.js","Shomoy.js","SimPro.js","Toast.js"],"names":["ActiveNav","SLIDE","FADE","TOGGLE","#navId","#wrapperCls","#decorCallback","#navCatHook","#activeCat","#speed","#anim","#arrowDown","#arrowUp","constructor","navId","this","let","actEle","$","children","find","removeClass","obj","actDom","addClass","directChild","#animate","wrapper","parent","closest","wrapperCatEle","is","each","index","ele","length","first","click","html","motion","wrapperDiv","arrow","icon","fadeIn","fadeOut","show","hide","slideDown","slideUp","#updateArrow","lastDown","lastUp","iconDom","content","arrowDown","lastVal","arrowUp","animFn","type","animSpeed","speed","decorCallback","callback","navCatHook","href","pathName","URL","document","location","dom","a","jst","isUndef","Biscuit","set","key","value","expDay","d","Date","expires","setTime","getTime","toUTCString","cookie","unset","getBool","defaultValue","getStr","getInt","parseInt","getFloat","parseFloat","name","ca","decodeURIComponent","split","i","c","charAt","substring","indexOf","Blogger","youtube","#action","bold","event","preventDefault","sel","#selection","#editor","focus","start","middle","end","selection","selectionEnd","posStart","#parsePreview","italic","code","heading","list","divider","link","image","quote","buffer","str","log","forEach","v","#toolbar","#preview","editor","toolbar","preview","marked","Error","hljs","#setupMarked","getElementById","#addToolbar","#toolbarHook","addEventListener","ctrl","e","ctrlKey","toLowerCase","#addTab","#youtubeThumbnail","innerHTML","parse","txt","#youtubeTag","lineNumbers","highlightAll","initLineNumbersOnLoad","output","selectionStart","slice","setOptions","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","use","renderer","highlightAuto","extensionFn","#ytRenderer","id","extensions","decFn","level","src","match","tokenizer","exec","token","raw","text","trim","tokens","lexer","inline","parser","parseInline","k","markdown","Connect","#url","#xHttp","#state","#status","#statusText","#headers","#queryParam","#dataSource","_raw_data","#response","#callbackAny","#callbackOk","#callbackErr","#timeout","#unresolvedHost","#unknownError","#preRedirect","#postRun","#preRun","#anyPath","#successPath","#errorPath","#insDirAny","#insDirOk","#insDirErr","#noToast","#toastOnAny","#autoHideToast","#toastOnSuccess","#toastOnError","#delay","#hati","#hatiMsg","#hatiStatus","#hatiLevel","HATI_STATUS_SUCCESS","HATI_STATUS_INFO","HATI_STATUS_WARNING","HATI_STATUS_ERROR","HATI_STATUS_UNKNOWN","HATI_LVL_SYSTEM","HATI_LVL_USER","HATI_LVL_UNKNOWN","STATE_REQ_NOT_INITIALIZED","STATE_SERVER_CONNECTION_ESTABLISHED","STATE_REQ_RECEIVED","STATE_REQ_PROCESSING","STATE_REQ_FINISH_AND_READY","STATUS_OK","STATUS_FORBIDDEN","STATUS_PAGE_NOT_FOUND","STATUS_REQ_TIMEOUT","#contentType","form","json","XMLHttpRequest","onreadystatechange","readyState","status","statusText","#callbackMediator","responseText","response","JSON","undefined","console","warn","error","#resetHati","message","#invokeCallback","#resetConnection","success","#invokeRedirect","#showToast","Toast","#directAfterToast","redirect","#direct","path","#removeExtraSign","url","endsWith","#prepareUrl","Object","entries","#setHeaders","setRequestHeader","String","stickyToast","noToast","toastSuccess","toastError","toastTime","time","direct","instant","directSuccess","directError","onAny","onOk","onErr","preRun","postRun","preRedirect","onTimeout","onUnresolvedHost","onUnknownError","withHati","get","sendAs","owns","header","open","send","post","data","stringify","parameterize","to","startsWith","serializeArray","keys","queryParam","conStatus","conStatusTxt","msg","responseRaw","serverReplied","hatiResponse","string","window","Dialog","#id","#selfId","#dismissed","#hidden","#cancelable","#dark","#close","#title","#msg","#dialog","#msgEle","#titleEle","#btnYes","#btnNo","#btnAck","#callbackYes","#callbackNo","#callbackAck","#callbackHide","#callbackDismiss","#callbackRevived","run","#injectDOM","#checkIfDismissed","dialog","buttons","prepend","getChildOf","getChildrenOf","#prepare","width","height","padding","dialogFlexChild","cntWrapper","css","overlayScrollbar","#applyTheme","OverlayManager","theme","switchCls","#setCloseIconListener","on","dismiss","#setBtnListener","#dispatchBtnEvent","result","#updateCloseIcon","closeIcon","#updateTitle","title","yes","no","acknowledge","onHide","onDismiss","onEscapeEvent","onRevived","#show","option","w","h","pad","cancelable","acquire","notReady","runLater","makeVisible","release","remove","notCancelable","dark","light","setMsg","setTitle","makeDark","makeLight","makeCancelable","makeNotCancelable","hideChoice","choice","btn","showChoice","FormInspector","SAN_A","SAN_N","SAN_AN","SAN_AS","SAN_AC","SAN_AD","SAN_ANS","SAN_ASC","SAN_AND","SAN_ANSC","SAN_ANSD","SAN_ANSCD","SAN_ISO_DATE","SAN_ISO_TIME","#form","#eleArr","#inline","#iconOk","#iconErr","#colorOk","#colorErr","#noMsg","#noIcon","#animateErr","#errAnimation","animate","opacity","#canSubmit","#getEleName","replaceAll","capitalize","#getValue","attr","val","eleId","submit","evt","addRule","rules","Array","isArray","rule","#addListener","push","nodeName","prop","eleType","#decorateBlurEvent","#filter","change","keyup","firstBlur","filterType","inputType","ok","#showMsg","#email","#str","#int","#float","#pattern","fn","isStr","test","#checkLen","#checkInOption","replace","Number","isSafeInteger","#checkRange","pattern","color","haveNextEle","next","hasClass","havePositionedEle","nextEle","msgEle","after","spans","iconSpan","msgSpan","missing","erase","min","minLen","max","maxLen","inOption","opValue","off","validate","noIcon","noMsg","iconOk","iconErr","noErrAnim","errAnim","errColor","okColor","Icon","#iconPool","#getUId","original","#getObj","#apply","animType","anim_type","pulse","spin","still","restore","removeAttr","valueOf","delay","f","setTimeout","isDef","isDomEle","space","onMissId","random","b","Math","floor","jqueryuiISO","datepicker","dateFormat","sleep","sec","selector","searchParams","uniqueId","now","toString","condition","cls","updateProperties","err","info","defineProperty","prototype","item","writable","configurable","splice","hasOwnProperty","lower","toUpperCase","OverlayScrollbars","scrollbars","clickScrolling","dragScrolling","autoHide","autoHideDelay","cssLink","createElement","rel","head","appendChild","Modal","#dismissCallback","#hideCallback","#revivedCallback","#padding","#modal","#adjustModalSize","#setCloseIconCallback","modalFlex","contents","wrapAll","modalFlexChild","modalContent","shown","hidden","dismissed","Num","MONEY_BD","MONEY_GBP","MONEY_USD","format","input","money","lead0","place","num","symbol","isNaN","integer","negative","abs","toFixed","moneyToNum","sign","number","#clientList","#ready","#overlay","len","#cLen","keyboard","target","adjust","#update","client","lastIndex","ready","clientList","getPopup","clients","dismissPopup","popup","global","factory","define","amd","module","exports","jsCache","cssCache","cssPrefixes","jsPrefixes","TYPES","o","s","n","u","z","LEXICON","l","p","ti","oH","cH","sH","oW","cW","sW","hOP","bCR","VENDORS","_cssPrefixes","_jsPrefixes","_cssProperty","resultPossibilities","currVendorWithoutDashes","uppercasedName","firstLetterToUpper","elmStyle","_cssPropertyValue","property","values","suffix","dummyStyle","possbleValues","preparedSuffix","cssText","_jsAPI","isInterface","fallback","COMPATIBILITY","wW","bind","windowSize","wH","mO","rO","rAF","func","cAF","clearTimeout","stpP","stopPropagation","cancelBubble","prvD","returnValue","page","touch","eventDoc","originalEvent","srcElement","ownerDocument","doc","documentElement","body","touches","x","y","scrollLeft","clientLeft","scrollTop","clientTop","mBtn","button","which","inA","arr","isA","def","call","innerWidth","innerHeight","thisObj","fNOP","fBound","apply","aArgs","concat","proto","arguments","_easingsMath","_rnothtmlwhite","_strSpace","_strScrollLeft","_strScrollTop","_animations","_type","_cssNumber","MATH","JQUERY","jQuery","EASING","PI","cos","sin","pow","t","sqrt","asin","swing","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","FRAMEWORK","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","lineHeight","order","orphans","widows","zIndex","zoom","FakejQuery","eventName","handler","el","eventNameLength","detachEvent","attachEvent","removeEventListener","one","oneEventName","oneHandler","trigger","createEvent","initEvent","dispatchEvent","fireEvent","append","child","insertAdjacentElement","before","parentNode","removeChild","unwrap","parents","inArray","firstChild","insertBefore","wrapperHTML","nodes","deepest","previousSibling","childNodes","nextSibling","wrapInner","wrap","styles","cptStyle","getCptStyle","getComputedStyle","currentStyle","getPropertyValue","setCSSVal","className","elem","classList","classNamePrepared","contains","nodeType","stripAndCollapse","classes","cur","clazz","finalValue","supportClassList","elmClassList","add","curValue","display","attrName","getAttribute","setAttribute","removeAttribute","offset","rect","pageXOffset","pageYOffset","top","left","position","offsetTop","offsetLeft","eq","last","ch","querySelectorAll","matches","elementIsVisible","childs","props","duration","easing","complete","stop","clearQ","jump","animObj","qObj","jumpToEnd","q","frame","setAnimationValue","startNextAnimationInQ","extend","isEmptyObject","isPlainObject","copyIsArray","copy","options","clone","deep","fromIndex","isFunction","hasOwnConstructor","hasIsPrototypeOf","isArrayLike","join","nodeList","strategy","insertAdjacentHTML","removeFromQ","nextAnim","guaranteedNext","progress","step","hasOptions","from","specialEasing","timeNow","percent","fromVal","toVal","easedVal","timeStart","elapsed","qPos","pos","speacialEasing","startTime","getClientRects","elms","base","elements","self","_targets","_instancePropertyString","_plugin","_pluginsGlobals","_pluginsAutoUpdateLoop","possibleTemplateTypes","classNameAllowedValues","numberAllowedValues","booleanNullAllowedValues","booleanTrueTemplate","booleanFalseTemplate","callbackTemplate","overflowBehaviorAllowedValues","optionsDefaultsAndTemplate","_pluginsExtensions","_pluginsOptions","INSTANCES","instance","argLen","PLUGIN","resize","sizeAutoCapable","clipAlways","normalizeRTL","paddingAbsolute","autoUpdate","autoUpdateInterval","updateOnLoad","nativeScrollbarsOverlaid","showNativeScrollbars","initialize","overflowBehavior","visibility","touchSupport","snapHandle","textarea","dynWidth","dynHeight","inheritedAttrs","callbacks","onInitialized","onInitializationWithdrawn","onDestroyed","onScrollStart","onScroll","onScrollStop","onOverflowChanged","onOverflowAmountChanged","onDirectionChanged","onContentSizeChanged","onHostSizeChanged","onUpdated","_defaults","convert","_template","_validate","template","writeErrors","diffObj","checkObjectProps","diffData","validatedOptions","validatedOptionsPrepared","prevPropName","restrictedStringValuesSplit","restrictedStringValuesPossibilitiesSplit","isRestrictedValue","mainPossibility","currType","j","isValid","templateValue","templateIsComplex","templateTypes","dataDiffValue","dataValue","dataValueType","propPrefix","errorPossibleTypes","errorRestrictedStrings","isEmptyObj","isDiff","objectCopy","_default","_prepared","pluginTargetElements","optsIsPlainObj","inst","initOverlayScrollbarsStatics","OverlayScrollbarsInstance","valid","globals","defaultOptions","newDefaultOptions","currDefaultOptions","osInstance","getState","destroyed","extension","extensionName","extNameTypeString","extensionFactory","recursive","valType","OverlayScrollbarsGlobals","OverlayScrollbarsAutoUpdateLoop","edge","dummyContainerOffset","dummyContainerChildOffset","dummyContainerChildOffsetAfterScroll","scrollSize","scrollSize2","windowWidth","windowHeight","windowDpr","_base","strOverflow","bodyElement","scrollbarDummyElement","scrollbarDummyElement0","dummyContainerChild","nativeScrollbarSize","calcNativeScrollbarSize","nativeScrollbarIsOverlaid","msie","ua","navigator","userAgent","strSubString","strIndexOf","trident","rv","parseIntFunc","getWindowDPR","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","measureElement","autoUpdateLoop","autoUpdateRecommended","nativeScrollbarStyling","ex","overlayScrollbarDummySize","cssCalc","restrictedMeasuring","rtlScrollBehavior","overflow-y","overflow-x","direction","supportTransform","supportTransition","supportPassiveEvents","supportsPassive","supportResizeObserver","supportMutationObserver","newW","newH","newDPR","difference","dprChanged","oldScrollbarSize","newScrollbarSize","deltaH","deltaW","deltaWRatio","round","deltaHRatio","absDeltaW","absDeltaH","absDeltaWRatio","absDeltaHRatio","deltaIsBigger","valOne","valTwo","absValOne","absValTwo","update","_loopID","_inArray","_getNow","_strAutoUpdate","_strAutoUpdateInterval","_strLength","_loopingInstances","_loopingInstancesIntervalCache","_loopIsActive","_loopIntervalDefault","_loopInterval","_loopTimeOld","loop","instanceAutoUpdateAllowed","instanceAutoUpdateInterval","timeNew","timeDelta","lowestInterval","instanceOptions","pluginTargetElement","_nativeScrollbarIsOverlaid","_overlayScrollbarDummySize","_rtlScrollBehavior","_autoUpdateRecommended","_msieVersion","_nativeScrollbarStyling","_cssCalc","_nativeScrollbarSize","_supportTransition","_supportTransform","_supportPassiveEvents","_supportResizeObserver","_supportMutationObserver","_initialized","_destroyed","_isTextarea","_isBody","_documentMixed","_domExists","_isBorderBox","_sizeAutoObserverAdded","_paddingX","_paddingY","_borderX","_borderY","_marginX","_marginY","_isRTL","_sleeping","_contentBorderSize","_scrollHorizontalInfo","_scrollVerticalInfo","_viewportSize","_nativeScrollbarMinSize","_strMinusHidden","_strMarginMinus","_strPaddingMinus","_strBorderMinus","_strTop","_strRight","_strBottom","_strLeft","_strMinMinus","_strMaxMinus","_strWidth","_strHeight","_strFloat","_strEmpty","_strAuto","_strSync","_strScroll","_strHundredPercent","_strX","_strY","_strDot","_strScrollbar","_strMinusHorizontal","_strMinusVertical","_strMouseTouchDownEvent","_strMouseTouchUpEvent","_strMouseTouchMoveEvent","_strMouseEnter","_strMouseLeave","_strKeyDownEvent","_strKeyUpEvent","_strSelectStartEvent","_strTransitionEndEvent","_strResizeObserverProperty","_classNameHTMLElement","_classNameHostElement","_classNameHostElementForeign","_classNameHostTextareaElement","_classNameHostScrollbarHorizontalHidden","_classNameHostScrollbarVerticalHidden","_classNameHostTransition","_classNameHostRTL","_classNameHostResizeDisabled","_classNameHostScrolling","_classNameHostOverflow","_classNameHostOverflowX","_classNameHostOverflowY","_classNameTextareaElement","_classNamePaddingElement","_classNameViewportElement","_classNameViewportNativeScrollbarsInvisible","_classNameViewportNativeScrollbarsOverlaid","_classNameContentElement","_classNameContentArrangeElement","_classNameContentGlueElement","_classNameSizeAutoObserverElement","_classNameResizeObserverElement","_classNameResizeObserverItemElement","_classNameResizeObserverItemFinalElement","_classNameTextInherit","_classNameScrollbar","_classNameScrollbarTrack","_classNameScrollbarTrackOff","_classNameScrollbarHandle","_classNameScrollbarHandleOff","_classNameScrollbarUnusable","_classNameScrollbarAutoHidden","_classNameScrollbarCorner","_classNameScrollbarCornerResize","_classNameScrollbarCornerResizeB","_classNameScrollbarCornerResizeH","_classNameScrollbarCornerResizeV","_classNameScrollbarHorizontal","_classNameScrollbarVertical","_classNameDragging","_classNameThemeNone","_classNamesDynamicDestroy","_callbacksInitQeueue","_viewportAttrsFromTarget","_currentOptions","_currentPreparedOptions","_extensions","_lastUpdateTime","_swallowedUpdateHints","_swallowedUpdateTimeout","_swallowUpdateLag","_updateOnLoadEventName","_updateOnLoadElms","_windowElement","_documentElement","_htmlElement","_bodyElement","_targetElement","_hostElement","_sizeAutoObserverElement","_sizeObserverElement","_paddingElement","_viewportElement","_contentElement","_contentArrangeElement","_contentGlueElement","_textareaCoverElement","_scrollbarCornerElement","_scrollbarHorizontalElement","_scrollbarHorizontalTrackElement","_scrollbarHorizontalHandleElement","_scrollbarVerticalElement","_scrollbarVerticalTrackElement","_scrollbarVerticalHandleElement","_windowElementNative","_documentElementNative","_targetElementNative","_hostElementNative","_sizeAutoObserverElementNative","_sizeObserverElementNative","_paddingElementNative","_viewportElementNative","_contentElementNative","_hostSizeCache","_contentScrollSizeCache","_arrangeContentSizeCache","_hasOverflowCache","_hideOverflowCache","_widthAutoCache","_heightAutoCache","_cssBoxSizingCache","_cssPaddingCache","_cssBorderCache","_cssMarginCache","_cssDirectionCache","_cssDirectionDetectedCache","_paddingAbsoluteCache","_clipAlwaysCache","_contentGlueSizeCache","_overflowBehaviorCache","_overflowAmountCache","_ignoreOverlayScrollbarHidingCache","_autoUpdateCache","_sizeAutoCapableCache","_contentElementScrollSizeChangeDetectedCache","_hostElementSizeChangeDetectedCache","_scrollbarsVisibilityCache","_scrollbarsAutoHideCache","_scrollbarsClickScrollingCache","_scrollbarsDragScrollingCache","_resizeCache","_normalizeRTLCache","_classNameCache","_oldClassName","_textareaAutoWrappingCache","_textareaInfoCache","_textareaSizeCache","_textareaDynHeightCache","_textareaDynWidthCache","_bodyMinSizeCache","_updateAutoCache","_mutationObserverHost","_mutationObserverContent","_mutationObserverHostCallback","_mutationObserverContentCallback","_mutationObserversConnected","_mutationObserverAttrsTextarea","_mutationObserverAttrsHost","_destroyEvents","_textareaHasFocus","_scrollbarsAutoHideTimeoutId","_scrollbarsAutoHideMoveTimeoutId","_scrollbarsAutoHideDelay","_scrollbarsAutoHideNever","_scrollbarsAutoHideScroll","_scrollbarsAutoHideMove","_scrollbarsAutoHideLeave","_scrollbarsHandleHovered","_scrollbarsHandlesDefineScrollPos","_resizeNone","_resizeBoth","_resizeHorizontal","_resizeVertical","_frameworkProto","isHTMLElement","_cassNamesPrefix","force","attrsChanged","mutHost","mutContent","float","bodyMinSizeC","changed","contentElementScrollSize","curr","cache","changedAttrs","checks","_elem","_attrs","check","checkCache","updateViewportAttrsFromTarget","contentSizeC","contentMeasureElement","getContentMeasureElement","textareaValueLength","setCSS","bodyMinSizeChanged","doUpdateAuto","_contentSizeChanged","_changedOptions","takeRecords","_hostSizeChanged","_force","updateElementsOnLoad","newOptions","getObjectPropVal","setObjectPropVal","splits","splitsLength","extendObj","extendObjRoot","changedOps","destroy","extName","disconnectMutationObservers","setupResizeObserver","removeExt","pop","setupHostMouseTouchEvents","setupScrollbarsDOM","setupScrollbarCornerDOM","setupStructureDOM","updateOnLoadCallback","dispatchCallback","scroll","coordinates","infoX","infoY","normalizeInvert","normalizeNegate","scrollX","_currentScroll","scrollXRatio","_currentScrollRatio","maxScrollX","_maxScroll","ratio","handleOffset","_handleOffset","handleLength","_handleLength","handleLengthRatio","_handleLengthRatio","trackLength","_trackLength","snappedHandleOffset","_snappedHandleOffset","isRTL","isRTLNormalized","updateScrollbarInfos","doScrollLeft","refreshScrollbarHandleOffset","doScrollTop","settingsScroll","settingsBlock","viewportScroll","viewportOffset","elementOffset","doNotScroll","elementScrollCoordinates","rawElementSize","elementSize","finalizeBlock","finalElement","coordinatesXAxisProps","coordinatesYAxisProps","coordinatesOperators","durationIsObject","completeCallback","finalScroll","strEnd","strBegin","strCenter","strNearest","strNever","strIfNeeded","strLength","elementObjSettingsAxisValues","elementObjSettingsBlockValues","elementObjSettingsScrollValues","coordinatesIsElementObj","possibleElement","possibleElementIsJQuery","possibleElementIsHTMLElement","proxyCompleteCallback","checkSettingsStringValue","currValue","allowedValues","getRawScroll","isX","coordinateProps","getFinalScroll","rawScroll","operator","isString","scrollInfo","currScroll","maxScroll","isRTLisX","normalizeShortcuts","strReplace","evalFunc","eval","amount","possibleOperator","substr","parseToZeroOrNumber","normalizeIsRTLisX","operatorCurrScroll","invert","negate","getPerAxisValue","valueInternalType","valueArrLength","valueArrItem","resultDefault","valueType","generateMargin","marginTopRightBottomLeftArray","currValueType","valueDirections","margin","axis","block","marginDefault","marginType","marginLength","settingsAxis","settingsMargin","measuringElm","vars","getScrollbarVars","wh","_w_h","lt","_left_top","xy","_x_y","blockIsEnd","blockIsCenter","blockIsNearest","scrollNever","scrollIfNeeded","vpSize","vpOffset","elSize","elOffset","divide","elementCenterOffset","viewportCenterOffset","isInView","animationOptions","scrollStop","param1","param2","param3","getElements","elementName","host","viewport","scrollbarHorizontal","scrollbar","track","handle","scrollbarVertical","scrollbarCorner","stateProperty","prepare","extended","changePropertyName","extendDeep","sleeping","widthAuto","heightAuto","overflowAmount","hideOverflow","hasOverflow","contentScrollSize","viewportSize","hostSize","documentMixed","ext","privateMethods","addExt","extensionOptions","contractResult","registeredExtensionObj","contractFulfilled","instanceContract","contract","instanceAdded","added","instanceRemoved","removed","construct","setupResponsiveEventListener","element","eventNames","listener","passiveOrOptions","collected","method","onOff","events","passiveOrOptionsIsObj","passive","capture","_capture","nativeParam","addDestroyEventListener","targetElement","onElementResizedCallback","strAnimationStartEvent","constScroll","observerElement","shrinkElement","expandElement","widthCache","heightCache","isDirty","rAFId","currWidth","currHeight","reset","onResized","isIE","directionChanged","resizeObserverObj","resizeObserver","strChildNodes","generateDiv","observe","dir","style","expandElementChild","expandChildCSS","setTopRightBottomLeft","observerElementCSS","findFirst","onload","wnd","contentDocument","defaultView","scrollLeftValue","disconnect","createMutationObservers","mutationObserverContentLag","mutationObserver","contentLastUpdate","mutationTarget","mutationAttrName","mutationIsClass","oldMutationVal","newClassVal","hostClassNameRegex","contentTimeout","sizeAuto","action","mutations","doUpdate","mutation","attributeName","mutationType","strClosest","hostClassNamesChanged","oldValue","textareaUpdate","doUpdateForce","mutatedAttrs","createHostClassNameRegExp","filter","connectMutationObservers","attributes","attributeOldValue","attributeFilter","subtree","childList","characterData","hostOnResized","hostOnMouseEnter","refreshScrollbarsAutoHide","hostOnMouseLeave","hostOnMouseMove","documentOnSelectStart","elm","eachUpdateOnLoad","updateOnLoadSelector","bodyMinSize","oldClassNames","newClassNames","regex","currClasses","diff","a1","a2","idx","attrs","targetAttr","minWidth","minHeight","origWidth","origHeight","wrapAttrOff","doMeasure","_originalWidth","_originalHeight","_dynamicWidth","_dynamicHeight","updateHints","hostSizeChanged","contentSizeChanged","changedOptions","swallow","displayIsHidden","oldSize","checkCacheAutoForce","currentPreparedOptionsScrollbars","currentPreparedOptionsTextarea","scrollbarsVisibility","scrollbarsVisibilityChanged","scrollbarsAutoHide","scrollbarsAutoHideChanged","scrollbarsClickScrolling","scrollbarsClickScrollingChanged","scrollbarsDragScrolling","scrollbarsDragScrollingChanged","classNameChanged","resizeChanged","paddingAbsoluteChanged","clipAlwaysChanged","sizeAutoCapableChanged","ignoreOverlayScrollbarHiding","ignoreOverlayScrollbarHidingChanged","autoUpdateChanged","overflowBehaviorChanged","textareaDynWidth","textareaDynWidthChanged","textareaDynHeight","textareaDynHeightChanged","textareaAutoWrapping","newSize","textareaAutoWrappingChanged","cssDirection","cssDirectionChanged","boxSizing","boxSizingChanged","getTopRightBottomLeftHost","sizeAutoObserverElementBCRect","contentSize","hostAbsoluteRectSize","textareaCoverCSS","hideOverflowForceTextarea","previousOverflowAmount","overflowBehaviorIsVS","overflowBehaviorIsVH","overflowBehaviorIsS","canScroll","viewportRect","arrangeContent","arrangeChanged","viewportElementCSS","paddingElementCSS","elementStyle","posLeftWithoutFloat","textareaInfo","isRTLLeft","isRTLRight","widthAutoResizeDetection","widthAutoObserverDetection","right","tmpCurrHostWidth","tmpCurrContentGlueWidth","tmpNewHostWidth","widthAutoChanged","wasWidthAuto","bottom","heightAutoChanged","wasHeightAuto","border","contentElementCSS","contentGlueElementCSS","getHostSize","getViewportSize","paddingAbsoluteX","r","paddingAbsoluteY","textareaSize","textareaCSS","paddingValues","textareaSizeChanged","textareaDynOrigSize","strOverflowX","strOverflowY","viewportElementResetCSS","resetXTmp","ys","resetBottomTmp","xs","contentGlueSize","setContentGlueElementCSSfunction","horizontal","scrollbarVars","strWH","_width_height","autoSize","borderSize","paddingSize","marginSize","setOverflowVariables","xyI","widthHeight","scrollMax","_Left_Top","fractionalOverflowAmount","checkFractionalOverflowAmount","contentArrangeElementCSS","setContentElementCSS","scrollbarVarsInverted","strDirection","invertedAutoSize","addRemoveClass","setViewportCSS","XY","_X_Y","webkitTransform","floatTmp","textareaCursorPosition","rowCols","textareaValue","textareaLength","textareaRowSplit","textareaLastRow","textareaCurrentCursorRowSplit","widestRow","textareaLastCol","cursorRow","cursorCol","_cursorRow","_cursorColumn","_rows","_columns","_widestRow","_cursorPosition","_cursorMax","textareaRowsChanged","lastRow","lastCol","cursorPos","cursorIsLastPosition","textareaScrollAmount","scrollbarsVisibilityVisible","scrollbarsVisibilityHidden","scrollbarsVisibilityAuto","refreshScrollbarsVisibility","showX","showY","refreshScrollbarAppearance","refreshScrollbarHandleLength","refreshScrollbarsInteractive","xScrollable","yScrollable","clipped","forced","validatedOpts","applyAdoptedAttrs","applyAdoptedAttrsElm","adoptAttrsMap","strParent","classNameTextareaElementFull","textareaClass","adoptAttrs","hostElementClassNames","hostElementCSS","selectOrGenerateDivByClass","setupStructureEvents","textareaUpdateIntervalID","scrollStopTimeoutId","textareaKeyDownRestrictedKeyCodes","textareaKeyDownKeyCodesList","strFocus","updateTextarea","doClearInterval","clearInterval","contentOnTransitionEnd","flexBasis","affectingPropsX","affectingPropsXContentBox","affectingPropsYContentBox","checkX","sizeIsAffected","checkPropertyName","propertyName","checkY","keyCode","setInterval","nativeOverlayScrollbarsAreActive","selectOrGenerateScrollbarDOM","isHorizontal","_scrollbar","_track","_handle","horizontalElements","verticalElements","resetScrollbarDOM","setupScrollbarEvents","trackTimeout","mouseDownScroll","mouseDownOffset","mouseDownInvertedScale","scrollbarVarsInfo","_info","insideIFrame","strActive","strSnapHandle","strClickEvent","scrollDurationFactor","increaseDecreaseScrollAmountKeyCodes","getPointerPosition","getPreparedScrollbarsOption","increaseTrackScrollAmount","decreaseTrackScrollAmount","stopClickEventPropagation","documentKeyDown","documentKeyUp","onMouseTouchDownContinue","isTouchEvent","documentDragMove","scrollDelta","isFinite","documentMouseTouchUp","clientX","clientY","onHandleMouseTouchDownAction","getHostElementInvertedScale","scrollDistance","scrollBaseDuration","scrollFirstIterationDelay","trackOffset","instantScroll","instantScrollTransition","isFirstIteration","decreaseScroll","scrollActionFinsished","scrollActionInstantFinished","scrollAction","handleToViewportRatio","shiftKey","transition","mouseOffset","scrollRange","scrollDuration","timeoutDelay","rtlIsNormal","decreaseScrollCondition","scrollObj","animationObj","instantScrollPosition","shallBeVisible","scrollbarElement","delayfree","anyActive","handleCSS","handleRatio","_Width_Height","scrollOrTransition","getScrollRatio","getHandleOffset","scrollRatio","handleTrackDiff","isRTLisHorizontal","strTranslateBrace","strTransform","strTransition","nativeScroll","currentScroll","transformOffset","transitionStr","assembledValue","strResult","valueArray","regExpString","regExpMain","RegExp","regExpValidate","properties","$1","isTrack","element2","_l_t","args","dependent","extensionOnName","targetCSSObject","prefix","zeroX","zeroY","withCurrClassNameOption","withOldClassNameOption","appendClasses","appendix","strOwnerDocument","strHTMLElement","parentWindow","toFloat","classesOrAttrs","selectParentOrOnlyChildren","onlyChildren","selectParent","current","doAdd","initBodyScroll","bodyMouseTouchDownListener","reconnectMutationObserver","mouseDownPosition","mouseDownSize","_defaultOptions","getCoordinates","setCapture","activeElement","pageOffset","eventIsTrusted","releaseCapture","screenX","screenY","overlayScrollbars","Shomoy","#datetime","datetime","toISOString","iso","shomoyStart","setHours","shomoyEnd","msInDay","compare","shomoy","shomoyA","shomoyB","dateTime","inMilli","getMilliseconds","getTimestamp","diffHour","diffCompo","day","dayLeft","hour","hourLeft","minLeft","secLeft","addMs","ms","setMilliseconds","addSec","getSeconds","setSeconds","addMin","getMinutes","setMinutes","addHour","getHours","addDay","getDate","setDate","addMonth","month","getMonth","setMonth","addYear","year","setFullYear","date","isoDate","isoTime","getYear","getFullYear","getDay","setYear","setHour","setMin","setSec","setMilli","milli","twenty_four","short","monthStr","ampm","uppercase","strTime24","strTime","strDate","separated","strDateTime","isoNow","secInMin","of","secInHour","secInDay","firstDayOfMonth","lastDayOfMonth","listWeek","since","keyDecFn","valDecFn","valDecorator","#valDecorator","keyDecorator","#weekKeyDecorator","weeks","monthTo","yearTo","monthFrom","yearFrom","momStartDay","currentMilli","listMonth","#dayKeyDecorator","shoA","shoB","addToNow","SimPro","containerId","canvasId","size","developerMode","container","STYLE_LINE_BUTT","STYLE_LINE_ROUND","canvas","context","getContext","smallGuide","halfSize","lineWidth","guideLineWidth","fontSize","radius","calculateCanvasDimension","formattedProgress","counterClock","startPoint","fullPoint","calculateProgress","lineCap","fontColor","guideColor","guideVisibility","floatMode","percentageSignVisibility","paint","font","calculateArcDimension","unitSize","lineWidthScale","guideScale","radiusScale","setSize","clearRect","endPoint","endPointSigned","formatProgress","setProgress","getProgress","progressValue","paintRuler","beginPath","strokeStyle","arc","stroke","fillStyle","textAlign","textBaseline","fillText","setLineCap","setFloatMode","setSmallGuide","setPercentageSignVisibility","setCounterClock","setFontColor","setProgressBarColor","setGuideColor","setGuideVisibility","setDeveloperMode","mode","lineTo","strokeRect","#toastMsg","ERROR","WARNING","SUCCESS","INFO","#injected","#toast","#icon","#guide","#bar","#autoHide","#callback","warning","#stopAnimation","#removeListener","#setup","#startAnimation","#decorate","themeSettings","bg","guide","bar","loadToast"],"mappings":"MAgBAA,UAGAC,aAAA,EACAC,YAAA,EACAC,cAAA,EAEAC,OAGAC,YAAA,eAkBAC,eASAC,YAGAC,WAAA,KAGAC,OAAA,IAGAC,MAAAV,UAAAC,MAGAU,WAAA,cACAC,SAAA,cAEAC,YAAAC,GACAC,KAAAX,OAAAU,EAGAC,KAAAT,eAAA,IAIAU,IAAAC,EAAAC,EAAAA,EAAA,IAAAH,KAAAX,MAAA,EAAAe,SAAA,CAAA,EAAAC,KAAA,cAAA,EACAF,EAAAD,CAAA,EAAAI,YAAA,aAAA,EACAH,EAAAI,EAAAC,MAAA,EAAAC,SAAA,aAAA,EAEAF,EAAAG,YASAV,KAAAP,aACAO,KAAAW,SAAAX,KAAAP,WAAA,CAAA,EAAAc,EAAAK,OAAA,EACAZ,KAAAP,WAAA,OARAW,EAAAD,EAAAI,EAAAK,OAAA,EAAAP,KAAA,cAAA,IAGAL,KAAAW,SAAAP,EAAA,CAAA,EAAAG,EAAAK,OAAA,CASA,EAGAZ,KAAAR,YAAA,IAQAQ,KAAAP,aACAoB,EAAAV,EAAAH,KAAAP,UAAA,EAAAqB,QAAA,eAAA,EACAd,KAAAW,SAAAX,KAAAP,WAAA,CAAA,EAAAoB,CAAA,GAFA,IAKAT,EAAAD,EAAAY,CAAA,EAAAV,KAAA,cAAA,EACAD,IAGAD,EAAAC,CAAA,EAAAY,GAAAhB,KAAAP,UAAA,EACAO,KAAAP,WAAA,KAKAW,IACAJ,KAAAW,SAAAP,EAAA,CAAA,EAAAW,CAAA,EACAf,KAAAP,WAAAW,GACA,EAIAD,MAAAJ,MAAAC,KAAAV,WAAA,EAAA2B,KAAA,CAAAC,EAAAC,KACAlB,IAAAG,EAAAD,EAAAgB,CAAA,EAAAf,SAAA,EACAA,EAAAgB,OAAA,GAEAjB,EAAAC,CAAA,EAAAiB,MAAA,EAAAC,MAAA,IAAAtB,KAAAR,YAAA2B,CAAA,CAAA,CACA,CAAA,EAGAhB,MAAAJ,kBAAA,EAAAwB,KAAAvB,KAAAJ,UAAA,CACA,CAEAe,SAAAQ,EAAAK,EAAAC,GACAxB,IAAAyB,EAAAvB,EAAAsB,CAAA,EAAArB,SAAA,EAAAiB,MAAA,EAAAhB,KAAA,gBAAA,EACAsB,EAAAH,EAAAxB,KAAAH,SAAAG,KAAAJ,WAEAI,KAAAL,QAAAV,UAAAE,KACAqC,EAAArB,EAAAgB,CAAA,EAAAS,OAAA5B,KAAAN,OAAA,IAAAS,EAAAuB,CAAA,EAAAH,KAAAI,CAAA,CAAA,EACAxB,EAAAgB,CAAA,EAAAU,QAAA7B,KAAAN,OAAA,IAAAS,EAAAuB,CAAA,EAAAH,KAAAI,CAAA,CAAA,EAGA3B,KAAAL,QAAAV,UAAAG,OACAoC,EAAArB,EAAAgB,CAAA,EAAAW,KAAA9B,KAAAN,OAAA,IAAAS,EAAAuB,CAAA,EAAAH,KAAAI,CAAA,CAAA,EACAxB,EAAAgB,CAAA,EAAAY,KAAA/B,KAAAN,OAAA,IAAAS,EAAAuB,CAAA,EAAAH,KAAAI,CAAA,CAAA,EAIAH,EAAArB,EAAAgB,CAAA,EAAAa,UAAAhC,KAAAN,OAAA,IAAAS,EAAAuB,CAAA,EAAAH,KAAAI,CAAA,CAAA,EACAxB,EAAAgB,CAAA,EAAAc,QAAAjC,KAAAN,OAAA,IAAAS,EAAAuB,CAAA,EAAAH,KAAAI,CAAA,CAAA,CAEA,CAEAO,aAAAC,EAAAC,GACAnC,IAAAoC,EAAAlC,EAAA,IAAAH,KAAAX,MAAA,EAAAgB,KAAA,gBAAA,EACAF,EAAAkC,CAAA,EAAApB,KAAA,CAAAC,EAAAC,KACAlB,IAAAqC,EAAAnC,EAAAgB,CAAA,EAAAI,KAAA,EACAe,IAAAH,EAAAhC,EAAAgB,CAAA,EAAAI,KAAAvB,KAAAJ,UAAA,EACA0C,IAAAF,GAAAjC,EAAAgB,CAAA,EAAAI,KAAAvB,KAAAH,QAAA,CACA,CAAA,CAEA,CAEA0C,UAAAhB,GACAtB,IAAAuC,EAAAxC,KAAAJ,WAGA,OAFAI,KAAAJ,WAAA2B,EACAvB,KAAAkC,aAAAM,EAAA,IAAA,EACAxC,IACA,CAEAyC,QAAAlB,GACAtB,IAAAuC,EAAAxC,KAAAH,SAGA,OAFAG,KAAAH,SAAA0B,EACAvB,KAAAkC,aAAA,KAAAM,CAAA,EACAxC,IACA,CAEA0C,OAAAC,GAEA,OADA3C,KAAAL,MAAAgD,EACA3C,IACA,CAEA4C,UAAAC,GAEA,OADA7C,KAAAN,OAAAmD,EACA7C,IACA,CAEA8C,cAAAC,GAEA,OADA/C,KAAAT,eAAAwD,EACA/C,IACA,CAEAgD,WAAAD,GAEA,OADA/C,KAAAR,YAAAuD,EACA/C,IACA,CAEAK,KAAA4C,EAAA,IAEAhD,IAAAiD,EAAA,IAAAC,IAAAC,SAAAC,QAAA,EAAAJ,KAEA,EAAAA,EAAA7B,SAAA8B,EAAAD,GAEAhD,IAAAqD,EACA,IAAArD,IAAAsD,KAAApD,MAAAH,KAAAX,UAAA,EACA,GAAAkE,EAAAN,OAAAC,EAAA,CACAI,EAAAC,EACA,KACA,CAGAvD,KAAAT,iBAEAiE,IAAAC,QAAAH,CAAA,EACAtD,KAAAT,eAAA,EAAA,IAIAgB,EAAA,IACAC,OAAA8C,EACA/C,EAAAK,QAAAT,EAAAmD,CAAA,EAAAxC,QAAA,IAAAd,KAAAV,WAAA,EACAiB,EAAAG,YAAAP,EAAAmD,CAAA,EAAAzC,OAAA,EAAAG,GAAAT,EAAAK,OAAA,EACAZ,KAAAT,eAAAgB,CAAA,GACA,CAEA,OC9NAmD,QAEAC,WAAAC,EAAAC,EAAAC,EAAA,KACA,IAAAC,EAAA,IAAAC,KAEAC,GADAF,EAAAG,QAAAH,EAAAI,QAAA,EAAA,GAAAL,EAAA,GAAA,GAAA,GAAA,EACA,WAAAC,EAAAK,YAAA,GACAhB,SAAAiB,OAAAT,EAAA,IAAAC,EAAA,IAAAI,EAAA,uBACA,CAEAK,aAAAV,GACAR,SAAAiB,OAAAT,EAAA,+DACA,CAEAW,eAAAX,EAAAY,GACAX,EAAAH,QAAAe,OAAAb,EAAA,IAAA,EACA,OAAA,MAAAC,EAAAW,EACA,SAAAX,CACA,CAEAa,cAAAd,EAAAY,GACA,OAAAG,SAAAjB,QAAAe,OAAAb,EAAAY,CAAA,CAAA,CACA,CAEAI,gBAAAhB,EAAAY,GACA,OAAAK,WAAAnB,QAAAe,OAAAb,EAAAY,CAAA,CAAA,CACA,CAEAC,cAAAb,EAAAY,GACAvE,IAAA6E,EAAAlB,EAAA,IAGAmB,EAFAC,mBAAA5B,SAAAiB,MAAA,EAEAY,MAAA,GAAA,EACA,IAAAhF,IAAAiF,EAAA,EAAAA,EAAAH,EAAA3D,OAAA8D,CAAA,GAAA,CACAjF,IAAAkF,EAAAJ,EAAAG,GACA,KAAA,MAAAC,EAAAC,OAAA,CAAA,GACAD,EAAAA,EAAAE,UAAA,CAAA,EAEA,GAAA,IAAAF,EAAAG,QAAAR,CAAA,EAAA,OAAAK,EAAAE,UAAAP,EAAA1D,OAAA+D,EAAA/D,MAAA,CACA,CACA,OAAAoD,CACA,CAEA,OClDAe,QAEAC,QAAA,CAAA,EAEAC,QAAA,CACAC,KAAA,CAAAC,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,KAAAJ,EAAAK,OAAA,KAAAL,EAAAM,IAEA,IAAAN,EAAAO,UAAAhF,OACApB,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAIAtG,KAAAuG,cAAA,CACA,EAEAC,OAAA,CAAAb,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,IAAAJ,EAAAK,OAAA,IAAAL,EAAAM,IAEA,IAAAN,EAAAO,UAAAhF,OACApB,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAIAtG,KAAAuG,cAAA,CACA,EAEAE,KAAA,CAAAd,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,QAAAJ,EAAAK,OAAA,QAAAL,EAAAM,IAEA,IAAAN,EAAAO,UAAAhF,OACApB,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAIAtG,KAAAuG,cAAA,CACA,EAEAG,QAAA,CAAAf,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,KAAAJ,EAAAK,OAAAL,EAAAM,IAEA,IAAAN,EAAAO,UAAAhF,SACApB,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,GAGAtG,KAAAuG,cAAA,CACA,EAEAI,KAAA,CAAAhB,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,KAAAJ,EAAAK,OAAAL,EAAAM,IAEAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAEAtG,KAAAuG,cAAA,CACA,EAEAK,QAAA,CAAAjB,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,UAAAJ,EAAAK,OAAAL,EAAAM,IAEAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAEAtG,KAAAuG,cAAA,CACA,EAEAM,KAAA,CAAAlB,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EAEA,IAAAH,EAAAO,UAAAhF,OACApB,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,OAAAJ,EAAAM,IAGAnG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,MAAAJ,EAAAK,OAAA,IAAAL,EAAAM,IACAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAGAtG,KAAAuG,cAAA,CACA,EAEAO,MAAA,CAAAnB,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EAEA,IAAAH,EAAAO,UAAAhF,QACApB,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,QAAAJ,EAAAM,IACAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,IAEAtG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,OAAAJ,EAAAK,OAAA,IAAAL,EAAAM,IACAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,GAGAtG,KAAAuG,cAAA,CACA,EAEAQ,MAAA,CAAApB,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EAGA,GAFA9F,KAAA+F,QAAAC,MAAA,EAEA,IAAAH,EAAAO,UAAAhF,OACApB,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,KAAAJ,EAAAM,IACAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,MACA,CAEArG,IAAA+G,EAAA,GACA/G,IAAAgH,EAAApB,EAAAK,OAAAjB,MAAA,IAAA,EACAiC,IAAAD,CAAA,EAEAA,EAAAE,QAAA,IACAH,QAAAI;CACA,CAAA,EACAJ,GAAA,KAEAhH,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAAe,EAAAnB,EAAAM,IACAnG,KAAA+F,QAAAM,aAAAR,EAAAS,SAAAU,EAAA5F,MACA,CAEApB,KAAAuG,cAAA,CACA,EAEAf,QAAA,CAAAG,EAAA,QACAA,GAAAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,OAAAJ,EAAAK,OAAA,OAAAL,EAAAM,IAEA,IAAAN,EAAAO,UAAAhF,OACApB,KAAA+F,QAAAM,aAAAR,EAAAS,SAAA,EAIAtG,KAAAuG,cAAA,CACA,CAEA,EAEAR,QACAsB,SACAC,SAEAxH,YAAAyH,EAAAC,EAAAC,GACA,GAAA,aAAA,OAAAC,OAAA,MAAA,IAAAC,MAAA,+BAAA,EACA,GAAA,aAAA,OAAAC,KAAA,MAAA,IAAAD,MAAA,qCAAA,EACApC,QAAAsC,aAAA,EAEA7H,KAAA+F,QAAA3C,SAAA0E,eAAAP,CAAA,EACAvH,KAAAqH,SAAAjE,SAAA0E,eAAAN,CAAA,EACAxH,KAAAsH,SAAAlE,SAAA0E,eAAAL,CAAA,EAEAzH,KAAA+H,YAAA,EACA/H,KAAAgI,aAAA,EAGAnE,EAAA7D,KAAA+F,QAAAlC,MACA,EAAAA,EAAAzC,QAAApB,KAAAuG,cAAA1C,CAAA,EAEA7D,KAAA+F,QAAAkC,iBAAA,QAAA,IAAAjI,KAAAuG,cAAA,CAAA,EAEAvG,KAAA+F,QAAAkC,iBAAA,UAAA,IAEAhI,IAAAiI,EAAAC,EAAAC,QACAxE,EAAAuE,EAAAvE,IAEA,GAAA,QAAAA,EAAAyE,YAAA,EACArI,KAAAsI,QAAAH,CAAA,OAIA,GAAAD,EAEA,OAAAtE,GACA,IAAA,IACA5D,KAAAyF,QAAA,KAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,OAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,KAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,QAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,KAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,QAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,KAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,MAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,MAAA0C,CAAA,EACA,MAEA,IAAA,IACAnI,KAAAyF,QAAA,QAAA0C,CAAA,CAEA,CAEA,CAAA,CACA,CAEAG,QAAA3C,GACAA,EAAAC,eAAA,EAEAC,EAAA7F,KAAA8F,WAAA,EACA9F,KAAA+F,QAAAC,MAAA,EACAhG,KAAA+F,QAAAlC,MAAAgC,EAAAI,MAAA,OAAAJ,EAAAM,IAEAnG,KAAA+F,QAAAM,aAAAR,EAAAI,MAAA7E,OAAA,CACA,CAEAmF,gBACAtG,IAAA4D,EAAA7D,KAAA+F,QAAAlC,MACA7D,KAAAwF,UACAD,QAAAgD,kBAAA,EACAvI,KAAAwF,QAAA,CAAA,GAEAxF,KAAAsH,SAAAkB,UAAAd,OAAAe,MAAA5E,CAAA,CACA,CAEA4E,aAAAC,GAEA,OADAnD,QAAAoD,YAAA,EACAjB,OAAAe,MAAAC,CAAA,CACA,CAEAE,qBACAhB,KAAAiB,aAAA,EACAjB,KAAAkB,sBAAA,CACA,CAEAhD,aACA7F,IAAA8I,EAAA,GACAlF,EAAA7D,KAAA+F,QAAAlC,MAYA,OAVAkF,EAAA,SAAA/I,KAAA+F,QAAAiD,eACAD,EAAA,OAAA/I,KAAA+F,QAAAM,aAEA0C,EAAA,UAAA/I,KAAA+F,QAAAlC,MAAAoF,MAAAjJ,KAAA+F,QAAAiD,eAAAhJ,KAAA+F,QAAAM,YAAA,EACA0C,EAAA,OAAAA,EAAA,UAAA3H,OAEA2H,EAAA,MAAAlF,EAAAoF,MAAA,EAAAF,EAAA,QAAA,EACAA,EAAA,OAAAlF,EAAAoF,MAAAF,EAAA,SAAAA,EAAA,MAAA,EACAA,EAAA,IAAAlF,EAAAoF,MAAAF,EAAA,MAAA,EAEAA,CACA,CAEAlB,qBACAH,OAAAwB,WAAA,CACAC,SAAA,CAAA,EACAC,IAAA,CAAA,EACAC,OAAA,CAAA,EACAC,SAAA,CAAA,EACAC,WAAA,CAAA,EACAC,YAAA,CAAA,EACAC,MAAA,CAAA,CACA,CAAA,EAOA/B,OAAAgC,IAAA,CAAAC,SALA,CACAlD,KAAAA,GACA,iCAAAmB,KAAAgC,cAAAnD,CAAA,EAAA5C,oBACA,CACA,CACA,CAAA,CACA,CAEA8E,oBACA1I,IAGA4J,EAAAtE,QAAAuE,YAHA,0FACAC,gEAEA,EACArC,OAAAgC,IAAA,CAAAM,WAAA,CAAAH,EAAA,CAAA,CACA,CAEAtB,0BACAtI,IAGA4J,EAAAtE,QAAAuE,YAHA,+DACAC,aAEA,EACArC,OAAAgC,IAAA,CAAAM,WAAA,CAAAH,EAAA,CAAA,CACA,CAEAC,kBAAAG,GACA,MAAA,CACAnF,KAAA,UACAoF,MAAA,SACAjE,MAAAkE,GAAA,OAAAA,EAAAC,MAAA,YAAA,GAAAlJ,KAAA,EACAmJ,UAAAF,GACA,IACAC,EADA,mBACAE,KAAAH,CAAA,EACA,GAAAC,EAQA,OAPAG,EAAA,CACA5H,KAAA,UACA6H,IAAAJ,EAAA,GACAK,KAAAL,EAAA,GAAAM,KAAA,EACAC,OAAA,EACA,EACA3K,KAAA4K,MAAAC,OAAAN,EAAAE,KAAAF,EAAAI,MAAA,EACAJ,CAEA,EACAZ,SAAAY,GACA,OAAAN,EAAAjK,KAAA8K,OAAAC,YAAAR,EAAAI,MAAA,CAAA,CACA,CACA,CACA,CAEA3C,eACA,IAAA/H,IAAA+K,KAAAhL,KAAAyF,QACArC,SAAA0E,eAAAkD,CAAA,EACA/C,iBAAA,QAAA,KACAjI,KAAAyF,QAAAuF,GAAA,CACA,CAAA,CAEA,CAEAjD,cACA/H,KAAAqH,SAAAmB;;;;;;;;;;;;;SAcA,CAEAyC,WACA,OAAAjL,KAAA+F,QAAAlC,KACA,CAEA,EC9XA,WAEAqH,EAGAC,KACAC,OACAC,OACAC,QACAC,YAGAC,SAAA,GACAC,YAAA,GACAC,YAAA,CAAAC,UAAA,EAAA,EAKAC,UAGAC,aACAC,YACAC,aAEAC,SACAC,gBACAC,cAEAC,aACAC,SACAC,QAGAC,SACAC,aACAC,WAEAC,WAAA,CAAA,EACAC,UAAA,CAAA,EACAC,WAAA,CAAA,EAGAC,SAAA,CAAA,EACAC,YAAA,CAAA,EACAC,eAAA,CAAA,EACAC,gBAAA,CAAA,EACAC,cAAA,CAAA,EACAC,OAAA,EAGAC,MAAA,CAAA,EACAC,SACAC,YACAC,WAEAC,2BAAA,EACAC,wBAAA,EACAC,2BAAA,EACAC,yBAAA,CAAA,EACAC,2BAAA,CAAA,EAEAC,uBAAA,EACAC,qBAAA,EACAC,wBAAA,CAAA,EAGAC,0BAAA,EACAC,oCAAA,EACAC,mBAAA,EACAC,qBAAA,EACAC,2BAAA,EAGAC,UAAA,IACAC,iBAAA,IACAC,sBAAA,IACAC,mBAAA,IAEAC,mBAAA,CACAC,KAAA,oCACAC,KAAA,mBACAjE,IAAA,YACA,EAEA1K,cACAE,KAAAoL,OAAA,IAAAsD,eACA1O,KAAAoL,OAAAuD,mBAAA,KACA3O,KAAAqL,OAAArL,KAAAoL,OAAAwD,WACA5O,KAAAsL,QAAAtL,KAAAoL,OAAAyD,OACA7O,KAAAuL,YAAAvL,KAAAoL,OAAA0D,WAEA9O,KAAAqL,SAAArL,KAAAkO,6BAEAlO,KAAAsL,UAAAtL,KAAAmO,UACAnO,KAAA+O,kBAAA/O,KAAAoL,OAAA4D,YAAA,EACAhP,KAAAsL,UAAAtL,KAAAsO,mBACA,MAAAtO,KAAAgM,UAAAhM,KAAAgM,SAAA,EACAhM,KAAAsL,UAAAtL,KAAAqO,sBACA,MAAArO,KAAAiM,iBAAAjM,KAAAiM,gBAAA,EAEA,MAAAjM,KAAAkM,eAAAlM,KAAAkM,cAAA,EAEA,CACA,CAEA6C,kBAAAE,GAGA,GAFAjP,KAAA4L,UAAAqD,EAEAjP,KAAAkN,MAAA,CASA,IACAlN,KAAA4L,UAAAsD,KAAAzG,MAAAwG,CAAA,EACAjP,KAAAmN,SAAAnN,KAAA4L,UAAAqD,SAAA,IACAjP,KAAAoN,YAAApN,KAAA4L,UAAAqD,SAAA,OACAjP,KAAAqN,WAAArN,KAAA4L,UAAAqD,SAAA,MAEAE,KAAAA,IAAAnP,KAAA4L,UAAAqD,SAAA,YACAG,QAAAC,KAAA,qCAAA,EAGA,OAAArP,KAAA4L,UAAAqD,QAOA,CANA,MAAAK,GAKA,OAJAtP,KAAAuP,WAAA,EACAH,QAAAE,SAAAtP,KAAAmN,YAAAmC,EAAAE;YAAAxP,KAAA4L,SAAA,EACA5L,KAAAyP,gBAAA,CAAA,CAAA,EAFAzP,KAGAA,KAAA0P,iBAAA,CAEA,CAEAC,EAAA3P,KAAAoN,cAAAlC,EAAAoC,oBAEAtN,KAAA4P,gBAAAD,CAAA,EAGA3P,KAAAyP,gBAAAE,CAAA,EAGA3P,KAAA4M,SACA5M,KAAA0P,iBAAA,EAKA1P,KAAA8M,eAOA9M,KAAA6M,YAEA7M,KAAA6P,WAAAF,CAAA,EAGA3P,KAAA+M,iBAAA4C,EAAA3P,KAAA6P,WAAA,CAAA,CAAA,EACA7P,KAAAgN,eAAA,CAAA2C,EAAA3P,KAAA6P,WAAA,CAAA,CAAA,EACA7P,KAAA0P,iBAAA,GAbAI,MAAAhO,KAAA9B,KAAAoN,YAAApN,KAAAmN,SAAA,CAAA,CAAA,EACAnN,KAAA+P,kBAAAJ,CAAA,EACA3P,KAAA0P,iBAAA,EAvCA,MALA1P,KAAA4M,SAAA,CAAA,EACA5M,KAAA4P,gBAAA,CAAA,CAAA,EACA5P,KAAAyP,gBAAA,CAAA,CAAA,EACAzP,KAAA0P,iBAAA,CAsDA,CAEAE,gBAAAD,IAEA3P,KAAAyM,YAAAzM,KAAA4M,WAAA5M,KAAAsM,UAAApB,EAAA8E,SAAAhQ,KAAAsM,QAAA,GACAtM,KAAA0M,WAAA1M,KAAA4M,WAAA+C,GAAAzE,EAAA8E,SAAAhQ,KAAAuM,YAAA,EACAvM,CAAAA,KAAA2M,YAAA3M,CAAAA,KAAA4M,UAAA+C,GAAAzE,EAAA8E,SAAAhQ,KAAAwM,UAAA,CACA,CAEAiD,gBAAAE,GACA,MAAA3P,KAAA6L,aAAA7L,KAAA6L,aAAA8D,CAAA,GAEAA,GAAA,MAAA3P,KAAA8L,aAAA9L,KAAA8L,YAAA,EACA6D,GAAA,MAAA3P,KAAA+L,cAAA/L,KAAA+L,aAAA,GAGA/L,KAAAoM,UAAApM,KAAAoM,SAAA,CACA,CAEAsD,mBACA1P,KAAAmL,KAAA,KAGAnL,KAAAwL,SAAA,GACAxL,KAAAyL,YAAA,GACAzL,KAAA0L,YAAA,GAGA1L,KAAA6L,aAAA,KACA7L,KAAA8L,YAAA,KACA9L,KAAA+L,aAAA,KACA/L,KAAAgM,SAAA,KACAhM,KAAAiM,gBAAA,KACAjM,KAAAkM,cAAA,KACAlM,KAAAmM,aAAA,KACAnM,KAAAoM,SAAA,KACApM,KAAAqM,QAAA,KAGArM,KAAAsM,SAAA,KACAtM,KAAAuM,aAAA,KACAvM,KAAAwM,WAAA,KACAxM,KAAAyM,WAAA,CAAA,EACAzM,KAAA0M,UAAA,CAAA,EACA1M,KAAA2M,WAAA,CAAA,EAGA3M,KAAA4M,SAAA,CAAA,EACA5M,KAAA6M,YAAA,CAAA,EACA7M,KAAA8M,eAAA,CAAA,EACA9M,KAAA+M,gBAAA,CAAA,EACA/M,KAAAgN,cAAA,CAAA,EACAhN,KAAAiN,OAAA,CACA,CAEAsC,aACAvP,KAAAoN,YAAAlC,EAAAwC,oBACA1N,KAAAqN,WAAAnC,EAAA2C,iBACA7N,KAAAmN,SAAA,4BACA,CAEA4C,kBAAAJ,GACA3P,KAAAsM,SAAAtM,KAAAiQ,QAAAjQ,KAAAsM,QAAA,EAEAqD,EAAA3P,KAAAiQ,QAAAjQ,KAAAuM,YAAA,EACAvM,KAAAiQ,QAAAjQ,KAAAwM,UAAA,CAEA,CAEAyD,QAAAC,GACAlQ,KAAAmM,cAAAnM,KAAAmM,aAAA,EACAjB,EAAA8E,SAAAE,CAAA,CACA,CAEAL,WAAAF,GACAG,MAAAhO,KAAA9B,KAAAoN,YAAApN,KAAAmN,SAAA,CAAA,EAAA,KACAnN,KAAA+P,kBAAAJ,CAAA,EACA3P,KAAA0P,iBAAA,CACA,EAAA1P,KAAAiN,MAAA,CACA,CAKAkD,uBAAAC,GAGA,OADAA,GADAA,EAAAA,EAAAC,SAAA,GAAA,EAAAD,EAAA/K,UAAA,EAAA+K,EAAAhP,OAAA,CAAA,EACAgP,GAAAC,SAAA,GAAA,EAAAD,EAAA/K,UAAA,EAAA+K,EAAAhP,OAAA,CAAA,EACAgP,CACA,CAEAE,cACArQ,IAAAmQ,EAAApQ,KAAAmL,KAAA,IAIA,OAHAoF,OAAAC,QAAAxQ,KAAAyL,WAAA,EAAAtE,QAAA,CAAA,CAAA6D,EAAA5D,KACAgJ,GAAApF,MAAA5D,IACA,EACAgJ,CACA,CAEAK,cACAF,OAAAC,QAAAxQ,KAAAwL,QAAA,EAAArE,QAAA,CAAA,CAAA6D,EAAA5D,KACApH,KAAAoL,OAAAsF,iBAAA1F,EAAA2F,OAAAvJ,CAAA,CAAA,CACA,CACA,CAOAwJ,cAEA,OADA5Q,KAAA8M,eAAA,CAAA,EACA9M,IACA,CAOA6Q,UAEA,OADA7Q,KAAA4M,SAAA,CAAA,EACA5M,IACA,CAOA8Q,eAGA,OAFA9Q,KAAA6M,YAAA,CAAA,EACA7M,KAAA+M,gBAAA,CAAA,EACA/M,IACA,CAOA+Q,aAGA,OAFA/Q,KAAA6M,YAAA,CAAA,EACA7M,KAAAgN,cAAA,CAAA,EACAhN,IACA,CAOAgR,UAAAC,GAEA,OADAjR,KAAAiN,OAAAgE,EACAjR,IACA,CASAkR,OAAAhB,EAAAiB,EAAA,CAAA,GAKA,OAJAnR,KAAAsM,SAAA4D,EACAlQ,KAAAuM,aAAA,KACAvM,KAAAwM,WAAA,KACAxM,KAAAyM,WAAA0E,EACAnR,IACA,CASAoR,cAAAlB,EAAAiB,EAAA,CAAA,GAIA,OAHAnR,KAAAsM,SAAA,KACAtM,KAAAuM,aAAA2D,EACAlQ,KAAA0M,UAAAyE,EACAnR,IACA,CASAqR,YAAAnB,EAAAiB,EAAA,CAAA,GAIA,OAHAnR,KAAAsM,SAAA,KACAtM,KAAAwM,WAAA0D,EACAlQ,KAAA2M,WAAAwE,EACAnR,IACA,CASAsR,MAAAvO,GAEA,OADA/C,KAAA6L,aAAA9I,EACA/C,IACA,CAQAuR,KAAAxO,GAEA,OADA/C,KAAA8L,YAAA/I,EACA/C,IACA,CAQAwR,MAAAzO,GAEA,OADA/C,KAAA+L,aAAAhJ,EACA/C,IACA,CAQAyR,OAAA1O,GAEA,OADA/C,KAAAqM,QAAAtJ,EACA/C,IACA,CAQA0R,QAAA3O,GAEA,OADA/C,KAAAoM,SAAArJ,EACA/C,IACA,CAOA2R,YAAA5O,GAEA,OADA/C,KAAAmM,aAAApJ,EACA/C,IACA,CAQA4R,UAAA7O,GAEA,OADA/C,KAAAgM,SAAAjJ,EACA/C,IACA,CAQA6R,iBAAA9O,GAEA,OADA/C,KAAAiM,gBAAAlJ,EACA/C,IACA,CAQA8R,eAAA/O,GAEA,OADA/C,KAAAkM,cAAAnJ,EACA/C,IACA,CAQA+R,WAEA,OADA/R,KAAAkN,MAAA,CAAA,EACAlN,IACA,CAQAgS,IAAAC,EAAA,QAEA,GADAA,EAAAA,EAAA5J,YAAA,EACA,CAAA,CAAA,OAAA,QAAA6J,KAAAD,CAAA,EACA,MAAA,IAAAtK,MAAA,sDAAA,EAEA,OAAA3H,KAAA0L,YAAAC,UAGA1L,IAAAmQ,EAAApQ,KAAAsQ,YAAA,EACAC,OAAAC,QAAAxQ,KAAA0L,WAAA,EAAAvE,QAAA,CAAA,CAAA6D,EAAA5D,KACAgJ,GAAApF,MAAA5D,IACA,EACAgJ,EAAAlF,EAAAiF,iBAAAC,CAAA,EAGApQ,KAAAmS,OAAA,eAAAjH,EAAAqD,aAAA0D,EAAA,EACAjS,KAAAoL,OAAAgH,KAAA,MAAAhC,CAAA,EACApQ,KAAAyQ,YAAA,EAEAzQ,KAAAqM,SAAArM,KAAAqM,QAAA,EAEArM,KAAAoL,OAAAiH,KAAA,CACA,CAYAC,KAAAL,EAAA,QAEA,GADAA,EAAAA,EAAA5J,YAAA,EACA,CAAA6C,EAAAqD,aAAA2D,KAAAD,CAAA,EACA,MAAA,IAAAtK,MAAA,2DAAA,EAEA1H,IAAAmQ,EAAApQ,KAAAsQ,YAAA,EACAF,EAAAlF,EAAAiF,iBAAAC,CAAA,EAEApQ,KAAAmS,OAAA,eAAAjH,EAAAqD,aAAA0D,EAAA,EAGA,CAAA,OAAA,QAAAC,KAAAD,CAAA,GACA,OAAAjS,KAAA0L,YAAA,UAGAzL,IAAAsS,EAEAA,EADA,SAAAN,EACA/C,KAAAsD,UAAAxS,KAAA0L,WAAA,EACA,SAAAuG,EACA/G,EAAAuH,aAAAzS,KAAA0L,WAAA,EAEAwD,KAAAsD,UAAAxS,KAAA0L,YAAA,SAAA,EAGA1L,KAAAoL,OAAAgH,KAAA,OAAAhC,CAAA,EACApQ,KAAAyQ,YAAA,EAEAzQ,KAAAqM,SAAArM,KAAAqM,QAAA,EAEArM,KAAAoL,OAAAiH,KAAAE,CAAA,CACA,CAQAG,GAAAtC,GAEA,OADApQ,KAAAmL,KAAAiF,EACApQ,IACA,CASAmS,OAAAvO,EAAAC,GAEA,OADA7D,KAAAwL,SAAA5H,GAAAC,EACA7D,IACA,CAQAwK,IAAA+H,GACA,GAAA,UAAA,OAAAA,EACA,MAAA,IAAA5K,MAAA,oDAAA,EAIA,OAFA3H,KAAA0L,YAAA,WAAA6G,EAEAvS,IACA,CASAwO,KAAAA,GACA,IACAzE,EAIA,GALA,UAAA,OAAAyE,IACAzE,EAAAyE,EAAAmE,WAAA,GAAA,EAAAnE,EAAA,IAAAA,EACAA,EAAApL,SAAA0E,eAAAiC,CAAA,GAGA,UAAA,OAAAyE,GAAArO,EAAAqO,CAAA,EAAAxN,GAAA,MAAA,EAOA,OAHAb,EAAAqO,CAAA,EAAAoE,eAAA,EACAzL,QAAA,GAAAnH,KAAA0L,YAAAnL,EAAAuE,MAAAvE,EAAAsD,KAAA,EAEA7D,KANA,MAAA,IAAA2H,MAAA,0CAAA,CAOA,CASA8G,KAAA8D,GAOA,MANA,UAAA,OAAAA,IAAAA,EAAArD,KAAAzG,MAAA8J,CAAA,GAEAhC,OAAAsC,KAAAN,CAAA,EAAApL,QAAA,GACAnH,KAAA0L,YAAA9H,GAAA2O,EAAA3O,EACA,EAEA5D,IACA,CASA8S,WAAAlP,EAAAC,GAEA,OADA7D,KAAAyL,YAAA7H,GAAAC,EACA7D,IACA,CAOA+S,gBACA,OAAA/S,KAAAsL,OACA,CAOA0H,mBACA,OAAAhT,KAAAuL,WACA,CAOA0H,UACA,OAAAjT,KAAAmN,QACA,CAOA0B,aACA,OAAA7O,KAAAoN,WACA,CAOAlD,YACA,OAAAlK,KAAAqN,UACA,CAOA4B,WACA,MAAA,UAAA,OAAAjP,KAAA4L,UAAA5L,KAAA4L,UAAAsD,KAAAzG,MAAAzI,KAAA4L,SAAA,CACA,CAOAsH,cACA,MAAA,UAAA,OAAAlT,KAAA4L,UAAAsD,KAAAsD,UAAAxS,KAAA4L,SAAA,EAAA5L,KAAA4L,SACA,CAOAuH,gBACA,OAAAnT,KAAAqL,SAAArL,KAAAkO,4BAAAlO,KAAAsL,UAAAtL,KAAAmO,SACA,CAOAiF,eACA,OAAApT,KAAAmT,cAAA,GAAAnT,KAAAqN,aAAAnC,EAAA2C,gBACA,CAEA4E,oBAAAlS,GACAN,IAAAoT,EAAA,GACA,IAAA,MAAAzP,KAAArD,EACA8S,MAAAzP,KAAArD,EAAAqD,MAEA,OAAAyP,EAAAhO,UAAA,EAAAgO,EAAAjS,OAAA,CAAA,CACA,CAEA4O,gBAAAE,GACAA,IACAoD,OAAAjQ,SAAA6M,EACA,CAEA,CAEAoD,OAAApI,QAAA,IAAAA,EAQAoI,OAAApI,QAAAuH,aAAA,GAAAvH,EAAAuH,aAAAlS,CAAA,EAOA+S,OAAApI,QAAA8E,SAAA,GAAA9E,EAAA8E,SAAAE,CAAA,CAEA,GAAA,GChvBA,WACAqD,EAEAC,IACAC,QAEAC,WAAA,CAAA,EACAC,QAAA,CAAA,EACAC,YAAA,CAAA,EAGAC,MAEAC,OACAC,OACAC,KAEAC,QACAC,QACAC,UACAC,QACAC,OACAC,QAEAC,aACAC,YACAC,aACAC,cACAC,iBACAC,iBAKA9U,YAAAiK,GACA/J,KAAAwT,IAAAzJ,EACA/J,KAAAyT,QAAA,cAAA1J,EACAvG,IAAAqR,IAAA,IAAA7U,KAAA8U,WAAA,CAAA,CACA,CAEAC,oBACA,GAAA/U,KAAA0T,WAAA,MAAA,IAAA/L,MAAA,2CAAA,CACA,CAEAmN,aACA,IAAAE;6CACAhV,KAAAyT;;;;;;;;;;;;;;;;;wBA0BAwB,GARA9U,EAAA,MAAA,EAAA+U,QAAAF,CAAA,EAEAhV,KAAAiU,QAAA9T,EAAA,IAAAH,KAAAyT,OAAA,EAEAzT,KAAA8T,OAAAtQ,IAAA2R,WAAA,wBAAAnV,KAAAiU,OAAA,EACAjU,KAAAmU,UAAA3Q,IAAA2R,WAAA,oBAAAnV,KAAAiU,OAAA,EACAjU,KAAAkU,QAAA1Q,IAAA2R,WAAA,kBAAAnV,KAAAiU,OAAA,EAEAzQ,IAAA4R,cAAA,kBAAApV,KAAAiU,OAAA,GACAjU,KAAAoU,QAAAa,EAAA,GACAjV,KAAAqU,OAAAY,EAAA,GACAjV,KAAAsU,QAAAW,EAAA,EACA,CAEAI,SAAAC,EAAAC,EAAAC,GAEAxV,KAAAuU,cAAAvU,KAAAwU,aAKArU,EAAAH,KAAAoU,OAAA,EAAAtS,KAAA,EACA3B,EAAAH,KAAAqU,MAAA,EAAAvS,KAAA,EACA3B,EAAAH,KAAAsU,OAAA,EAAAvS,KAAA,IANA5B,EAAAH,KAAAoU,OAAA,EAAArS,KAAA,EACA5B,EAAAH,KAAAqU,MAAA,EAAAtS,KAAA,EACA5B,EAAAH,KAAAsU,OAAA,EAAAxS,KAAA,GAQA7B,IAAAwV,EAAAjS,IAAA2R,WAAA,wBAAAnV,KAAAiU,OAAA,EAMAyB,GALAvV,EAAAsV,CAAA,EAAAE,IAAA,QAAAL,CAAA,EACAnV,EAAAsV,CAAA,EAAAE,IAAA,SAAAJ,CAAA,EAEApV,EAAAH,KAAAkU,OAAA,EAAAyB,IAAA,UAAAH,CAAA,EAEAhS,IAAA2R,WAAA,qBAAAnV,KAAAiU,OAAA,GACAzQ,IAAAoS,iBAAAF,CAAA,CACA,CAEAG,cACAC,eAAAC,MAAA/V,KAAA6T,KAAA,EAEA5T,IAAAkB,EAAAqC,IAAA2R,WAAA,wBAAAnV,KAAAiU,OAAA,EACAzQ,IAAAwS,UAAAhW,KAAA6T,MAAA,4BAAA1S,CAAA,EAEAA,EAAAqC,IAAA2R,WAAA,oBAAAnV,KAAAiU,OAAA,EACAzQ,IAAAwS,UAAAhW,KAAA6T,MAAA,wBAAA1S,CAAA,EAEAA,EAAAqC,IAAA2R,WAAA,wBAAAnV,KAAAiU,OAAA,EACAzQ,IAAAwS,UAAAhW,KAAA6T,MAAA,4BAAA1S,CAAA,EAEAA,EAAAqC,IAAA2R,WAAA,kBAAAnV,KAAAiU,OAAA,EACAzQ,IAAAwS,UAAAhW,KAAA6T,MAAA,sBAAA1S,CAAA,CACA,CAEA8U,wBACA9V,EAAAH,KAAA8T,MAAA,EAAAoC,GAAA,QAAA,IAAAlW,KAAAmW,QAAA,CAAA,CACA,CAEAC,kBACAjW,EAAAH,KAAAoU,OAAA,EAAA8B,GAAA,QAAA,KAAAlW,KAAAqW,kBAAA,CAAA,CAAA,CAAA,EACAlW,EAAAH,KAAAqU,MAAA,EAAA6B,GAAA,QAAA,KAAAlW,KAAAqW,kBAAA,CAAA,CAAA,CAAA,CAAA,EACAlW,EAAAH,KAAAsU,OAAA,EAAA4B,GAAA,QAAA,KAAAlW,KAAAqW,kBAAA,CAAA,CAAA,CAAA,CACA,CAEAA,kBAAAC,GACA,IAAAA,GAAAtW,KAAAyU,aAAAzU,KAAAyU,aAAA,EACA,IAAA6B,GAAAtW,KAAAuU,aAAAvU,KAAAuU,aAAA,EACAvU,KAAAwU,aAAAxU,KAAAwU,YAAA,CACA,CAEA+B,mBACAtW,IAAAuW,EAAAhT,IAAA2R,WAAA,wBAAAnV,KAAAiU,OAAA,EACAjU,KAAA4T,YACAzT,EAAAqW,CAAA,EAAA5U,OAAA,GAAA,EADAzB,EAAAqW,CAAA,EAAA3U,QAAA,GAAA,CAEA,CAEA4U,eAEAxW,IAAAyW,EAAA1W,KAAA+T,QAAA,kBACA5T,EAAAH,KAAAmU,SAAA,EAAA5S,KAAAmV,CAAA,CACA,CAQAC,IAAA5T,GAGA,OAFA/C,KAAAuU,aAAAxR,EACA/C,KAAAyU,aAAA,KACAzU,IACA,CAQA4W,GAAA7T,GAGA,OAFA/C,KAAAwU,YAAAzR,EACA/C,KAAAyU,aAAA,KACAzU,IACA,CAQA6W,YAAA9T,GAEA,OADA/C,KAAAyU,aAAA1R,EACA/C,IACA,CAQA8W,OAAA/T,GAEA,OADA/C,KAAA0U,cAAA3R,EACA/C,IACA,CAQA+W,UAAAhU,GAEA,OADA/C,KAAA2U,iBAAA5R,EACA/C,IACA,CASAgX,cAAArR,GACA3F,KAAA4T,aAAA5T,KAAAmW,QAAA,CACA,CAQAc,UAAAlU,GAEA,OADA/C,KAAA4U,iBAAA7R,EACA/C,IACA,CAQA0W,MAAAA,GAEA,OADA1W,KAAA+T,OAAA2C,EACA1W,IACA,CAQAiT,IAAAA,GAEA,OADAjT,KAAAgU,KAAAf,EACAjT,IACA,CAEAkX,MAAAC,GACAnX,KAAA+U,kBAAA,EAEA9U,GAAA,CAAAmX,EAAAA,EAAA,IAAAC,EAAAA,EAAA,OAAAC,IAAAA,EAAA,OAAAC,WAAAA,EAAA,CAAA,CAAA,EAAAJ,EAWAlE,GAVAjT,KAAA4T,YAAA2D,EAEAvX,KAAAqV,SAAA+B,EAAAC,EAAAC,CAAA,EACAtX,KAAAiW,sBAAA,EACAjW,KAAAoW,gBAAA,EACApW,KAAA6V,YAAA,EAEA7V,KAAAuW,iBAAA,EACAvW,KAAAyW,aAAA,EAEAzW,KAAAgU,MAAA,sBACA7T,EAAAH,KAAAkU,OAAA,EAAA3S,KAAA0R,CAAA,EAEA6C,eAAA0B,QAAAxX,IAAA,EACAG,EAAAH,KAAAiU,OAAA,EAAArS,OAAA,GAAA,EAEA5B,KAAA2T,QAAA,CAAA,CACA,CAWA7R,KAAAqV,EAAA,IACArB,eAAA2B,SAAA,EAEAjU,IAAAkU,SAAA,IAAA,IAAA1X,KAAAkX,MAAAC,CAAA,CAAA,EACAnX,KAAAkX,MAAAC,CAAA,CACA,CAOAQ,cACA3X,KAAA2T,QAAA,CAAA,EACA3T,KAAA6V,YAAA,EACA1V,EAAAH,KAAAiU,OAAA,EAAArS,OAAA,GAAA,EACA5B,KAAA4U,kBAAA5U,KAAA4U,iBAAA,CACA,CAKA7S,OACA/B,KAAA+U,kBAAA,EACA/U,KAAA2T,QAAA,CAAA,EACAxT,EAAAH,KAAAiU,OAAA,EAAApS,QAAA,GAAA,EACA7B,KAAA0U,eAAA1U,KAAA0U,cAAA,CACA,CAKAyB,UACAnW,KAAA0T,aACA1T,KAAA0T,WAAA,CAAA,EAEAoC,eAAA8B,QAAA5X,IAAA,EACAG,EAAAH,KAAAiU,OAAA,EAAApS,QAAA,GAAA,EAGA1B,EAAAH,KAAAiU,OAAA,EAAA4D,OAAA,EAEA7X,KAAA2U,kBAAA3U,KAAA2U,iBAAA,EACA,CAOA4C,aAEA,OADAvX,KAAA4T,YAAA,CAAA,EACA5T,IACA,CAOA8X,gBAEA,OADA9X,KAAA4T,YAAA,CAAA,EACA5T,IACA,CAOA+X,OAEA,OADA/X,KAAA6T,MAAA,CAAA,EACA7T,IACA,CAOAgY,QAEA,OADAhY,KAAA6T,MAAA,CAAA,EACA7T,IACA,CAEA+J,SACA,OAAA/J,KAAAwT,GACA,CAOAyE,OAAAhF,GACAjT,KAAAgU,KAAAf,EACA9S,EAAAH,KAAAkU,OAAA,EAAA3S,KAAA0R,CAAA,CACA,CAOAiF,SAAAxB,GACA1W,KAAA+T,OAAA2C,EACA1W,KAAAyW,aAAA,CACA,CAKA0B,WACAnY,KAAA6T,MAAA,CAAA,EACA7T,KAAA6V,YAAA,CACA,CAKAuC,YACApY,KAAA6T,MAAA,CAAA,EACA7T,KAAA6V,YAAA,CACA,CAKAwC,iBACArY,KAAA4T,YAAA,CAAA,EACA5T,KAAAuW,iBAAA,CACA,CAKA+B,oBACAtY,KAAA4T,YAAA,CAAA,EACA5T,KAAAuW,iBAAA,CACA,CAOAgC,WAAAC,GACAvY,IAAAwY,EACA,QAAAD,EAAAC,EAAAzY,KAAAoU,QACA,OAAAoE,EAAAC,EAAAzY,KAAAqU,OACA,OAAAmE,IAAAC,EAAAzY,KAAAsU,SACAmE,GAAAtY,EAAAsY,CAAA,EAAA5W,QAAA,GAAA,CACA,CAOA6W,WAAAF,GACAvY,IAAAwY,EACA,QAAAD,EAAAC,EAAAzY,KAAAoU,QACA,OAAAoE,EAAAC,EAAAzY,KAAAqU,OACA,OAAAmE,IAAAC,EAAAzY,KAAAsU,SACAmE,GAAAtY,EAAAsY,CAAA,EAAA7W,OAAA,GAAA,CACA,CAEA,CAQA0R,OAAAC,OAAA,GAAA,IAAAA,EAAAxJ,CAAA,CAEA,GAAA,QCjbA4O,cAqBAC,aAAA,YAGAC,aAAA,SAGAC,cAAA,eAGAC,cAAA,cAGAC,cAAA,aAGAC,cAAA,aAGAC,eAAA,iBAGAC,eAAA,eAGAC,eAAA,gBAGAC,gBAAA,kBAGAC,gBAAA,kBAGAC,iBAAA,mBAGAC,oBAAA,uBAGAC,oBAAA,uBAGAC,MAGAC,QAAA,GAGAC,QAEAC,QAAA,WACAC,SAAA,WAEAC,SAAA,QACAC,UAAA,MAEAC,OAAA,CAAA,EACAC,QAAA,CAAA,EACAC,YAAA,CAAA,EAEAC,cAAA,IACAja,EAAAgB,CAAA,EACAkZ,QAAA,CAAAC,QAAA,KAAA,EAAA,GAAA,EACAD,QAAA,CAAAC,QAAA,GAAA,EAAA,GAAA,EACAD,QAAA,CAAAC,QAAA,KAAA,EAAA,GAAA,EACAD,QAAA,CAAAC,QAAA,GAAA,EAAA,GAAA,CACA,EAGAC,WAAA,CAAA,EAIAC,kBAAArZ,GACAlB,IAAA4D,EAAA1C,EAAA4I,IAAA5I,EAAA2D,KAEA,OADAjB,EAAAA,EAAA4W,WAAA,KAAA,GAAA,GACAC,WAAA,CAAA,CAAA,CACA,CAIAC,gBAAAxZ,GACAlB,IAAA0C,EAAAxC,EAAAgB,EAAAmC,GAAA,EAAAsX,KAAA,MAAA,EACA,MAAA,UAAAjY,EACAxC,iBAAAgB,EAAA2D,gBAAA,EAAA+V,IAAA,GACA,aAAAlY,GACAxC,CAAAA,CAAAA,EAAAgB,EAAAmC,GAAA,EAAAtC,GAAA,UAAA,IACAb,EAAAgB,EAAAmC,GAAA,EAAAuX,IAAA,CACA,CAWA/a,YAAA0O,EAAA3D,EAAA,CAAA,GAGA,GAAA,CAAA1K,EAAAqO,CAAA,EAAAxN,GAAA,MAAA,GAAA,UAAA,OAAAwN,EACA,MAAA,IAAA7G,MAAA,sDAAA,EAIA,GADA3H,KAAA0Z,MAAAlW,IAAAsX,MAAAtM,CAAA,EACAhL,IAAAC,QAAAzD,KAAA0Z,KAAA,GAAA,OAAA1Z,KAAA0Z,MAAA,MAAA,IAAA/R,MAAA,sCAAA,EAKAxH,EAAAH,KAAA0Z,KAAA,EAAAqB,OAAA,GAAAC,EAAApV,eAAA,CAAA,EAEA5F,KAAA4Z,QAAA/O,CACA,CAsBAoQ,WAAAC,IAEAA,EAAAC,MAAAC,QAAAF,EAAA,EAAA,EAAAA,EAAA,GAEAA,GAAA/T,QAAA,IAEAlH,IAAAqD,EAAAnD,EAAAH,KAAA0Z,KAAA,EAAArZ,KAAA,IAAAgb,EAAAtR,EAAA,EAAA,GAEAvG,IAAAC,QAAAH,CAAA,GAAA+X,EAAAnJ,KAAA,MAAA,IACA5O,EAAAnD,EAAAH,KAAA0Z,KAAA,EAAArZ,cAAAgb,EAAAvW,OAAA,GAEAtB,IAAAC,QAAAH,CAAA,EACA8L,QAAAC,KAAA,oDAAA,GAKAgM,EAAA,IAAA/X,EAEA+X,EAAA,GAAA,CAAA,EACAA,EAAA,UAAA,CAAA,EACAA,EAAA,IAAAA,EAAAtR,IAAAsR,EAAAvW,KAEA9E,KAAAsb,aAAAD,CAAA,EAGArb,KAAA2Z,QAAA4B,KAAAF,CAAA,EACA,CAAA,CACA,CAKAC,aAAAna,GACAlB,IAAAqD,EAAAnC,EAAAmC,IACAkY,EAAArb,EAAAmD,CAAA,EAAAmY,KAAA,UAAA,EAAApT,YAAA,EACAqT,EAAAvb,EAAAmD,CAAA,EAAAsX,KAAA,MAAA,EAEAza,EAAAmD,CAAA,EAAA4S,GAAA,OAAA,IAAAyC,cAAAgD,mBAAAxa,EAAAnB,KAAA4b,OAAA,CAAA,EAEA,UAAAF,GAAA,aAAAA,GAAA,WAAAF,EACArb,EAAAmD,CAAA,EAAAuY,OAAA,IAAA7b,KAAA4b,QAAAza,CAAA,CAAA,EAEAhB,EAAAmD,CAAA,EAAAwY,MAAA,KAAA3a,EAAA4a,WAAA/b,KAAA4b,QAAAza,CAAA,CAAA,CAAA,CACA,CAEAya,QAAA,IAEA3b,IAAAub,EAAArb,EAAAgB,EAAAmC,GAAA,EAAAmY,KAAA,UAAA,EAAApT,YAAA,EACA2T,EAAA7a,EAAAwB,KACAsZ,EAAA9b,EAAAgB,EAAAmC,GAAA,EAAAsX,KAAA,MAAA,EAEA3a,IAAAic,EAGA,WAAAV,GACA,KAAA7C,cAAAgC,UAAAxZ,CAAA,EACAA,EAAA+a,GAAAlc,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,mBAAA,GAKA,UAAA6a,GAAA,UAAAC,EAAAC,EAAAlc,KAAAoc,OAAAjb,CAAA,EACA,QAAA6a,EAAAE,EAAAlc,KAAAqc,KAAAlb,CAAA,EACA,QAAA6a,EAAAE,EAAAlc,KAAAsc,KAAAnb,CAAA,EACA,UAAA6a,IAAAE,EAAAlc,KAAAuc,OAAApb,CAAA,GAGA+a,GAAA/a,EAAA+Q,KAAA,SAAA,IAAAgK,EAAAlc,KAAAwc,SAAArb,CAAA,GAEAA,EAAA+a,GAAAA,EACA,EAOAP,yBAAAxa,EAAAsb,GACAtb,EAAA4a,UAAA,CAAA,EACA5a,EAAAkZ,QAAA,CAAA,EACAlZ,EAAA+a,IAAAO,EAAAtb,CAAA,CACA,CAEAib,OAAA,IACAnc,IAAA4D,EAAA8U,cAAAgC,UAAAxZ,CAAA,EACA,OAAAqC,IAAAkZ,MAAA7Y,CAAA,GAGAyS,EADA,6BACAqG,KAAA9Y,CAAA,EAEA7D,KAAAmc,SAAA7F,EAAAnV,EADAmV,EAAA,kBAAA,gBACA,GALAtW,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,iBAAA,CAMA,EAEAkb,KAAA,IACApc,IAAA4D,EAAA8U,cAAAgC,UAAAxZ,CAAA,EAEA,OAAAqC,IAAAkZ,MAAA7Y,CAAA,GAEAA,EAAAA,EAAA6G,KAAA,EAEA1K,CAAAA,CAAAA,KAAA4c,UAAAzb,EAAA0C,CAAA,GACA7D,CAAAA,CAAAA,KAAA6c,eAAA1b,EAAA0C,CAAA,GACA7D,KAAAmc,SAAA,CAAA,EAAAhb,EAAAwX,cAAA6B,YAAArZ,CAAA,EAAA,YAAA,GANAnB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,gBAAA,CAOA,EAEAmb,KAAA,IACArc,IAAA4D,EAAA8U,cAAAgC,UAAAxZ,CAAA,EAGA,OAAAqC,IAAAkZ,MAAA7Y,CAAA,EAIA,EADAA,EAAAiZ,QAAA,SAAA,EAAA,EACA1b,OAAApB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,iBAAA,GAGA0C,EAAAc,SAAAd,CAAA,EAEAkZ,OAAAC,cAAAnZ,CAAA,EACA7D,CAAAA,CAAAA,KAAA4c,UAAAzb,EAAA0C,CAAA,GACA7D,CAAAA,CAAAA,KAAAid,YAAA9b,EAAA0C,CAAA,GACA7D,CAAAA,CAAAA,KAAA6c,eAAA1b,EAAA0C,CAAA,GACA7D,KAAAmc,SAAA,CAAA,EAAAhb,EAAAwX,cAAA6B,YAAArZ,CAAA,EAAA,YAAA,EAJAnB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,qBAAA,GATAnB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,iBAAA,CAcA,EAEAob,OAAA,IACAtc,IAAA4D,EAAA8U,cAAAgC,UAAAxZ,CAAA,EAGA,OAAAqC,IAAAkZ,MAAA7Y,CAAA,GAGA,MAAAA,EAAAuG,MAAA,KAAA,IAAAvG,GAAA,MAEA,IAAAA,EAAA4W,WAAA,cAAA,EAAA,EAAArZ,OAAApB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,gBAAA,EAEAnB,CAAAA,CAAAA,KAAA4c,UAAAzb,EAAA0C,CAAA,GAEA7D,CAAAA,CAAAA,KAAAid,YAAA9b,EAAA0C,CAAA,IAEA1C,EAAA+Q,KAAA,OAAA,GACArO,EAAAoB,MAAA,GAAA,EAAA,GAAA7D,SAAAD,EAAA,MACAnB,KAAAmc,SAAA,CAAA,EAAAhb,iCAAAA,EAAA,QAAA,EAGAnB,CAAAA,CAAAA,KAAA6c,eAAA1b,EAAA0C,CAAA,GACA7D,KAAAmc,SAAA,CAAA,EAAAhb,EAAAwX,cAAA6B,YAAArZ,CAAA,EAAA,YAAA,IAjBAnB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,iBAAA,CAkBA,EAEAqb,SAAA,IACAvc,IAAA4D,EAAA8U,cAAAgC,UAAAxZ,CAAA,EACA,OAAAqC,IAAAkZ,MAAA7Y,CAAA,EACA,IAAAA,EAAA4W,WAAAtZ,EAAA+b,QAAA,EAAA,EAAA9b,OAAApB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,gBAAA,EACAnB,KAAAmc,SAAA,CAAA,EAAAhb,EAAAwX,cAAA6B,YAAArZ,CAAA,EAAA,YAAA,EAFAnB,KAAAmc,SAAA,CAAA,EAAAhb,EAAA,iBAAA,CAGA,EAIAgb,SAAA7F,EAAAnV,EAAA8R,GACAhT,IAAA4K,EAAA1J,EAAA+Q,KAAA,QAAA,EAAA/Q,EAAA0J,OAAA7K,KAAA4Z,QACAjY,EAAA2U,EAAAtW,KAAA6Z,QAAA7Z,KAAA8Z,SACAqD,EAAA7G,EAAAtW,KAAA+Z,SAAA/Z,KAAAga,UAGAoD,EAAAjd,EAAAgB,EAAAmC,GAAA,EAAA+Z,KAAA,EAAAC,SAAA,cAAA,EACAC,EAAApc,EAAA+Q,KAAA,QAAA,EAaAsL,GAXAJ,GAAAG,CAAAA,IACAE,EAAA5S,EACA,2EACA,8DAGA0S,EAAApd,EAAA,IAAAgB,EAAA,MAAA,EAAAI,KAAAkc,CAAA,EACAtd,EAAAgB,EAAAmC,GAAA,EAAAoa,MAAAD,CAAA,GAIAF,EAAApd,EAAA,IAAAgB,EAAA,MAAA,EAAAhB,EAAAgB,EAAAmC,GAAA,EAAA+Z,KAAA,GAGAM,EAAAxd,EAAAqd,CAAA,EAAAnd,KAAA,MAAA,EACAud,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAWA,MAVA,CAAA3d,KAAAka,SAAA/Y,EAAA2c,QAAA,QAAA,GAAA3d,EAAAyd,CAAA,EAAArc,KAAAI,CAAA,EACA,CAAA3B,KAAAia,QAAA9Y,EAAA2c,QAAA,OAAA,GAAA3d,EAAA0d,CAAA,EAAAtc,KAAA0R,CAAA,EACA9S,EAAAqd,CAAA,EAAA7H,IAAA,QAAAwH,CAAA,EAGAhc,EAAA+Q,KAAA,SAAA,GAAA,CAAAoE,IACAtW,KAAAma,aAAAna,KAAAoa,cAAAoD,CAAA,EACArc,EAAA4c,MAAA,SAAA,GAGAzH,CACA,CAEAsG,UAAAzb,EAAA0C,GACA,YAAA,OAAAA,GAAAwE,YAAA,IAAAxE,EAAA8M,OAAA9M,CAAA,GAEA5D,IAAA+d,EAAA7c,EAAA8c,QAAA,EACAC,EAAA/c,EAAAgd,QAAA,CAAA,EAEA,OAAAta,EAAAzC,OAAA4c,EAAAhe,KAAAmc,SAAA,CAAA,EAAAhb,aAAA6c,cAAA,EACAE,EAAA,CAAA,IAAAA,GAAAra,EAAAzC,OAAA8c,IAAAle,KAAAmc,SAAA,CAAA,EAAAhb,gCAAA+c,IAAA,CAEA,CAEAjB,YAAA9b,EAAA0C,GACA5D,IAAA+d,EAAA7c,EAAA6c,KAAA,EACAE,EAAA/c,EAAA+c,KAAA,CAAA,EAEA,OAAAra,EAAAma,EAAAhe,KAAAmc,SAAA,CAAA,EAAAhb,wBAAA6c,IAAA,EACAE,EAAA,CAAA,IAAAA,GAAAA,EAAAra,IAAA7D,KAAAmc,SAAA,CAAA,EAAAhb,2BAAA+c,IAAA,CAEA,CAEArB,eAAA1b,EAAA0C,GACA5D,IAAAme,EAAA,CAAA,EACA,GAAAjd,CAAAA,EAAA+Q,KAAA,QAAA,EAOA,MAAA,CAAA,EANA,IAAA,MAAAmM,KAAAld,EAAA,OACA,GAAAkd,IAAAxa,EAAA,CACAua,EAAA,CAAA,EACA,KACA,CAGAne,IAAAgT,EAAA,aAAA9S,EAAAgB,EAAAmC,GAAA,EAAAsX,KAAA,MAAA,EAAA,wBAAA,4BACA,MAAAwD,CAAAA,CAAAA,GAAApe,KAAAmc,SAAA,CAAA,EAAAhb,EAAA8R,CAAA,CAEA,CAQA8H,SACA5a,EAAAH,KAAA0Z,KAAA,EAAA4E,IAAA,QAAA,EACAne,EAAAH,KAAA0Z,KAAA,EAAAqB,OAAA,EACA5a,EAAAH,KAAA0Z,KAAA,EAAAxD,GAAA,QAAA,CACA,CAOAqI,WAaA,OAXAve,KAAAua,WAAA,CAAA,EAEAva,KAAA2Z,QAAAxS,QAAA,IACA3D,IAAAC,QAAAtC,EAAAmC,GAAA,IAEAnC,EAAAkZ,QAAA,CAAA,EACAlZ,EAAA4a,UAAA,CAAA,EACA/b,KAAA4b,QAAAza,CAAA,EACAnB,KAAAua,aAAAva,KAAAua,WAAApZ,EAAA+a,IACA,CAAA,EAEAlc,KAAAua,UACA,CAOAiE,SAAA,OAAAxe,KAAAka,QAAA,CAAA,EAAAla,IAAA,CAOAye,QAAA,OAAAze,KAAAia,OAAA,CAAA,EAAAja,IAAA,CAQA0e,OAAAnd,GAAA,OAAAvB,KAAA6Z,QAAAtY,EAAAvB,IAAA,CAQA2e,QAAApd,GAAA,OAAAvB,KAAA8Z,SAAAvY,EAAAvB,IAAA,CAOA4e,YAAA,OAAA5e,KAAAma,YAAA,CAAA,EAAAna,IAAA,CAQA6e,QAAApC,GAAA,OAAAzc,KAAAoa,cAAAqC,EAAAzc,IAAA,CAQA8e,SAAA3B,GAAA,OAAAnd,KAAAga,UAAAmD,EAAAnd,IAAA,CAQA+e,QAAA5B,GAAA,OAAAnd,KAAA+Z,SAAAoD,EAAAnd,IAAA,CAEA,EC3fA,WAEAgf,EAEAC,UAAA,GAEA5J,SAAAlU,GAEA,GAAA,EADAA,EAAAqC,IAAAsX,MAAA3Z,CAAA,GACA,MAAA,IAAAwG,MAAA,6BAAAxG,CAAA,EAKAlB,IAAA8J,EAAA5J,EAAAgB,CAAA,EAAAyZ,KAAA,IAAA,EACA7Q,IACAA,EAAA,UAAAiV,EAAAE,QAAA,EACA/e,EAAAgB,CAAA,EAAAyZ,KAAA,KAAA7Q,CAAA,GAIA9J,IAAAM,EAAA,GAgBA,OAdAA,EAAAwJ,GAAAA,EACAxJ,EAAAM,OAAAM,EACAZ,EAAAoB,KAAA6B,IAAA2R,WAAA,iBAAAhU,CAAA,EACAZ,EAAA4e,SAAAhf,EAAAI,EAAAoB,IAAA,EAAAJ,KAAA,EAGApB,EAAAI,EAAAM,MAAA,EAAAwZ,QAAA,CAAAC,QAAA,EAAA,CAAA,EAGAna,EAAAI,EAAAM,MAAA,EAAA+Z,KAAA,WAAA,MAAA,EAGA5a,KAAAif,UAAAlV,GAAAxJ,CAGA,CAEA6e,QAAAje,GAGA,GAAA,EAFAA,EAAAqC,IAAAsX,MAAA3Z,CAAA,GAEA,MAAA,IAAAwG,MAAA,gEAAA,EAEAoC,EAAA5J,EAAAgB,CAAA,EAAAyZ,KAAA,IAAA,EACA,GAAA,CAAA7Q,EAAA,MAAA,IAAApC,MAAA,mDAAA,EAEA,GAAA3H,KAAAif,UAAAnB,QAAA/T,CAAA,EAAA,MAAA,IAAApC,MAAA,8CAAA,EAEA,OAAA3H,KAAAif,UAAAlV,EACA,CAEAsV,OAAAle,EAAAQ,EAAA2d,GACA/e,EAAAP,KAAAqV,SAAAlU,CAAA,EAGAZ,EAAAgf,UAAAD,EAGAnf,EAAAI,EAAAoB,IAAA,EAAAlB,SAAA6e,CAAA,EAGAnf,EAAAI,EAAAoB,IAAA,EAAAJ,KAAAI,CAAA,CACA,CAYA6d,MAAAre,EAAAQ,EAAA,kBAAA3B,KAAAqf,OAAAle,EAAAQ,EAAA,gBAAA,CAAA,CAaA8d,KAAAte,EAAAQ,EAAA,QAAA3B,KAAAqf,OAAAle,EAAAQ,EAAA,eAAA,CAAA,CAEA+d,MAAAve,EAAAQ,EAAA,YAAA3B,KAAAqf,OAAAle,EAAAQ,EAAA,EAAA,CAAA,CAUAge,QAAAxe,GACAZ,EAAAP,KAAAof,QAAAje,CAAA,EAGAhB,EAAAI,EAAAoB,IAAA,EAAArB,YAAAC,EAAAgf,SAAA,EAGApf,EAAAI,EAAAoB,IAAA,EAAAJ,KAAAhB,EAAA4e,QAAA,EAGAhf,EAAAI,EAAAM,MAAA,EAAAwZ,QAAA,CAAAC,QAAA,GAAA,CAAA,EAGAna,EAAAI,EAAAM,MAAA,EAAA+e,WAAA,UAAA,CACA,CAEAV,cAAA,KAAA,IAAAlb,MAAA6b,QAAA,CAEA,CAEAvM,OAAA0L,KAAA,IAAAA,CAEA,GAAA,QC5GAxb,IASAqR,WAAA4H,GACA,aAAArZ,SAAAwL,WAAA6N,EAAA,EACAnJ,OAAArL,iBAAA,OAAA,IAAAwU,EAAA,CAAA,CACA,CASA/E,gBAAAoI,EAAArD,GACAxc,IAAA8D,EAAA,IAAA+b,EACAC,EAAAtD,EACAjZ,IAAAqR,IAAA,IAAAmL,WAAAD,EAAAhc,CAAA,CAAA,CACA,CAYAzC,aAAAH,EAAAsb,GACAjZ,IAAAqR,IAAA,KACA,IAGA9K,EAHAoR,MAAAC,QAAAja,CAAA,EACAA,EAAAA,EAAA,GACA,UAAA,OAAAA,IACA4I,EAAA,MAAA5I,EAAA,GAAAA,EAAAkE,UAAA,CAAA,EAAAlE,EACAA,EAAAiC,SAAA0E,eAAAiC,CAAA,GAGA,MAAA5I,GACAA,EAAA8G,iBAAA,QAAA,GAAAwU,EAAA9W,CAAA,CAAA,CACA,CAAA,CACA,CAEAsa,aAAA,GAAA9Q,KAAAA,IAAA0L,EAEApX,eAAA,GAAA0L,KAAAA,IAAA0L,EAEA6B,aAAA,GAAA,EAAA,CAAA7B,GAAA,IAAAA,EAAAzZ,QAEA8e,gBAAA,GAAA,IAAA/f,EAAAgB,CAAA,EAAAC,OAEA0Z,aAAAD,EAAAsF,EAAA/c,UACA,MAAA,UAAA,OAAAyX,EAAAA,GACAA,EAAA,MAAAA,EAAA,GAAAA,EAAAxV,UAAA,CAAA,EAAAwV,EACAsF,EAAArY,eAAA+S,CAAA,EACA,CAWA9Q,UAAAA,EAAAqW,EAAA,MACA,GAAA5c,IAAA0c,SAAAnW,CAAA,EAAA,CACA9J,IAAAiF,EAAA/E,EAAA4J,CAAA,EAAA6Q,KAAA,IAAA,EAKA,OAJApX,IAAAC,QAAAyB,CAAA,GAAA,OAAAkb,IACAjgB,EAAA4J,CAAA,EAAA6Q,KAAA,KAAAwF,CAAA,EACAlb,EAAAkb,GAEAlb,CACA,CAEA,GAAA,UAAA,OAAA6E,EACA,OAAAA,EAAA4I,WAAA,GAAA,EAAA5I,EAAA1E,UAAA,CAAA,EACA0E,EAGA,MAAA,IAAApC,MAAA,gFAAA,CACA,CAUA0Y,cAAA,CAAA9c,EAAA+c,IAAAC,KAAAC,MAAAD,KAAAF,OAAA,EAAAC,CAAA,EAAA/c,EAEAkd,mBAAA,GAAAtgB,EAAA,IAAA4J,CAAA,EAAA2W,WAAA,CAAAC,WAAA,UAAA,CAAA,EAQAC,aAAAC,GAEA,IADAA,GAAA,IAAA7c,MAAA6b,QAAA,EAAA,IAAAgB,IACA,IAAA,IAAA7c,MAAA6b,QAAA,GAAAgB,EAAA,KACA,CAEA1L,kBAAA,CAAA2L,EAAAjgB,IAAAV,EAAAU,CAAA,EAAAR,KAAA,GAAAygB,CAAA,EAAA,GAEA1L,qBAAA,CAAArL,EAAAlJ,IAAAV,EAAAU,CAAA,EAAAR,KAAA,GAAA0J,CAAA,EAAA3J,SAAA,EAEA0S,kBAAAlP,EAAAY,GAEAX,EADA,IAAAV,IAAAC,SAAAC,QAAA,EAAA0d,aACA/O,IAAApO,CAAA,EACA,OAAA,MAAAC,EAAAA,EAAAW,CACA,CAEAwc,kBAGA,MAAA,GAFAhd,KAAAid,IAAA,EAAAC,SAAA,EACAlhB,KAAAqgB,OAAA,EAAA,GAAA,CAEA,CAEArK,iBAAAmL,EAAAC,EAAAjgB,GACAggB,EAAAhhB,EAAAgB,CAAA,EAAAV,SAAA2gB,CAAA,EACAjhB,EAAAgB,CAAA,EAAAb,YAAA8gB,CAAA,CACA,CAEAC,0BAEA/N,OAAApM,IAAA,GAAAkI,QAAAlI,IAAA+L,CAAA,EACAK,OAAAjE,KAAA,GAAAD,QAAAC,KAAA4D,CAAA,EACAK,OAAAgO,IAAA,GAAAlS,QAAAE,MAAA2D,CAAA,EACAK,OAAAiO,KAAA,GAAAnS,QAAAmS,KAAAtO,CAAA,EAEA1C,OAAAiR,eAAArG,MAAAsG,UAAA,OAAA,CACA5d,MAAA,SAAA6d,GACA,GAAAvS,KAAAA,IAAAuS,EAAA,MAAA,IAAA/Z,MAAA,yBAAA,EACA,MAAA,CAAA,IAAA3H,KAAAsF,QAAAoc,CAAA,CACA,EACAC,SAAA,CAAA,EACAC,aAAA,CAAA,CACA,CAAA,EAEArR,OAAAiR,eAAArG,MAAAsG,UAAA,UAAA,CACA5d,MAAA,SAAA6d,GACA,GAAAvS,KAAAA,IAAAuS,EAAA,MAAA,IAAA/Z,MAAA,yBAAA,EACA,MAAA,CAAA,IAAA3H,KAAAsF,QAAAoc,CAAA,CACA,EACAC,SAAA,CAAA,EACAC,aAAA,CAAA,CACA,CAAA,EAEArR,OAAAiR,eAAArG,MAAAsG,UAAA,QAAA,CACA5d,MAAA,SAAA6d,GACAzhB,IAEA4D,EAFA3C,EAAAlB,KAAAsF,QAAAoc,CAAA,EACA,OAAAxgB,EAAA,EAAA,MACA2C,EAAA7D,KAAAkB,GACAlB,KAAA6hB,OAAA3gB,EAAA,CAAA,EACA2C,EACA,EAAA8d,SAAA,CAAA,EAAAC,aAAA,CAAA,CACA,CAAA,EAEArR,OAAAiR,eAAArG,MAAAsG,UAAA,UAAA,CACA5d,MAAA,SAAA3C,GACA,IACA2C,EADA,MAAA,UAAA,OAAA3C,GAAAA,EAAA,EAAA,MACA2C,EAAA7D,KAAAkB,GACAlB,KAAA6hB,OAAA3gB,EAAA,CAAA,EACA2C,EACA,EAAA8d,SAAA,CAAA,EAAAC,aAAA,CAAA,CACA,CAAA,EAEArR,OAAAiR,eAAAjR,OAAAkR,UAAA,OAAA,CACA5d,MAAA,SAAAD,GACA,GAAAuL,KAAAA,IAAAvL,EAAA,MAAA,IAAA+D,MAAA,yBAAA,EACA,OAAA3H,KAAA8hB,eAAAle,CAAA,CACA,EACA+d,SAAA,CAAA,EACAC,aAAA,CAAA,CACA,CAAA,EAEArR,OAAAiR,eAAAjR,OAAAkR,UAAA,UAAA,CACA5d,MAAA,SAAAD,GACA,GAAAuL,KAAAA,IAAAvL,EAAA,MAAA,IAAA+D,MAAA,yBAAA,EACA,MAAA,CAAA3H,KAAAkS,KAAAtO,CAAA,CACA,EACA+d,SAAA,CAAA,EACAC,aAAA,CAAA,CACA,CAAA,EAEArR,OAAAiR,eAAAjR,OAAAkR,UAAA,QAAA,CACA5d,MAAA,SAAAD,GACA3D,IAAA4a,EAAA,CAAAjX,IAAAA,EAAAC,MAAA7D,KAAA4D,EAAA,EAEA,OADA,OAAA5D,KAAA4D,GACAiX,CACA,EAAA8G,SAAA,CAAA,EAAAC,aAAA,CAAA,CACA,CAAA,EAOArR,OAAAiR,eAAA7Q,OAAA8Q,UAAA,aAAA,CACA5d,MAAA,SAAAke,EAAA,CAAA,GACA,OAAAA,EAAA/hB,KAAAqI,YAAA,EAAArI,MAAA8c,QAAA,uBAAA1S,GAAAA,EAAA4X,YAAA,CAAA,CACA,CACA,CAAA,CACA,CAOApM,wBAAAzU,GACA,YAAA,OAAA8gB,kBACA5S,KAAA,8EAAA,EAIA4S,kBAAA9gB,EAAA,CACA+gB,WAAA,CACAC,eAAA,CAAA,EACAC,cAAA,CAAA,EACAC,SAAA,OACAC,cAAA,IACA,CACA,CAAA,CACA,CAEA,CAEA9e,IAAA6d,iBAAA,GAKA,KACAphB,IAAAsiB,EAAAnf,SAAAof,cAAA,MAAA,EACAD,EAAAE,IAAA,aACAF,EAAA5f,KAAA,WACA4f,EAAAtf,KAAA,+EACAG,SAAAsf,KAAAC,YAAAJ,CAAA,CACA,GAAA,GClPA,WAEAK,EAEApP,IAEAE,WAAA,CAAA,EACAC,QAAA,CAAA,EAEAkP,iBACAC,cAGAC,iBAGAnP,YAAA,CAAA,EAEAC,MAAA,CAAA,EACAE,OACAiP,SAEAC,OAAA,KAKAnjB,YAAAiK,GACA/J,KAAAwT,IAAAzJ,CACA,CAEAgL,oBACA,GAAA/U,KAAA0T,WAAA,MAAA,IAAA/L,MAAA,0CAAA,CACA,CAEAub,iBAAA5N,EAAAC,GACAtV,IAAAkB,EAAAqC,IAAA2R,WAAA,wBAAAnV,KAAAijB,MAAA,EACA9iB,EAAAgB,CAAA,EAAAwU,IAAA,QAAAL,CAAA,EACAnV,EAAAgB,CAAA,EAAAwU,IAAA,SAAAJ,CAAA,CACA,CAEAM,cACAC,eAAAC,MAAA/V,KAAA6T,KAAA,EAEA5T,IAAAkB,EAAAqC,IAAA2R,WAAA,wBAAAnV,KAAAijB,MAAA,EACAzf,IAAAwS,UAAAhW,KAAA6T,MAAA,4BAAA1S,CAAA,EAEAA,EAAAqC,IAAA2R,WAAA,oBAAAnV,KAAAijB,MAAA,EACAzf,IAAAwS,UAAAhW,KAAA6T,MAAA,wBAAA1S,CAAA,EAEAA,EAAAqC,IAAA2R,WAAA,wBAAAnV,KAAAijB,MAAA,EACAzf,IAAAwS,UAAAhW,KAAA6T,MAAA,4BAAA1S,CAAA,CACA,CAEAoV,mBACAtW,IAAAuW,EAAAhT,IAAA2R,WAAA,wBAAAnV,KAAAijB,MAAA,EACAjjB,KAAA4T,YACAzT,EAAAqW,CAAA,EAAA5U,OAAA,GAAA,EADAzB,EAAAqW,CAAA,EAAA3U,QAAA,GAAA,CAEA,CAEA4U,eAEAxW,IAAAyW,EAAA1W,KAAA+T,QAAA,iBACA5T,EAAAqD,IAAA2R,WAAA,mBAAAnV,KAAAijB,MAAA,CAAA,EAAA1hB,KAAAmV,CAAA,CACA,CAEAyM,wBACAljB,IAAAwY,EAAAjV,IAAA2R,WAAA,wBAAAnV,KAAAijB,MAAA,EACAzf,IAAAlC,MAAAmX,EAAA,IAAAzY,KAAAmW,QAAA,CAAA,CACA,CAEArB,aACA7U,IAAAmjB,EAAA5f,IAAA2R,WAAA,kBAAAnV,KAAAijB,MAAA,EAGAzf,IAAAyc,MAAAmD,CAAA,IAKAjjB,EAAAA,EAAAH,KAAAijB,MAAA,EAAAI,SAAA,CAAA,EAAAC,QADA,kHACA,EAGAnjB,EAAAH,KAAAijB,MAAA,EAAA5iB,KAAA,oBAAA,EAAAsV,IAAA,UAAA3V,KAAAgjB,QAAA,EAEAO,EAAA/f,IAAA2R,WAAA,wBAAAnV,KAAAijB,MAAA,EAOA9iB,EAAAojB,CAAA,EAAArO;;;;;aAAA,EAGAsO,EAAAhgB,IAAA2R,WAAA,qBAAAoO,CAAA,EACA/f,IAAAoS,iBAAA4N,CAAA,EACA,CASAzM,UAAAhU,GAEA,OADA/C,KAAA6iB,iBAAA9f,EACA/C,IACA,CAQA8W,OAAA/T,GAEA,OADA/C,KAAA8iB,cAAA/f,EACA/C,IACA,CAQAiX,UAAAlU,GAEA,OADA/C,KAAA+iB,iBAAAhgB,EACA/C,IACA,CASAgX,cAAArR,GACA3F,KAAA4T,aAAA5T,KAAAmW,QAAA,CACA,CAEAe,MAAAC,GACAnX,KAAA+U,kBAAA,EAEA9U,GAAA,CAAAmX,EAAAA,EAAA,IAAAC,EAAAA,EAAA,OAAAC,IAAAA,EAAA,OAAAC,WAAAA,EAAA,CAAA,CAAA,EAAAJ,EAEAnX,KAAAwT,IAAAhQ,IAAAuG,GAAA/J,KAAAwT,GAAA,EACAxT,KAAAijB,OAAA9iB,EAAAqD,IAAAsX,MAAA9a,KAAAwT,GAAA,CAAA,EACAxT,KAAA4T,YAAA2D,EACAvX,KAAAgjB,SAAA1L,EAEAtX,KAAA8U,WAAA,EACA9U,KAAAmjB,sBAAA,EACAnjB,KAAAkjB,iBAAA9L,EAAAC,CAAA,EACArX,KAAAyW,aAAA,EACAzW,KAAAuW,iBAAA,EACAvW,KAAA6V,YAAA,EAGAC,eAAA0B,QAAAxX,IAAA,EACAA,KAAAijB,OAAArhB,OAAA,GAAA,EAEA5B,KAAA2T,QAAA,CAAA,CACA,CAWA7R,KAAAqV,EAAA,IACArB,eAAA2B,SAAA,EAEAjU,IAAAkU,SAAA,IAAA,IAAA1X,KAAAkX,MAAAC,CAAA,CAAA,EACAnX,KAAAkX,MAAAC,CAAA,CACA,CAKAhB,UACAnW,KAAA0T,aACA1T,KAAA0T,WAAA,CAAA,EAEAoC,eAAA8B,QAAA5X,IAAA,EACAG,EAAAH,KAAAijB,MAAA,EAAAphB,QAAA,GAAA,EACA7B,KAAA6iB,kBAAA7iB,KAAA6iB,iBAAA,EACA,CAKA9gB,OACA/B,KAAA0T,aAEA1T,KAAA2T,QAAA,CAAA,EAEAxT,EAAAH,KAAAijB,MAAA,EAAAphB,QAAA,GAAA,EACA7B,KAAA8iB,eAAA9iB,KAAA8iB,cAAA,EACA,CAOAnL,cACA3X,KAAA2T,QAAA,CAAA,EACA3T,KAAA6V,YAAA,EACA1V,EAAAH,KAAAijB,MAAA,EAAArhB,OAAA,GAAA,EACA5B,KAAA+iB,kBAAA/iB,KAAA+iB,iBAAA,CACA,CAOAhL,OAAA,OAAA/X,KAAA6T,MAAA,CAAA,EAAA7T,IAAA,CAOAgY,QAAA,OAAAhY,KAAA6T,MAAA,CAAA,EAAA7T,IAAA,CASA0W,MAAA7S,GAEA,OADA7D,KAAA+T,OAAAlQ,EACA7D,IACA,CAOA8X,gBAEA,OADA9X,KAAA4T,YAAA,CAAA,EACA5T,IACA,CAOAuX,aAEA,OADAvX,KAAA4T,YAAA,CAAA,EACA5T,IACA,CAOAyjB,QACA,MAAA,CAAAzjB,KAAA0jB,MACA,CAEAA,aACA,OAAA1jB,KAAA2T,OACA,CAEAgQ,gBACA,OAAA3jB,KAAA0T,UACA,CAEA3J,SACA,OAAA/J,KAAAwT,GACA,CAOA0E,SAAAxB,GACA1W,KAAA+T,OAAA2C,EACA1W,KAAAyW,aAAA,CACA,CAKA0B,WACAnY,KAAA6T,MAAA,CAAA,EACA7T,KAAA6V,YAAA,CACA,CAKAuC,YACApY,KAAA6T,MAAA,CAAA,EACA7T,KAAA6V,YAAA,CACA,CAKAwC,iBACArY,KAAA4T,YAAA,CAAA,EACA5T,KAAAuW,iBAAA,CACA,CAKA+B,oBACAtY,KAAA4T,YAAA,CAAA,EACA5T,KAAAuW,iBAAA,CACA,CAGA,CASAjD,OAAAsP,MAAA,GAAA,IAAAA,EAAA7Y,CAAA,CAEA,GAAA,QC5WA6Z,IAMAC,gBAAA,IACAC,iBAAA,IACAC,iBAAA,IAYAC,cAAAC,EAAAC,EAAA,GAAAC,EAAA,CAAA,EAAAC,EAAA,GAEAnkB,IAAAokB,EAAAxf,WAAAof,CAAA,EACA,IAUAK,EAVA,OAAAC,MAAAF,CAAA,EAAA,OAGAG,EAAAzH,OAAAC,cAAAqH,CAAA,EAGAI,EAAAJ,EAAA,EACAA,EAAAI,EAAAlE,KAAAmE,IAAAL,CAAA,EAAAA,EAGAC,EAAAG,EAAA,IAAA,GACAH,GAAA,IAAAJ,EAAA9iB,OAAA,GAAA8iB,EAGAG,EAAAG,EAAAH,EAAAA,EAAAM,QAAAP,CAAA,EAKAE,GAFAD,EAAAF,EAAAnkB,KAAAmkB,MAAAE,CAAA,EAAAA,GAGA,CAUAO,kBAAAX,EAAAY,EAAAjB,IAAAE,WAEA,OADAG,EAAAtT,OAAAsT,CAAA,EACApf,WAAAof,EAAAnH,QAAA+H,EAAA,EAAA,CAAA,CACA,CAQAV,aAAAW,GACA,OAAAA,EAAA,GAAA,IAAAA,EAAAA,CACA,CAEA,CC4BAxR,OAAAwC,eAAA,UA7FAiP,YAAA,GAEAC,OAAA,CAAA,EACAC,SAEAnlB,cACA0D,IAAAqR,IAAA,KAGA1U,EAAA,MAAA,EAAA+U,QADA,iCACA,EACAlV,KAAAilB,SAAA9kB,EAAA,cAAA,EAGAA,EAAAiD,QAAA,EAAA8S,GAAA,gBAAAlW,KAAAilB,SAAA,IACA,IAGA3jB,EAIA4jB,EAPA,OAAA,IAAAllB,KAAAmlB,MAAA,IAEAC,EAAA,YAAAzf,EAAAhD,MAAA,WAAAgD,EAAA/B,IACAtC,EAAA,UAAAqE,EAAAhD,MAAAxC,EAAAwF,EAAA0f,MAAA,EAAA/H,SAAA,gBAAA,EAEA8H,CAAAA,GAAA9jB,CAAAA,KAEA4jB,EAAAllB,KAAAmlB,MAAA,CAAA,CAAA,EACAnlB,KAAAA,KAAA+kB,YAAAG,IAAAlO,cAAArR,CAAA,EACA,CAAA,EAEAxF,EAAAH,KAAAilB,QAAA,EAAAljB,KAAA,CAAA,EACA/B,KAAAglB,OAAA,CAAA,CACA,CAAA,CACA,CAEAG,MAAAG,EAAA,GACA,OAAAtlB,KAAA+kB,YAAA3jB,OAAAkkB,CACA,CAEAC,UACA,IAAAvlB,KAAAmlB,MAAA,EAGA3hB,IAAAkU,SAAA,KAAA,KACA,IAAA1X,KAAAmlB,MAAA,EAEAhlB,EAAAH,KAAAilB,QAAA,EAAApjB,QAAA,GAAA,EAEA7B,KAAA+kB,YAAA/kB,KAAAmlB,MAAA,CAAA,CAAA,GAAAxN,YAAA,CACA,CAAA,EAEA3X,KAAA+kB,YAAA/kB,KAAAmlB,MAAA,CAAA,CAAA,GAAAxN,YAAA,CACA,CAEA5B,MAAAgC,EAAA,CAAA,GACA9X,IAAAkB,EAAAhB,EAAA,cAAA,EACAqD,IAAAwS,UAAA+B,EAAA,mBAAA5W,CAAA,CACA,CAMAqW,QAAAgO,GAEAvlB,IAAAwlB,EAAAzlB,KAAAmlB,MAAA,CAAA,CAAA,EACAnlB,KAAA+kB,YAAAU,IAAA1jB,KAAA,EAGA,CAAA,IAAA0jB,GAAAtlB,EAAAH,KAAAilB,QAAA,EAAArjB,OAAA,GAAA,EAEA5B,KAAA+kB,YAAAxJ,KAAAiK,CAAA,CACA,CASA5N,QAAA4N,GACAxlB,KAAA+kB,YAAAhH,MAAAyH,CAAA,EAGAxlB,KAAAulB,QAAA,CACA,CAEA9N,WAAA,MAAA,CAAAzX,KAAAglB,MAAA,CAEAU,QAAA,OAAA1lB,KAAAglB,MAAA,CAEAW,iBACA,OAAA3lB,KAAA+kB,WACA,CAEA,EAUAzR,OAAAsS,SAAA,IACA3lB,IACAiF,EADA2gB,EAAA/P,eAAA6P,WACA,IAAAzgB,KAAA2gB,EACA,GAAAA,EAAA3gB,GAAA6E,KAAAA,EAAA,OAAA8b,EAAA3gB,EAGA,EAQAoO,OAAAwS,aAAA,IACAC,EAAAH,SAAA7b,CAAA,EACA,MAAAvG,CAAAA,IAAAC,QAAAsiB,CAAA,IACAA,EAAA5P,QAAA,EACA,CAAA,EACA,EC/GA,CAAA,SAAA6P,EAAAC,GACA,YAAA,OAAAC,QAAAA,OAAAC,IACAD,OAAA,WAAA,OAAAD,EAAAD,EAAAA,EAAA5iB,SAAA+L,KAAAA,CAAA,CAAA,CAAA,EACA,UAAA,OAAAiX,QAAA,UAAA,OAAAA,OAAAC,QACAD,OAAAC,QAAAJ,EAAAD,EAAAA,EAAA5iB,SAAA+L,KAAAA,CAAA,EAEA8W,EAAAD,EAAAA,EAAA5iB,SAAA+L,KAAAA,CAAA,CACA,EAAA,aAAA,OAAAmE,OAAAA,OAAAtT,KACA,SAAAsT,GAAAlQ,GAAA+L,IACA,aACA,IAiCAmX,EACAC,EACAC,EACAC,EAnCAC,GAAA,CACAC,EAAA,SACA5G,EAAA,WACAxc,EAAA,QACAqjB,EAAA,SACAtG,EAAA,UACAuG,EAAA,SACAC,EAAA,YACAC,EAAA,MAKA,EACAC,GAAA,CACA7hB,EAAA,QACAyhB,EAAA,QACA1hB,EAAA,KACA+hB,EAAA,SACAC,EAAA,YACAC,GAAA,WACAC,GAAA,eACAC,GAAA,eACAC,GAAA,eACAC,GAAA,cACAC,GAAA,cACAC,GAAA,cACAC,IAAA,iBACAC,IAAA,uBACA,EACAC,IAEAtB,EAAA,GACAC,EAAA,GAOA,CACAsB,aAPArB,EAAA,CAAA,WAAA,QAAA,MAAA,QAQAsB,YAPArB,EAAA,CAAA,SAAA,MAAA,IAAA,MAQAsB,aAAA,SAAAjjB,GACA,IAAAwR,EAAAiQ,EAAAzhB,GAEA,GAAAyhB,CAAAA,EAAAS,GAAAU,KAAA5iB,CAAA,EAAA,CAUA,IAPA,IAEAkjB,EAEA5gB,EACA6gB,EALAC,EAAAC,EAAArjB,CAAA,EACAsjB,EAAAhlB,GAAAof,cAAA,KAAA,EAAAwE,GAAAJ,GAEA1hB,EAAA,EAIAA,EAAAshB,EAAAplB,OAAA8D,CAAA,GAQA,IAPA+iB,EAAAzB,EAAAthB,GAAA4X,QAAA,KAAA,EAAA,EACAkL,EAAA,CACAljB,EACA0hB,EAAAthB,GAAAJ,EACAmjB,EAAAC,EACAC,EAAAF,CAAA,EAAAC,GAEA9gB,EAAA,EAAAA,EAAA4gB,EAAAhB,GAAAC,GAAA7f,CAAA,GACA,GAAAghB,EAAAJ,EAAA5gB,MAAA+H,GAAA,CACAmH,EAAA0R,EAAA5gB,GACA,KACA,CAIAmf,EAAAzhB,GAAAwR,CAzBA,CA0BA,OAAAA,CACA,EACA+R,kBAAA,SAAAC,EAAAC,EAAAC,GACA,IAAA1jB,EAAAwjB,EAAA,IAAAC,EACAjS,EAAAiQ,EAAAzhB,GAEA,GAAAyhB,CAAAA,EAAAS,GAAAU,KAAA5iB,CAAA,EAAA,CAUA,IAPA,IAKA2W,EALAgN,EAAArlB,GAAAof,cAAA,KAAA,EAAAwE,GAAAJ,GACA8B,EAAAH,EAAAtjB,MAAA,GAAA,EACA0jB,EAAAH,GAAA,GACAtjB,EAAA,EACAkC,EAAA,CAAA,EAGAlC,EAAAwjB,EAAA1B,GAAAC,GAAA/hB,CAAA,GACA,KAAAkC,EAAAwgB,GAAAC,aAAAb,GAAAC,GAAA7f,CAAA,GAGA,GAFAqU,EAAArU,EAAA,EAAAshB,EAAAxjB,GAAA0iB,GAAAC,aAAAzgB,GAAAshB,EAAAxjB,GACAujB,EAAAG,QAAAN,EAAA,IAAA7M,EAAAkN,EACAF,EAAAzB,GAAAC,GAAA,CACA3Q,EAAAmF,EACA,KACA,CAIA8K,EAAAzhB,GAAAwR,CApBA,CAqBA,OAAAA,CACA,EACAuS,OAAA,SAAA/jB,EAAAgkB,EAAAC,GACA,IAAA7jB,EAAA,EACAoR,EAAAgQ,EAAAxhB,GAEA,GAAA,CAAAwhB,EAAAU,GAAAU,KAAA5iB,CAAA,EAAA,CAEA,IADAwR,EAAAhD,GAAAxO,GACAI,EAAAuhB,EAAAO,GAAAC,GAAA/hB,CAAA,GACAoR,EAAAA,GAAAhD,IAAAwV,EAAArC,EAAAvhB,GAAAuhB,EAAAvhB,GAAAmD,YAAA,GAAA8f,EAAArjB,CAAA,GACAwhB,EAAAxhB,GAAAwR,CACA,CACA,OAAAA,GAAAyS,CACA,CACA,GA/EA,SAAAZ,EAAAlhB,GACA,OAAAA,EAAA7B,OAAA,CAAA,EAAA4c,YAAA,EAAA/a,EAAAgC,MAAA,CAAA,CACA,CA+EA,IAAA+f,GAuBA,CAKAC,GAAAC,EAAAC,EAAA,EAAA,CAAA,CAAA,EAMAC,GAAAF,EAAAC,EAAA,CAAA,EAMAE,GAAAH,EAAAtB,GAAAiB,OAAA,EAAA,mBAAA,CAAA,CAAA,EAMAS,GAAAJ,EAAAtB,GAAAiB,OAAA,EAAA,iBAAA,CAAA,CAAA,EAMAU,IAAAL,EAAAtB,GAAAiB,OAAA,EAAA,wBAAA,CAAA,EAAA,SAAAW,GAAA,OAAAlW,GAAA0M,WAAAwJ,EAAA,IAAA,EAAA,CAAA,CAAA,EAMAC,IAAAP,EAAAtB,GAAAiB,OAAA,EAAA,uBAAA,CAAA,EAAA,SAAA9e,GAAA,OAAAuJ,GAAAoW,aAAA3f,CAAA,CAAA,CAAA,EAMAkX,IAAA,WACA,OAAAjd,KAAAid,KAAAjd,KAAAid,IAAA,IAAA,IAAAjd,MAAAG,QAAA,CACA,EAMAwlB,KAAA,SAAAhkB,GACAA,EAAAikB,gBACAjkB,EAAAikB,gBAAA,EAEAjkB,EAAAkkB,aAAA,CAAA,CACA,EAMAC,KAAA,SAAAnkB,GACAA,EAAAC,gBAAAD,EAAA4R,WACA5R,EAAAC,eAAA,EAEAD,EAAAokB,YAAA,CAAA,CACA,EAOAC,KAAA,SAAArkB,GAGA,IAWAskB,EANAC,IAPAvkB,EAAAA,EAAAwkB,eAAAxkB,GAMA0f,QAAA1f,EAAAykB,YAAAhnB,IACAinB,eAAAjnB,GACAknB,EAAAJ,EAAAK,gBACAC,EAAAN,EAAAM,KAGA,OAAA7kB,EAAA8kB,UAAAtb,GAEA,CACAub,GAFAT,EAAAtkB,EAAA8kB,QAAA,IAEA,MACAE,EAAAV,EAAA,KACA,EAIA,CAAAtkB,EAAA,OAAAA,EAAA,SAAA,MAAAA,EAAA,QAEA,CACA+kB,EAAA/kB,EAAA,SACA2kB,GAAAA,EAAAM,YAAAJ,GAAAA,EAAAI,YAAA,IACAN,GAAAA,EAAAO,YAAAL,GAAAA,EAAAK,YAAA,GACAF,EAAAhlB,EAAA,SACA2kB,GAAAA,EAAAQ,WAAAN,GAAAA,EAAAM,WAAA,IACAR,GAAAA,EAAAS,WAAAP,GAAAA,EAAAO,WAAA,EACA,EAEA,CACAL,EAAA/kB,EAAA,MACAglB,EAAAhlB,EAAA,KACA,CACA,EAOAqlB,KAAA,SAAArlB,GACA,IAAAslB,EAAAtlB,EAAAslB,OACA,OAAAtlB,EAAAulB,OAAAD,IAAA9b,GAGAxJ,EAAAulB,MAFA,EAAAD,EAAA,EAAA,EAAAA,EAAA,EAAA,EAAAA,EAAA,EAAA,CAGA,EAQAE,IAAA,SAAAzJ,EAAA0J,GACA,IAAA,IAAAlmB,EAAA,EAAAA,EAAAkmB,EAAApE,GAAAC,GAAA/hB,CAAA,GAEA,IACA,GAAAkmB,EAAAlmB,KAAAwc,EACA,OAAAxc,CAEA,CAAA,MAAAiD,IACA,MAAA,CAAA,CACA,EAOAkjB,IAAA,SAAAD,GACA,IAAAE,EAAAnQ,MAAAC,QACA,OAAAkQ,EAAAA,EAAAF,CAAA,EAAAprB,KAAA2C,KAAAyoB,CAAA,GAAA1E,GAAAnjB,CACA,EAOAZ,KAAA,SAAApC,GACA,OAAAA,IAAA4O,IAEA,OAAA5O,EACAA,EAAA,GACAgQ,OAAAyW,GAAAE,GAAAhG,SAAAqK,KAAAhrB,CAAA,EAAAuc,QAAA,oBAAA,IAAA,EAAAzU,YAAA,CACA,EAGA6gB,KAAAA,CAcA,EAzMA,SAAAC,EAAAuB,GACA,OAAAA,EAAApX,GAAAkY,YAAApoB,GAAAmnB,gBAAAvD,GAAAQ,KAAApkB,GAAAonB,KAAAxD,GAAAQ,IAAAlU,GAAAmY,aAAAroB,GAAAmnB,gBAAAvD,GAAAK,KAAAjkB,GAAAonB,KAAAxD,GAAAK,GACA,CACA,SAAA6B,EAAAM,EAAAkC,GACA,GAAA,OAAAlC,GAAA9C,GAAA3G,EACA,KAAA,uBAOA,SAAA4L,KACA,SAAAC,IAAA,OAAApC,EAAAqC,MAAA7rB,gBAAA2rB,EAAA3rB,KAAA0rB,EAAAI,EAAAC,OAAA5Q,MAAA6Q,GAAA/iB,MAAAsiB,KAAAU,SAAA,CAAA,CAAA,CAAA,CAHA,IAAAD,EAAAhF,GAAAE,EACA4E,EAAA3Q,MAAA6Q,GAAA/iB,MAAAsiB,KAAAU,UAAA,CAAA,EAQA,OAJAzC,EAAAwC,KACAL,EAAAK,GAAAxC,EAAAwC,IACAJ,EAAAI,GAAA,IAAAL,EAEAC,CACA,CAyLA,IAGAM,EAyLAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAnMAC,GAAAnM,KACAoM,GAAArZ,GAAAsZ,OACAC,GACAX,EAAA,CACAhF,EAAAwF,GAAAI,GACA3nB,EAAAunB,GAAAK,IACAnG,EAAA8F,GAAAM,IACA5V,EAAAsV,GAAAO,IACAC,EAAAR,GAAAS,KACAtG,EAAA6F,GAAAU,KACA7pB,EAAAmpB,GAAAhI,IACAiC,EAAA,OACA,EAYA,CACA0G,MAAA,SAAA3C,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,MAAA,GAAAmoB,EAAA/mB,EAAAulB,EAAAwB,EAAAhF,CAAA,EAAA,CACA,EACAoG,OAAA,SAAA5C,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAA2mB,CACA,EACA6C,WAAA,SAAA7C,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,GAAA+nB,GAAAnpB,GAAAmpB,EAAA5M,CACA,EACAkN,YAAA,SAAA9C,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,MAAA,CAAAoB,GAAA+nB,GAAAnpB,IAAAmpB,EAAA,GAAA5M,CACA,EACAmN,cAAA,SAAA/C,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,GAAAnpB,EAAA,GAAA,EAAAoB,EAAA,EAAA+nB,EAAAA,EAAA5M,EAAA,CAAAnb,EAAA,GAAA,EAAA+nB,GAAAA,EAAA,GAAA,GAAA5M,CACA,EACAoN,YAAA,SAAAhD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,GAAA+nB,GAAAnpB,GAAAmpB,EAAAA,EAAA5M,CACA,EACAqN,aAAA,SAAAjD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,IAAA+nB,EAAAA,EAAAnpB,EAAA,GAAAmpB,EAAAA,EAAA,GAAA5M,CACA,EACAsN,eAAA,SAAAlD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,GAAAnpB,EAAA,GAAA,EAAAoB,EAAA,EAAA+nB,EAAAA,EAAAA,EAAA5M,EAAAnb,EAAA,IAAA+nB,GAAA,GAAAA,EAAAA,EAAA,GAAA5M,CACA,EACAuN,YAAA,SAAAnD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,GAAA+nB,GAAAnpB,GAAAmpB,EAAAA,EAAAA,EAAA5M,CACA,EACAwN,aAAA,SAAApD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,MAAA,CAAAoB,IAAA+nB,EAAAA,EAAAnpB,EAAA,GAAAmpB,EAAAA,EAAAA,EAAA,GAAA5M,CACA,EACAyN,eAAA,SAAArD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,GAAAnpB,EAAA,GAAA,EAAAoB,EAAA,EAAA+nB,EAAAA,EAAAA,EAAAA,EAAA5M,EAAA,CAAAnb,EAAA,IAAA+nB,GAAA,GAAAA,EAAAA,EAAAA,EAAA,GAAA5M,CACA,EACA0N,YAAA,SAAAtD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,GAAA+nB,GAAAnpB,GAAAmpB,EAAAA,EAAAA,EAAAA,EAAA5M,CACA,EACA2N,aAAA,SAAAvD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,IAAA+nB,EAAAA,EAAAnpB,EAAA,GAAAmpB,EAAAA,EAAAA,EAAAA,EAAA,GAAA5M,CACA,EACA4N,eAAA,SAAAxD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,GAAAnpB,EAAA,GAAA,EAAAoB,EAAA,EAAA+nB,EAAAA,EAAAA,EAAAA,EAAAA,EAAA5M,EAAAnb,EAAA,IAAA+nB,GAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAA,GAAA5M,CACA,EACA6N,WAAA,SAAAzD,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,MAAA,CAAAoB,EAAA+mB,EAAA/mB,EAAA+nB,EAAAnpB,GAAAmoB,EAAAhF,EAAA,EAAA,EAAA/hB,EAAAmb,CACA,EACA8N,YAAA,SAAA1D,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,EAAA+mB,EAAAtF,EAAAsG,EAAAnpB,GAAAmoB,EAAAhF,EAAA,EAAA,EAAA5G,CACA,EACA+N,cAAA,SAAA3D,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,MAAA,CAAAoB,EAAA,GAAA+mB,EAAA/mB,EAAA+mB,EAAAhF,EAAAgG,EAAAnpB,CAAA,EAAA,GAAAuc,CACA,EACAgO,WAAA,SAAA5D,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAA,GAAAmpB,EAAA5M,EAAAnb,EAAA+mB,EAAA9U,EAAA,EAAA,IAAA8V,EAAAnpB,EAAA,EAAA,EAAAuc,CACA,EACAiO,YAAA,SAAA7D,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,GAAAnpB,EAAAuc,EAAAnb,EAAAA,GAAA,EAAA+mB,EAAA9U,EAAA,EAAA,CAAA,GAAA8V,EAAAnpB,CAAA,GAAAuc,CACA,EACAkO,cAAA,SAAA9D,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAA,GAAAmpB,EAAA5M,EACA4M,GAAAnpB,EAAAuc,EAAAnb,GACA+nB,GAAAnpB,EAAA,GAAA,EAAAoB,EAAA,EAAA+mB,EAAA9U,EAAA,EAAA,IAAA8V,EAAA,EAAA,EAAA5M,EACAnb,EAAA,GAAA,EAAA+mB,EAAA9U,EAAA,EAAA,CAAA,GAAA,EAAA8V,CAAA,GAAA5M,CACA,EACAmO,WAAA,SAAA/D,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,MAAA,CAAAoB,GAAA+mB,EAAAgB,EAAA,GAAAA,GAAAnpB,GAAAmpB,CAAA,EAAA,GAAA5M,CACA,EACAoO,YAAA,SAAAhE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,EAAA+mB,EAAAgB,EAAA,GAAAA,EAAAA,EAAAnpB,EAAA,GAAAmpB,CAAA,EAAA5M,CACA,EACAqO,cAAA,SAAAjE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,GAAAnpB,EAAA,GAAA,EAAA,CAAAoB,EAAA,GAAA+mB,EAAAgB,EAAA,EAAAA,EAAAA,CAAA,EAAA,GAAA5M,EAAAnb,EAAA,GAAA+mB,EAAAgB,EAAA,GAAAA,GAAA,GAAAA,CAAA,EAAA,GAAA5M,CACA,EACAsO,cAAA,SAAAlE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,IAAA6iB,EAAAsF,EAAAvF,EAAAO,EAAA,EAAA3jB,EAAA4B,EACA,OAAA,GAAA+nB,EAAA5M,EAAA,IAAA4M,GAAAnpB,GAAAuc,EAAAnb,GAAA+hB,EAAAA,GAAA,GAAAnjB,EACA6iB,EAAArjB,EAAA2oB,EAAA3oB,EAAA4B,CAAA,GAAA5B,EAAA4B,EAAA+hB,EAAA,GACAA,GAAA,EAAAgF,EAAAhF,GAAAgF,EAAArF,EAAA1hB,EAAA5B,CAAA,EACA,EAAAA,EAAA2oB,EAAA9U,EAAA,EAAA,GAAA,EAAA8V,CAAA,EAAAhB,EAAAtF,EAAA,EAAAsF,EAAAhF,GAAAgG,EAAAnpB,EAAA6iB,GAAAM,CAAA,GAAA5G,EACA,EACAuO,eAAA,SAAAnE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,IAAA6iB,EAAAsF,EAAAvF,EAAAO,EAAA,EAAA3jB,EAAA4B,EACA,OAAA,GAAA+nB,EAAA5M,EACA,IAAA4M,GAAAnpB,GAAAuc,EAAAnb,GACA+hB,EAAAA,GAAA,GAAAnjB,EACA6iB,EAAArjB,EAAA2oB,EAAA3oB,EAAA4B,CAAA,GAAA5B,EAAA4B,EAAA+hB,EAAA,GACAA,GAAA,EAAAgF,EAAAhF,GAAAgF,EAAArF,EAAA1hB,EAAA5B,CAAA,EACAA,EAAA2oB,EAAA9U,EAAA,EAAA,CAAA,GAAA8V,CAAA,EAAAhB,EAAAtF,EAAA,EAAAsF,EAAAhF,GAAAgG,EAAAnpB,EAAA6iB,GAAAM,CAAA,EAAA/hB,EAAAmb,EACA,EACAwO,iBAAA,SAAApE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,IAAA6iB,EAAAsF,EAAAvF,EAAAO,EAAA,EAAA3jB,EAAA4B,EACA,OAAA,GAAA+nB,EAAA5M,EACA,IAAA4M,GAAAnpB,EAAA,GAAAuc,EAAAnb,GACA+hB,EAAAA,GAAAnjB,GAAA,GAAA,KACA6iB,EAAArjB,EAAA2oB,EAAA3oB,EAAA4B,CAAA,GAAA5B,EAAA4B,EAAA+hB,EAAA,GACAA,GAAA,EAAAgF,EAAAhF,GAAAgF,EAAArF,EAAA1hB,EAAA5B,CAAA,EACA2pB,EAAA,EAAA3pB,EAAA2oB,EAAA9U,EAAA,EAAA,GAAA,EAAA8V,CAAA,EAAAhB,EAAAtF,EAAA,EAAAsF,EAAAhF,GAAAgG,EAAAnpB,EAAA6iB,GAAAM,CAAA,EAAA,CAAA,GAAA5G,EACA/c,EAAA2oB,EAAA9U,EAAA,EAAA,CAAA,GAAA,EAAA8V,CAAA,EAAAhB,EAAAtF,EAAA,EAAAsF,EAAAhF,GAAAgG,EAAAnpB,EAAA6iB,GAAAM,CAAA,EAAA,GAAA/hB,EAAAmb,EACA,EACAyO,WAAA,SAAArE,EAAAwC,EAAA5M,EAAAnb,EAAApB,EAAA6iB,GAEA,OAAAzhB,GAAA+nB,GAAAnpB,GAAAmpB,KADAtG,EAAAA,GAAAsF,EAAAvF,GACA,GAAAuG,EAAAtG,GAAAtG,CACA,EACA0O,YAAA,SAAAtE,EAAAwC,EAAA5M,EAAAnb,EAAApB,EAAA6iB,GAEA,OAAAzhB,IAAA+nB,EAAAA,EAAAnpB,EAAA,GAAAmpB,KADAtG,EAAAA,GAAAsF,EAAAvF,GACA,GAAAuG,EAAAtG,GAAA,GAAAtG,CACA,EACA2O,cAAA,SAAAvE,EAAAwC,EAAA5M,EAAAnb,EAAApB,EAAA6iB,GAEA,OADAA,EAAAA,GAAAsF,EAAAvF,GACAuG,GAAAnpB,EAAA,GAAA,EAAAoB,EAAA,GAAA+nB,EAAAA,IAAA,GAAAtG,GAAA,QAAAsG,EAAAtG,IAAAtG,EAAAnb,EAAA,IAAA+nB,GAAA,GAAAA,IAAA,GAAAtG,GAAA,QAAAsG,EAAAtG,GAAA,GAAAtG,CACA,EACA4O,aAAA,SAAAxE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAoB,EAAAnF,KAAAmvB,cAAAzE,EAAA3mB,EAAAmpB,EAAA,EAAA/nB,EAAApB,CAAA,EAAAuc,CACA,EACA6O,cAAA,SAAAzE,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,IAAA4iB,EAAA,OACA,OAAAuG,GAAAnpB,GAAA,EAAA,KACAoB,GAAAwhB,EAAAuG,EAAAA,GAAA5M,EACA4M,EAAA,EAAA,KACA/nB,GAAAwhB,GAAAuG,GAAA,IAAA,MAAAA,EAAA,KAAA5M,EACA4M,EAAA,IAAA,KACA/nB,GAAAwhB,GAAAuG,GAAA,KAAA,MAAAA,EAAA,OAAA5M,EAEAnb,GAAAwhB,GAAAuG,GAAA,MAAA,MAAAA,EAAA,SAAA5M,CAEA,EACA8O,gBAAA,SAAA1E,EAAAwC,EAAA5M,EAAAnb,EAAApB,GACA,OAAAmpB,EAAAnpB,EAAA,EAAA,GAAA/D,KAAAkvB,aAAAxE,EAAA,EAAAwC,EAAA,EAAA/nB,EAAApB,CAAA,EAAAuc,EAAA,GAAAtgB,KAAAmvB,cAAAzE,EAAA,EAAAwC,EAAAnpB,EAAA,EAAAoB,EAAApB,CAAA,EAAA,GAAAoB,EAAAmb,CACA,CACA,GAkCA+O,IACAlD,EAAA,oBACAC,EAAA,IAEAC,EAAA,aACAC,EAAA,YACAC,EAAA,GACAC,EAAAxD,GAAArmB,KACA8pB,EAAA,CACA6C,wBAAA,CAAA,EACAC,YAAA,CAAA,EACAC,YAAA,CAAA,EACAC,SAAA,CAAA,EACAC,WAAA,CAAA,EACAC,WAAA,CAAA,EACAC,WAAA,CAAA,EACAtV,QAAA,CAAA,EACAuV,MAAA,CAAA,EACAC,QAAA,CAAA,EACAC,OAAA,CAAA,EACAC,OAAA,CAAA,EACAC,KAAA,CAAA,CACA,EA2YAC,EAAAlJ,GAAAE,GAAA,CAIAhR,GAAA,SAAAia,EAAAC,GAGA,IAEAC,EAFAC,GAFAH,GAAAA,GAnaA,IAmaA/lB,MAAA+hB,CAAA,GAAA,CAnaA,KAqaAnF,GAAAC,GACA/hB,EAAA,EAEA,OAAAlF,KAAAiB,KAAA,WACAovB,EAAArwB,KACA,IACA,GAAAqwB,EAAApoB,iBACA,KAAA/C,EAAAorB,EAAAprB,CAAA,GACAmrB,EAAApoB,iBAAAkoB,EAAAjrB,GAAAkrB,CAAA,OAEA,GAAAC,EAAAE,YACA,KAAArrB,EAAAorB,EAAAprB,CAAA,GACAmrB,EAAAG,YAAA,KAAAL,EAAAjrB,GAAAkrB,CAAA,CAEA,CAAA,MAAAjoB,IACA,CAAA,CACA,EAEAmW,IAAA,SAAA6R,EAAAC,GAGA,IAEAC,EAFAC,GAFAH,GAAAA,GAxbA,IAwbA/lB,MAAA+hB,CAAA,GAAA,CAxbA,KA0bAnF,GAAAC,GACA/hB,EAAA,EAEA,OAAAlF,KAAAiB,KAAA,WACAovB,EAAArwB,KACA,IACA,GAAAqwB,EAAAI,oBACA,KAAAvrB,EAAAorB,EAAAprB,CAAA,GACAmrB,EAAAI,oBAAAN,EAAAjrB,GAAAkrB,CAAA,OAEA,GAAAC,EAAAE,YACA,KAAArrB,EAAAorB,EAAAprB,CAAA,GACAmrB,EAAAE,YAAA,KAAAJ,EAAAjrB,GAAAkrB,CAAA,CAEA,CAAA,MAAAjoB,IACA,CAAA,CACA,EAEAuoB,IAAA,SAAAP,EAAAC,GAEA,OADAD,GAAAA,GA7cA,IA6cA/lB,MAAA+hB,CAAA,GAAA,CA7cA,IA8cAnsB,KAAAiB,KAAA,WACA,IAAAovB,EAAAH,EAAAlwB,IAAA,EACAkwB,EAAAjvB,KAAAkvB,EAAA,SAAAjrB,EAAAyrB,GACA,SAAAC,EAAAzoB,GACAioB,EAAA7E,KAAAvrB,KAAAmI,CAAA,EACAkoB,EAAA/R,IAAAqS,EAAAC,CAAA,CACA,CACAP,EAAAna,GAAAya,EAAAC,CAAA,CACA,CAAA,CACA,CAAA,CACA,EAEAC,QAAA,SAAAV,GACA,IAAAE,EACA1qB,EACA,OAAA3F,KAAAiB,KAAA,WACAovB,EAAArwB,KACAoD,GAAA0tB,cACAnrB,EAAAvC,GAAA0tB,YAAA,YAAA,GACAC,UAAAZ,EAAA,CAAA,EAAA,CAAA,CAAA,EACAE,EAAAW,cAAArrB,CAAA,GAGA0qB,EAAAY,UAAA,KAAAd,CAAA,CAEA,CAAA,CACA,EAIAe,OAAA,SAAAC,GACA,OAAAnxB,KAAAiB,KAAA,WAAAmwB,EAAApxB,KAAA,YAAAmxB,CAAA,CAAA,CAAA,CACA,EAEAjc,QAAA,SAAAic,GACA,OAAAnxB,KAAAiB,KAAA,WAAAmwB,EAAApxB,KAAA,aAAAmxB,CAAA,CAAA,CAAA,CACA,EAEAE,OAAA,SAAAF,GACA,OAAAnxB,KAAAiB,KAAA,WAAAmwB,EAAApxB,KAAA,cAAAmxB,CAAA,CAAA,CAAA,CACA,EAEAzT,MAAA,SAAAyT,GACA,OAAAnxB,KAAAiB,KAAA,WAAAmwB,EAAApxB,KAAA,WAAAmxB,CAAA,CAAA,CAAA,CACA,EAEAtZ,OAAA,WACA,OAAA7X,KAAAiB,KAAA,WACA,IACAqwB,EADAtxB,KACAsxB,WACA,MAAAA,GACAA,EAAAC,YAHAvxB,IAGA,CACA,CAAA,CACA,EAEAwxB,OAAA,WACA,IACAtsB,EACAmrB,EACAxvB,EAHA4wB,EAAA,GAWA,IANAzxB,KAAAiB,KAAA,WAEA,CAAA,IAAAywB,EADA7wB,EAAAb,KAAAsxB,WACAG,CAAA,GACAA,EAAAlW,KAAA1a,CAAA,CACA,CAAA,EAEAqE,EAAA,EAAAA,EAAAusB,EAAAzK,GAAAC,GAAA/hB,CAAA,GAAA,CAGA,IAFAmrB,EAAAoB,EAAAvsB,GACArE,EAAAwvB,EAAAiB,WACAjB,EAAAsB,YACA9wB,EAAA+wB,aAAAvB,EAAAsB,WAAAtB,CAAA,EACAxvB,EAAA0wB,YAAAlB,CAAA,CACA,CAEA,OAAArwB,IACA,EAEAsjB,QAAA,SAAAuO,GAOA,IANA,IAAA3sB,EACA4sB,EAAA9xB,KACAY,EAAAsvB,EAAA2B,CAAA,EAAA,GACAE,EAAAnxB,EACAC,EAAAixB,EAAA,GAAAR,WACAU,EAAAF,EAAA,GAAAE,gBACA,EAAAD,EAAAE,WAAAjL,GAAAC,IACA8K,EAAAA,EAAAE,WAAA,GAEA,IAAA/sB,EAAA,EAAA4sB,EAAA9K,GAAAC,GAAA/hB,EAAA6sB,EAAAJ,aAAAG,EAAA,IAAA5sB,CAAA,GACA6sB,EAAApP,YAAAmP,EAAA5sB,EAAA,EAEAgtB,EAAAF,EAAAA,EAAAE,YAAArxB,EAAA8wB,WAGA,OAFA9wB,EAAA+wB,aAAAhxB,EAAAsxB,CAAA,EAEAlyB,IACA,EAEAmyB,UAAA,SAAAN,GACA,OAAA7xB,KAAAiB,KAAA,WACA,IAAAovB,EAAAH,EAAAlwB,IAAA,EACAqjB,EAAAgN,EAAAhN,SAAA,EAEAA,EAAA2D,GAAAC,GACA5D,EAAAC,QAAAuO,CAAA,EAEAxB,EAAAa,OAAAW,CAAA,CACA,CAAA,CACA,EAEAO,KAAA,SAAAP,GACA,OAAA7xB,KAAAiB,KAAA,WAAAivB,EAAAlwB,IAAA,EAAAsjB,QAAAuO,CAAA,CAAA,CAAA,CACA,EAKAlc,IAAA,SAAA0c,EAAAxX,GACA,IAAAwV,EACAzsB,EACA0uB,EACAC,EAAAjf,GAAAkf,iBACA,OAAAhG,EAAA6F,CAAA,GAAA3L,GAAAE,EACA/L,IAAA1L,IACAkhB,EAAArwB,KAAA,GACAsyB,EAAAC,EAAAA,EAAAlC,EAAA,IAAA,EAAAA,EAAAoC,aAAAJ,GAGAE,EAAA,MAAAD,EAAAA,EAAAI,iBAAAL,CAAA,EAAAhC,EAAArJ,GAAAJ,GAAAyL,GAAAC,GAGAtyB,KAAAiB,KAAA,WACA0xB,EAAA3yB,KAAAqyB,EAAAxX,CAAA,CACA,CAAA,EAIA7a,KAAAiB,KAAA,WACA,IAAA2C,KAAAyuB,EACAM,EAAA3yB,KAAA4D,EAAAyuB,EAAAzuB,EAAA,CACA,CAAA,CAEA,EAEA0Z,SAAA,SAAAsV,GAKA,IAJA,IAAAC,EAEAC,EAFA5tB,EAAA,EACA6tB,EAAA3G,EAAAwG,EAAAxG,EAGAyG,EAAA7yB,KAAAkF,CAAA,KAAA,CAEA,IADA4tB,EAAAD,EAAAC,YACAA,EAAAE,SAAAJ,CAAA,EACA,MAAA,CAAA,EACA,GAAA,IAAAC,EAAAI,UAAA,CAAA,GAAA7G,EAAA8G,EAAAL,EAAAD,UAtmBA,EAsmBA,EAAAxG,GAAA9mB,QAAAytB,CAAA,EACA,MAAA,CAAA,CACA,CAEA,MAAA,CAAA,CACA,EAEAtyB,SAAA,SAAAmyB,GACA,IAAAO,EACAN,EACAO,EAEAC,EACAC,EACAC,EACAC,EACAtuB,EAAA,EACAkC,EAAA,EAEA,GAAAwrB,EAGA,IAFAO,EAAAP,EAAAxoB,MAAA+hB,CAAA,GAAA,GAEA0G,EAAA7yB,KAAAkF,CAAA,KAKA,GAJAsuB,EAAAX,EAAAC,UAEAS,EADAA,IAAApkB,GACAqkB,IAAArkB,GAEAokB,EACA,KAAAF,EAAAF,EAAA/rB,CAAA,KACAosB,EAAAC,IAAAJ,CAAA,OAMA,GAHAK,EAAAb,EAAAD,UAtoBA,GAuoBAQ,EAAA,IAAAP,EAAAI,UAAA7G,EAAA8G,EAAAQ,CAAA,EAAAtH,EAEA,CACA,KAAAiH,EAAAF,EAAA/rB,CAAA,KACAgsB,EAAA9tB,QAAA8mB,EAAAiH,EAAAjH,CAAA,EAAA,IACAgH,GAAAC,EAAAjH,GAGAsH,KADAJ,EAAAJ,EAAAE,CAAA,KAEAP,EAAAD,UAAAU,EACA,CAKA,OAAAtzB,IACA,EAEAM,YAAA,SAAAsyB,GACA,IAAAO,EACAN,EACAO,EAEAC,EACAC,EACAC,EACAC,EACAtuB,EAAA,EACAkC,EAAA,EAEA,GAAAwrB,EAGA,IAFAO,EAAAP,EAAAxoB,MAAA+hB,CAAA,GAAA,GAEA0G,EAAA7yB,KAAAkF,CAAA,KAKA,GAJAsuB,EAAAX,EAAAC,UAEAS,EADAA,IAAApkB,GACAqkB,IAAArkB,GAEAokB,EACA,KAAAF,EAAAF,EAAA/rB,CAAA,KACAosB,EAAA3b,OAAAwb,CAAA,OAMA,GAHAK,EAAAb,EAAAD,UAlrBA,GAmrBAQ,EAAA,IAAAP,EAAAI,UAAA7G,EAAA8G,EAAAQ,CAAA,EAAAtH,EAEA,CACA,KAAAiH,EAAAF,EAAA/rB,CAAA,KACA,KAAA,CAAA,EAAAgsB,EAAA9tB,QAAA8mB,EAAAiH,EAAAjH,CAAA,GACAgH,EAAAA,EAAAtW,QAAAsP,EAAAiH,EAAAjH,EAAAA,CAAA,EAGAsH,KADAJ,EAAAJ,EAAAE,CAAA,KAEAP,EAAAD,UAAAU,EACA,CAKA,OAAAtzB,IACA,EAEA+B,KAAA,WACA,OAAA/B,KAAAiB,KAAA,WAAAjB,KAAAgnB,GAAAJ,GAAA+M,QAAA,MAAA,CAAA,CACA,EAEA7xB,KAAA,WACA,OAAA9B,KAAAiB,KAAA,WAAAjB,KAAAgnB,GAAAJ,GAAA+M,QAAA,OAAA,CAAA,CACA,EAEA/Y,KAAA,SAAAgZ,EAAA/vB,GAGA,IAFA,IACAwsB,EADAnrB,EAAA,EAEAmrB,EAAArwB,KAAAkF,CAAA,KAAA,CACA,GAAArB,IAAAsL,GACA,OAAAkhB,EAAAwD,aAAAD,CAAA,EACAvD,EAAAyD,aAAAF,EAAA/vB,CAAA,CACA,CACA,OAAA7D,IACA,EAEA4f,WAAA,SAAAgU,GACA,OAAA5zB,KAAAiB,KAAA,WAAAjB,KAAA+zB,gBAAAH,CAAA,CAAA,CAAA,CACA,EAEAI,OAAA,WACA,IACAC,EADAj0B,KAAA,GACAgnB,GAAAW,KAAA,EACAiD,EAAAtX,GAAA4gB,aAAA9wB,GAAAmnB,gBAAA8B,GACAvB,EAAAxX,GAAA6gB,aAAA/wB,GAAAmnB,gBAAA+B,GACA,MAAA,CACA8H,IAAAH,EAAAG,IAAAtJ,EACAuJ,KAAAJ,EAAAI,KAAAzJ,CACA,CACA,EAEA0J,SAAA,WACA,IAAAjE,EAAArwB,KAAA,GACA,MAAA,CACAo0B,IAAA/D,EAAAkE,UACAF,KAAAhE,EAAAmE,UACA,CACA,EAEA5J,WAAA,SAAA/mB,GAGA,IAFA,IACAwsB,EADAnrB,EAAA,EAEAmrB,EAAArwB,KAAAkF,CAAA,KAAA,CACA,GAAArB,IAAAsL,GACA,OAAAkhB,EAAAhE,GACAgE,EAAAhE,GAAAxoB,CACA,CACA,OAAA7D,IACA,EAEA8qB,UAAA,SAAAjnB,GAGA,IAFA,IACAwsB,EADAnrB,EAAA,EAEAmrB,EAAArwB,KAAAkF,CAAA,KAAA,CACA,GAAArB,IAAAsL,GACA,OAAAkhB,EAAA/D,GACA+D,EAAA/D,GAAAzoB,CACA,CACA,OAAA7D,IACA,EAEA6a,IAAA,SAAAhX,GACA,IAAAwsB,EAAArwB,KAAA,GACA,OAAA6D,GAEAwsB,EAAAxsB,MAAAA,EACA7D,MAFAqwB,EAAAxsB,KAGA,EAKAxC,MAAA,WACA,OAAArB,KAAAy0B,GAAA,CAAA,CACA,EAEAC,KAAA,WACA,OAAA10B,KAAAy0B,GAAA,CAAA,CAAA,CACA,EAEAA,GAAA,SAAAvzB,GACA,OAAAgvB,EAAAlwB,KAAA,GAAAkB,EAAAA,EAAAlB,KAAAgnB,GAAAC,GAAA/lB,EAAA,CACA,EAEAb,KAAA,SAAAygB,GACA,IACA5b,EADA9E,EAAA,GAQA,OANAJ,KAAAiB,KAAA,WACA,IACA0zB,EADA30B,KACA40B,iBAAA9T,CAAA,EACA,IAAA5b,EAAA,EAAAA,EAAAyvB,EAAA3N,GAAAC,GAAA/hB,CAAA,GACA9E,EAAAmb,KAAAoZ,EAAAzvB,EAAA,CACA,CAAA,EACAgrB,EAAA9vB,CAAA,CACA,EAEAA,SAAA,SAAA0gB,GACA,IACAuP,EACAsE,EACAzvB,EAHA9E,EAAA,GAiBA,OAZAJ,KAAAiB,KAAA,WAEA,IADA0zB,EAAA30B,KAAAI,SACA8E,EAAA,EAAAA,EAAAyvB,EAAA3N,GAAAC,GAAA/hB,CAAA,GACAmrB,EAAAsE,EAAAzvB,IACA4b,CAAAA,GACAuP,EAAAwE,SAAAxE,EAAAwE,QAAA/T,CAAA,GAAA+T,EAAAxE,EAAAvP,CAAA,IAIA1gB,EAAAmb,KAAA8U,CAAA,CAEA,CAAA,EACAH,EAAA9vB,CAAA,CACA,EAEAS,OAAA,SAAAigB,GACA,IACAjgB,EADA4wB,EAAA,GAOA,OALAzxB,KAAAiB,KAAA,WACAJ,EAAAb,KAAAsxB,WACAxQ,GAAAoP,CAAAA,EAAArvB,CAAA,EAAAG,GAAA8f,CAAA,GACA2Q,EAAAlW,KAAA1a,CAAA,CACA,CAAA,EACAqvB,EAAAuB,CAAA,CACA,EAEAzwB,GAAA,SAAA8f,GAIA,IAFA,IAAAuP,EAEAnrB,EAAA,EAAAA,EAAAlF,KAAAgnB,GAAAC,GAAA/hB,CAAA,GAAA,CAEA,GADAmrB,EAAArwB,KAAAkF,GACA,aAAA4b,EACA,OAAAgU,EAAAzE,CAAA,EACA,GAAA,YAAAvP,EACA,MAAA,CAAAgU,EAAAzE,CAAA,EACA,GAAAA,EAAAwE,SAAAxE,EAAAwE,QAAA/T,CAAA,GAAA+T,EAAAxE,EAAAvP,CAAA,EACA,MAAA,CAAA,CACA,CACA,MAAA,CAAA,CACA,EAEAuC,SAAA,WACA,IACA0R,EACA7vB,EAFAme,EAAA,GAUA,OANArjB,KAAAiB,KAAA,WAEA,IADA8zB,EAAA/0B,KAAAiyB,WACA/sB,EAAA,EAAAA,EAAA6vB,EAAA/N,GAAAC,GAAA/hB,CAAA,GACAme,EAAA9H,KAAAwZ,EAAA7vB,EAAA,CACA,CAAA,EAEAgrB,EAAA7M,CAAA,CACA,EAEApiB,KAAA,SAAA8B,GACA,OAAA9B,EAAAjB,KAAA+C,CAAA,CACA,EAKAsX,QAAA,SAAA2a,EAAAC,EAAAC,EAAAC,GACA,OAAAn1B,KAAAiB,KAAA,WAAAoZ,EAAAra,KAAAg1B,EAAAC,EAAAC,EAAAC,CAAA,CAAA,CAAA,CACA,EAEAC,KAAA,SAAAC,EAAAC,GACA,OAAAt1B,KAAAiB,KAAA,WArhBA,IAqhBAm0B,IAzhBAG,EACAC,EACA5xB,EAHAysB,EA0hBArwB,KA1hBAq1B,EA0hBAA,EA1hBAI,EA0hBAH,EAthBApwB,EAAA,EACAA,EAAAqnB,EAAAvF,GAAAC,GAAA/hB,CAAA,GAEA,IADAqwB,EAAAhJ,EAAArnB,IACAmrB,KAAAA,EAAA,CACA,GAAA,EAAAkF,EAAAG,EAAA1O,GAAAC,GAAA,CAMA,IALAuO,EAAAD,EAAAG,EAAA,IACAN,KAAA,CAAA,EACApM,GAAAS,IAAA,EAAA+L,EAAAG,KAAA,EACAJ,EAAAG,EAAA7T,OAAA,EAAA,CAAA,EAEA4T,EACA,IAAA7xB,KAAA4xB,EAAAR,MACAY,EAAAvF,EAAAzsB,EAAA4xB,EAAAR,MAAApxB,EAAA,EAEAyxB,EACAE,EAAAG,EAAA,GAEAG,EAAAN,EAAA,CAAA,CAAA,CACA,CACA,KACA,CAkgBA,CAAA,CACA,CACA,EAEAO,EAAA5F,EAAA,CACA4F,OAAAA,EACApE,QAAAA,EACAqE,cAAAA,EACAC,cAAAA,EACA/0B,KAAAA,CACA,CAAA,EAEAivB,GAz2BA,SAAA4F,IACA,IAAAG,EAAAC,EAAApxB,EAAAqxB,EAAAC,EAAA/Q,EAAA4G,UAAA,IAAA,GACA/mB,EAAA,EACA9D,EAAA6qB,UAAAjF,GAAAC,GACAoP,EAAA,CAAA,EAqBA,IAlBA7J,EAAAnH,CAAA,GAAAqB,GAAApG,IACA+V,EAAAhR,EACAA,EAAA4G,UAAA,IAAA,GAEA/mB,EAAA,GAIAsnB,EAAAnH,CAAA,GAAAqB,GAAAC,GAAA,CAAA6F,EAAAnH,CAAA,GAAAqB,GAAA3G,IACAsF,EAAA,IAIAjkB,IAAA8D,IACAmgB,EAAA6K,EACA,EAAAhrB,GAGAA,EAAA9D,EAAA8D,CAAA,GAEA,GAAA,OAAAixB,EAAAlK,UAAA/mB,IAEA,IAAAJ,KAAAqxB,EACAhsB,EAAAkb,EAAAvgB,GAIAugB,KAHA6Q,EAAAC,EAAArxB,MAQAuxB,GAAAH,IAAAF,EAAAE,CAAA,IAAAD,EAAAjN,GAAAqC,IAAA6K,CAAA,KAGAE,EAFAH,GACAA,EAAA,CAAA,EACA9rB,GAAA6e,GAAAqC,IAAAlhB,CAAA,EAAAA,EAAA,IAGAA,GAAA6rB,EAAA7rB,CAAA,EAAAA,EAAA,GAIAkb,EAAAvgB,GAAAgxB,EAAAO,EAAAD,EAAAF,CAAA,GAGAA,IAAA/mB,KACAkW,EAAAvgB,GAAAoxB,IAOA,OAAA7Q,CACA,CAEA,SAAAqM,EAAAhQ,EAAA0J,EAAAkL,GACA,IAAA,IAAApxB,EAAAoxB,GAAA,EAAApxB,EAAAkmB,EAAApE,GAAAC,GAAA/hB,CAAA,GACA,GAAAkmB,EAAAlmB,KAAAwc,EACA,OAAAxc,EACA,MAAA,CAAA,CACA,CAEA,SAAAqxB,EAAAh2B,GACA,OAAAisB,EAAAjsB,CAAA,GAAAmmB,GAAA3G,CACA,CAEA,SAAAgW,EAAAx1B,GACA,IAAA,IAAAuE,KAAAvE,EACA,MAAA,CAAA,EACA,MAAA,CAAA,CACA,CAEA,SAAAy1B,EAAAz1B,GACA,GAAA,CAAAA,GAAAisB,EAAAjsB,CAAA,GAAAmmB,GAAAC,EACA,MAAA,CAAA,EAEA,IAAA/iB,EACAooB,EAAAhF,GAAAE,EACApF,EAAAvR,OAAAyb,GAAAlK,eACA0U,EAAA1U,EAAAyJ,KAAAhrB,EAAA,aAAA,EACAk2B,EAAAl2B,EAAAT,aAAAS,EAAAT,YAAAksB,IAAAlK,EAAAyJ,KAAAhrB,EAAAT,YAAAksB,GAAA,eAAA,EAEA,GAAAzrB,EAAAT,aAAA,CAAA02B,GAAA,CAAAC,EACA,MAAA,CAAA,EAIA,IAAA7yB,KAAArD,GAEA,OAAAisB,EAAA5oB,CAAA,GAAA8iB,GAAAI,GAAAhF,EAAAyJ,KAAAhrB,EAAAqD,CAAA,CACA,CAEA,SAAA3C,EAAAV,EAAAwC,GACA,IAAAmC,EAAA,EAEA,GAAAwxB,EAAAn2B,CAAA,EACA,KAAA2E,EAAA3E,EAAAymB,GAAAC,IACA,CAAA,IAAAlkB,EAAAwoB,KAAAhrB,EAAA2E,GAAAA,EAAA3E,EAAA2E,EAAA,EADAA,CAAA,SAMA,IAAAA,KAAA3E,EACA,GAAA,CAAA,IAAAwC,EAAAwoB,KAAAhrB,EAAA2E,GAAAA,EAAA3E,EAAA2E,EAAA,EACA,MAIA,OAAA3E,CACA,CAEA,SAAAm2B,EAAAn2B,GACA,IAAAa,EAAA,CAAA,CAAAb,GAAA,CAAAymB,GAAAC,KAAA1mB,GAAAA,EAAAymB,GAAAC,GACAiG,EAAAV,EAAAjsB,CAAA,EACA,MAAAg2B,CAAAA,EAAArJ,CAAA,IAAAA,GAAAxG,GAAAnjB,GAAA,IAAAnC,GAAAorB,EAAAprB,CAAA,GAAAslB,GAAAG,GAAA,EAAAzlB,GAAAA,EAAA,KAAAb,EACA,CAEA,SAAA2yB,EAAArvB,GAEA,OADAA,EAAAuG,MAAA+hB,CAAA,GAAA,IACAwK,KAAAvK,CAAA,CACA,CAEA,SAAAyI,EAAAhC,EAAA/R,GAIA,IAHA,IAAA8V,GAAA/D,EAAAvB,YAAAluB,IAAAwxB,iBAAA9T,CAAA,GAAA,GACA5b,EAAA0xB,EAAA5P,GAAAC,GAEA/hB,CAAA,IACA,GAAA0xB,EAAA1xB,IAAA2tB,EACA,OAAA,CAGA,CAEA,SAAAzB,EAAAf,EAAAwG,EAAA1F,GACA,GAAAnI,GAAAqC,IAAA8F,CAAA,EACA,IAAA,IAAAjsB,EAAA,EAAAA,EAAAisB,EAAAnK,GAAAC,GAAA/hB,CAAA,GACAksB,EAAAf,EAAAwG,EAAA1F,EAAAjsB,EAAA,OAEAsnB,EAAA2E,CAAA,GAAAzK,GAAAE,EACAyJ,EAAAyG,mBAAAD,EAAA1F,CAAA,EAEAd,EAAAe,sBAAAyF,EAAA1F,EAAA8B,SAAA9B,EAAAA,EAAA,EAAA,CACA,CAEA,SAAAwB,EAAAtC,EAAA5U,EAAAZ,GACA,IACAwV,EAAArJ,GAAAJ,GAAAnL,KAAAtM,KACAkhB,EAAArJ,GAAAJ,GAAAnL,GAIA,SAAAA,EAAAZ,GACA4R,EAAAhR,EAAApT,YAAA,IAAAmkB,EAAA3R,CAAA,GAAA6L,GAAAG,IACAhM,GAAA,MACA,OAAAA,CACA,EARAY,EAAAZ,CAAA,EACA,CAAA,MAAA1S,IACA,CAQA,SAAA0tB,EAAAN,EAAAwB,GAGA,CAAA,IAAAA,GACAxB,EAAAG,EAAA7T,OAAA,EAAA,CAAA,EACA,EAAA0T,EAAAG,EAAA1O,GAAAC,IACA+P,EAAAzB,EAAAG,EAAA,GACArb,EAAAkb,EAAAlF,GAAA2G,EAAAhC,MAAAgC,EAAA/B,SAAA+B,EAAA9B,OAAA8B,EAAA7B,SAAA,CAAA,CAAA,GAIA,CAAA,GADAj0B,EAAAwwB,EAAA6D,EAAAhJ,CAAA,IAEAA,EAAA1K,OAAA3gB,EAAA,CAAA,CAEA,CAEA,SAAA00B,EAAAvF,EAAA5U,EAAA5X,GACA4X,IAAA4Q,GAAA5Q,IAAA6Q,EACA+D,EAAA5U,GAAA5X,EAEA8uB,EAAAtC,EAAA5U,EAAA5X,CAAA,CACA,CAEA,SAAAwW,EAAAgW,EAAA2E,EAAAmB,EAAAjB,EAAAC,EAAA8B,GACA,IAIArzB,EACA2xB,EAEA2B,EACAC,EARAC,EAAApB,EAAAG,CAAA,EACAkB,EAAA,GACA3kB,EAAA,GACAxN,EAAA,EAeA+vB,EAPAmC,GACAlC,EAAAiB,EAAAjB,OACAiB,EAAAlwB,MACAixB,EAAAf,EAAAe,SACAC,EAAAhB,EAAAgB,KACAG,EAAAnB,EAAAmB,cACAnC,EAAAgB,EAAAhB,SACAgB,EAAAlB,UAGAkB,EACAmB,EAAAA,GAAA,GAKA,IAJArC,EAAAA,GAAA,IACAC,EAAAA,GAAA,QACA+B,EAAAA,GAAA,CAAA,EAEA/xB,EAAAqnB,EAAAvF,GAAAC,GAAA/hB,CAAA,GACA,GAAAqnB,EAAArnB,GAAAmrB,KAAAA,EAAA,CACAkF,EAAAhJ,EAAArnB,GACA,KACA,CAWA,IAAAtB,KARA2xB,IACAA,EAAA,CACAlF,GAAAA,EACAqF,EAAA,EACA,EACAnJ,EAAAhR,KAAAga,CAAA,GAGAP,EAEAqC,EAAAzzB,GADAA,IAAAyoB,GAAAzoB,IAAA0oB,EACA+D,EAAAzsB,GAEAssB,EAAAG,CAAA,EAAA1a,IAAA/R,CAAA,EAGA,IAAAA,KAAAyzB,EACAA,EAAAzzB,KAAAoxB,EAAApxB,IAAAoxB,EAAApxB,KAAAuL,KACAuD,EAAA9O,GAAAoxB,EAAApxB,IAGA,GAAAmyB,EAAArjB,CAAA,EA4EAukB,GACApB,EAAAN,CAAA,MA7EA,CACA,IAAAgC,EACApxB,EACAqxB,EACAC,EACAC,EACAC,EACAC,EACAjC,EACAkC,EACAC,EAAAb,EAAA,EAAAvF,EAAA8D,EAAAD,EAAAG,CAAA,EACAF,EAAA,CACAR,MAAAtiB,EACAuiB,SAAAmC,EAAAjB,EAAAlB,EACAC,OAAAA,EACAC,SAAAA,CACA,EAMA,GALA,CAAA,IAAA2C,IACAA,EAAAvC,EAAAG,EAAA1O,GAAAC,GACAsO,EAAAG,EAAAna,KAAAia,CAAA,GAGA,IAAAsC,EACA,GAAA,EAAA7C,EACA2C,EAAA5O,GAAA/H,IAAA,EACA0U,EAAA,WAMA,IAAA/xB,KALA2zB,EAAAvO,GAAA/H,IAAA,EACA4W,EAAAN,EAAAK,EACAzxB,EAAAqvB,EAAAJ,MAAAH,GAAA4C,EACAL,EAAA,GAAA9K,GAAAxO,IAAA,EAAA0Z,EAAA3C,EAAAsC,CAAA,EAAAtC,GAAA,GAEAviB,EACA+kB,EAAA5yB,WAAAwyB,EAAAzzB,EAAA,EACA8zB,EAAA7yB,WAAA6N,EAAA9O,EAAA,EACA+zB,GAAAD,EAAAD,GAAA5K,EAAAyK,EAAA1zB,IAAAsxB,GAAAsC,EAAAA,EAAAvC,EAAA,EAAA,EAAAA,CAAA,EAAAwC,EACA7B,EAAAvF,EAAAzsB,EAAA+zB,CAAA,EACApB,EAAAY,CAAA,GACAA,EAAAQ,EAAA,CACA9E,KAAAxC,EACA5U,KAAA7X,EACAqC,MAAAwxB,EACAxW,IAAA0W,EACAxxB,IAAAuxB,EACAK,IAAAP,EACArB,QAAA,CACAjB,OAAAA,EACA8C,eAAAV,EACArC,SAAAA,EACAE,SAAAA,EACAgC,KAAAA,CACA,EACAc,UAAAL,CACA,CAAA,EAIArB,EAAAW,CAAA,GACAA,EAAA,GAAAM,EAAA9K,GAAAxO,IAAA,EAAA+W,EAAA4C,CAAA,CAAA,EAEA1xB,GACA0vB,EAAAN,CAAA,EACAgB,EAAApB,CAAA,GACAA,EAAA,GAGAK,EAAAG,MAAA3M,GAAAO,IAAA,EAAAoM,CAAA,CACA,EACAH,EAAAG,MAAA3M,GAAAO,IAAA,EAAAoM,CAAA,MAEA,CACA,IAAA/xB,KAAA8O,EACAkjB,EAAAvF,EAAAzsB,EAAA8O,EAAA9O,EAAA,EACAiyB,EAAAN,CAAA,CACA,CAEA,CAGA,CA8BA,SAAAT,EAAAzE,GACA,MAAA,CAAA,EAAAA,EAAArJ,GAAAO,KAAA8I,EAAArJ,GAAAI,KAAAiJ,EAAA6H,eAAA,EAAAlR,GAAAC,GACA,CAEA,SAAAiJ,EAAApP,GACA,GAAA,IAAAmL,UAAAjF,GAAAC,GACA,OAAAjnB,KAEA,IAGAm4B,EACA9H,EAJA+H,EAAA,IAAAlI,EACAmI,EAAAvX,EACA5b,EAAA,EAIA,GAAAsnB,EAAA1L,CAAA,GAAA4F,GAAAE,EAWA,IAVAyR,EAAA,GAIAF,EAHA,MAAArX,EAAA1b,OAAA,CAAA,IACAirB,EAAAjtB,GAAAof,cAAA,KAAA,GACAha,UAAAsY,EACAuP,EAAAjwB,UAGAgD,GAAAwxB,iBAAA9T,CAAA,EAGA5b,EAAAizB,EAAAnR,GAAAC,GAAA/hB,CAAA,GACAmzB,EAAA9c,KAAA4c,EAAAjzB,EAAA,EAGA,GAAAmzB,EAAA,CAIA,IAHA7L,EAAA6L,CAAA,GAAA3R,GAAAE,GAAA8P,EAAA2B,CAAA,GAAAA,IAAA/kB,IAAA+kB,IAAAA,EAAAC,OACAD,EAAA,CAAAA,IAEAnzB,EAAA,EAAAA,EAAAmzB,EAAArR,GAAAC,GAAA/hB,CAAA,GACAkzB,EAAAlzB,GAAAmzB,EAAAnzB,GAEAkzB,EAAApR,GAAAC,GAAAoR,EAAArR,GAAAC,EACA,CAEA,OAAAmR,CACA,CAqeAG,EAAA,GACAC,EAAA,wBAFA,IACAD,EACAC,EA0CAC,GACAC,EACAC,EAGAh2B,EACAi2B,EAWAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EAGAC,EA1BAC,EACAC,GAhDAC,GAcA,SAAAlU,EAAAmU,GACA,IAAAC,EAAAxN,UAAAjF,GAAAC,GACA,GAAAwS,EAAA,EAEA,OAAAlB,EAGA,GAAAiB,EAEAnU,EAAAmT,GAAAgB,EACAjB,EAAAhd,KAAA8J,CAAA,MAEA,CACAnkB,EAAA8nB,GAAAmC,IAAA9F,EAAAkT,CAAA,EACA,GAAA,CAAA,EAAAr3B,EAAA,CACA,GAAAu4B,EAAA,EAAAA,GAOA,OAAAlB,EAAAr3B,GAAAs3B,GALA,OAAAnT,EAAAmT,GACAD,EAAA1W,OAAA3gB,EAAA,CAAA,CAMA,CACA,CAEA,EAEAw4B,GAIAL,EAAA,GAEA12B,EAAAqmB,GAAArmB,KACAi2B,EAAA,CACAlS,GAAApG,EACAoG,GAAAG,EACAH,GAAAE,EACAF,GAAAnjB,EACAmjB,GAAAC,EACAD,GAAA3G,EACA2G,GAAAK,GAIA8R,EAAA,CAAAnS,GAAAK,EAAAL,GAAAE,GACAkS,EAAApS,GAAAG,EACAkS,EAAA,CAAArS,GAAAK,EAAAL,GAAApG,GACA0Y,EAAA,CAAA,CAAA,EAAAtS,GAAApG,GACA2Y,EAAA,CAAA,CAAA,EAAAvS,GAAApG,GACA4Y,EAAA,CAAA,KAAA,CAAAxS,GAAAK,EAAAL,GAAA3G,IAIAoZ,EAAA,0DAGAC,EAAA,CACAxG,UAAA,CAAA,gBAAAiG,GACAc,OAAA,CAAA,OANA,yCAOAC,gBAAAZ,EACAa,WAAAb,EACAc,aAAAd,EACAe,gBAAAd,EACAe,WAAA,CAAA,KAAAjB,GACAkB,mBAAA,CAAA,GAAAnB,GACAoB,aAfA,CAAA,CAAA,OAAA,CAAAxT,GAAAE,EAAAF,GAAAnjB,EAAAmjB,GAAAK,IAgBAoT,yBAAA,CACAC,qBAAAnB,EACAoB,WAAArB,CACA,EACAsB,iBAAA,CACA5P,EAAA,CAAA,SAAAyO,GACAxO,EAAA,CAAA,SAAAwO,EACA,EACAjX,WAAA,CACAqY,WAAA,CAAA,OArBA,6BAsBAlY,SAAA,CAAA,QArBA,mCAsBAC,cAAA,CAAA,IAAAwW,GACA1W,cAAA4W,EACA7W,eAAA8W,EACAuB,aAAAxB,EACAyB,WAAAxB,CACA,EACAyB,SAAA,CACAC,SAAA1B,EACA2B,UAAA3B,EACA4B,eAnCA,CAAA,CAAA,QAAA,SAAA,CAAAnU,GAAAE,EAAAF,GAAAnjB,EAAAmjB,GAAAK,GAoCA,EACA+T,UAAA,CACAC,cAAA7B,EACA8B,0BAAA9B,EACA+B,YAAA/B,EACAgC,cAAAhC,EACAiC,SAAAjC,EACAkC,aAAAlC,EACAmC,kBAAAnC,EACAoC,wBAAApC,EACAqC,mBAAArC,EACAsC,qBAAAtC,EACAuC,kBAAAvC,EACAwC,UAAAxC,CACA,CACA,EAvEAI,GA4FA,CACAqC,UAAAC,EAAA,EAEAC,UAAAD,EAAA,CAAA,CAAA,EAUAE,UAAA,SAAAv7B,EAAAw7B,EAAAC,EAAAC,GAMA,SAAAC,EAAA3pB,EAAAwpB,EAAAI,EAAAC,EAAAC,EAAAC,GACA,IAAA,IAAA7gB,KAAAsgB,EACA,GAAAA,EAAA/U,GAAAU,KAAAjM,CAAA,GAAAlJ,EAAAyU,GAAAU,KAAAjM,CAAA,EAAA,CACA,IAaA8gB,EACAC,EACAC,EACAC,EACAC,EACAz3B,EACAkC,EACAw1B,EApBAC,EAAA,CAAA,EAEAC,EAAAf,EAAAtgB,GAEAshB,EADAp6B,EAAAm6B,CAAA,GACApW,GAAAC,EACAqW,EAAAhU,GAAAqC,IAAAyR,CAAA,EAAAA,EAAA,CAAAA,GACAG,EAAAd,EAAA1gB,GACAyhB,EAAA3qB,EAAAkJ,GACA0hB,EAAAx6B,EAAAu6B,CAAA,EACAE,EAAAd,EAAAA,EAAA,IAAA,GACAhtB,EAAA,eAAA8tB,EAAA3hB,EAAA,yBACA4hB,EAAA,GACAC,EAAA,GAUAL,EAAAA,IAAA9tB,GAAA,GAAA8tB,EAGA,GAAAF,GAAAI,GAAAzW,GAAAC,EACAyV,EAAA3gB,GAAA,GACA4gB,EAAA5gB,GAAA,GACAygB,EAAAgB,EAAAJ,EAAAG,EAAAb,EAAA3gB,GAAA4gB,EAAA5gB,GAAA2hB,EAAA3hB,CAAA,EACA4T,GAAApuB,KAAA,CAAAsR,EAAA6pB,EAAAC,GAAA,SAAAn7B,EAAA2C,GACA05B,EAAA15B,EAAA4X,EAAA,GACA,OAAA5X,EAAA4X,EAEA,CAAA,OAEA,GAAA,CAAAshB,EAAA,CACA,IAAA73B,EAAA,EAAAA,EAAA83B,EAAAhW,GAAAC,GAAA/hB,CAAA,GAKA,GAJAy3B,EAAAK,EAAA93B,GAGAu3B,EAFA95B,EAAAg6B,CAAA,GAEAjW,GAAAE,GAAA,CAAA,IAAA8K,EAAAiL,EAAA/D,CAAA,EAOA,IALAyE,EAAA9hB,KAAAmL,GAAAE,CAAA,EAGA2V,EAAAI,EAAA13B,MApJA,GAoJA,EACAq4B,EAAAA,EAAAvR,OAAAwQ,CAAA,EACAn1B,EAAA,EAAAA,EAAAm1B,EAAAvV,GAAAC,GAAA7f,CAAA,GAAA,CAIA,IADAs1B,GADAF,EAAAD,EAAAn1B,GAAAnC,MAvJA,GAuJA,GACA,GACA23B,EAAA,EAAAA,EAAAJ,EAAAxV,GAAAC,GAAA2V,CAAA,GAEA,GAAAM,IAAAV,EAAAI,GAAA,CACAC,EAAA,CAAA,EACA,KACA,CAEA,GAAAA,EACA,KACA,MAKA,GAFAQ,EAAA9hB,KAAAohB,CAAA,EAEAQ,IAAAR,EAAA,CACAE,EAAA,CAAA,EACA,KACA,CAIAA,IACAW,EAAAN,IAAAD,KAGAb,EAAA3gB,GAAAyhB,IAEAT,EAAA/K,EAAAuL,EAAAT,CAAA,EAAA,EAAAgB,KACAnB,EAAA5gB,GAAAghB,EAAAC,EAAAQ,IAEAlB,GACA5sB,QAAAC,KAAAC,EAAA,iCAAA6tB,EAAAnb,YAAA,EAAA,yBAAAkb,EACA,+BAAAG,EAAA1G,KAAA,IAAA,EAAA3U,YAAA,EAAA,OACA,EAAAsb,EAAAl8B,QAAA,4BAAAk8B,EAAA3G,KAAA,IAAA,EAAA1xB,MA1LA,GA0LA,EAAA0xB,KAAA,IAAA,EAAA,MAAA,GAAA,EAEA,OAAApkB,EAAAkJ,EACA,CACA,CAEA,CAlGA,IAAA2gB,EAAA,GACAC,EAAA,GACAoB,EAAApO,GAAAyG,OAAA,CAAA,EAAA,GAAAv1B,CAAA,EACAmxB,EAAArC,GAAAqC,QACA6L,EAAAlO,GAAA0G,cA4GA,OAbAmG,EAAAuB,EAAA1B,EAAAE,GAAA,GAAAG,EAAAC,CAAA,EAUA,CAAAkB,EAAAE,CAAA,GAAAzB,GACA5sB,QAAAC,KAAA,6DAAAiE,GAAApE,KAAAsD,UAAAirB,EAAA,KAAA,CAAA,CAAA,EAEA,CACAC,SAAAtB,EACAuB,UAAAtB,CACA,CACA,CACA,GAwtJA5D,GAAAnlB,GAAA,kBAAA,SAAAsqB,EAAAzH,EAAAnsB,GACA,IAGAohB,EACAyS,EACAC,EACAxnB,EANA,OAAA,IAAA2V,UAAAjF,GAAAC,GACAjnB,MAEAorB,EAAA,GACAyS,EAAAxO,GAAA2G,cAAAG,CAAA,EAKAyH,GAUAA,EAAAA,EAAA5W,GAAAC,IAAA9X,GAAAyuB,EAAA,CAAAA,EAAA,IAAAA,GACAG,EAAA,EAEA,EAAAH,EAAA5W,GAAAC,KACA4W,EACAxO,GAAApuB,KAAA28B,EAAA,SAAA14B,EAAAkC,IACA02B,EAAA12B,KACA+H,IACAic,EAAA7P,KAAAyiB,EAAAF,EAAA3H,EAAAnsB,EAAA0uB,EAAAC,CAAA,CAAA,CACA,CAAA,EAGAtJ,GAAApuB,KAAA28B,EAAA,SAAA14B,EAAAkC,GACA02B,EAAAvE,GAAAnyB,CAAA,GACA,MAAA+uB,GAAAsC,GAAAwF,MAAAH,CAAA,GAAA9U,GAAArmB,KAAAwzB,CAAA,GAAAzP,GAAA3G,GAAAoW,EAAA/uB,EAAA02B,CAAA,GAEA3H,IAAAhnB,KACAic,EAAA7P,KAAAuiB,CAAA,CACA,CAAA,EAEAxnB,EAAA,IAAA8U,EAAApE,GAAAC,GAAAmE,EAAA,GAAAA,GAEA9U,GA/BAunB,GAAA,CAAA1H,EAAA7f,EAAA8U,EAgCA,GAMA8S,QAAA,WACAH,EAAA,EACA,IAAAG,EAAA7O,GAAAyG,OAAA,CAAA,EAAA,GAAA4C,CAAA,EAEA,OADA,OAAAwF,EAAA,KACAA,CACA,EAMAzF,GAAA0F,eAAA,SAAAC,GACAL,EAAA,EACA,IAAAM,EAAA3F,EAAAyF,eACA,GAAAC,IAAAjvB,GACA,OAAAkgB,GAAAyG,OAAA,CAAA,EAAA,GAAAuI,CAAA,EAGA3F,EAAAyF,eAAA9O,GAAAyG,OAAA,CAAA,EAAA,GAAAuI,EAAA/E,GAAAwC,UAAAsC,EAAA9E,GAAAuC,UAAA,CAAA,EAAAwC,CAAA,EAAAX,QAAA,CACA,EAOAjF,GAAAwF,MAAA,SAAAK,GACA,OAAAA,aAAA7F,IAAA,CAAA6F,EAAAC,SAAA,EAAAC,SACA,EAYA/F,GAAAgG,UAAA,SAAAC,EAAAD,EAAAN,GACA,IAAAQ,EAAA3V,GAAArmB,KAAA+7B,CAAA,GAAAhY,GAAAE,EACA6S,EAAAxN,UAAAjF,GAAAC,GACA/hB,EAAA,EACA,GAAAu0B,EAAA,GAAA,CAAAkF,EAEA,OAAAtP,GAAAyG,OAAA,CAAA,EAAA,CAAA10B,OAAAi4B,EAAArS,GAAAC,EAAA,EAAAoS,CAAA,EAEA,GAAAsF,EACA,GAAA3V,GAAArmB,KAAA87B,CAAA,GAAA/X,GAAA3G,EAEAsZ,EAAA9d,KAAA,CACAzW,KAAA45B,EACAE,iBAAAH,EACAN,eAAAA,CACA,CAAA,OAGA,KAAAj5B,EAAAm0B,EAAArS,GAAAC,GAAA/hB,CAAA,GACA,GAAAm0B,EAAAn0B,GAAAJ,OAAA45B,EAAA,CACA,GAAAjF,EAAA,EAAAA,GAGA,OAAApK,GAAAyG,OAAA,CAAA,EAAA,GAAAuD,EAAAn0B,EAAA,EAFAm0B,EAAAxX,OAAA3c,EAAA,CAAA,CAGA,CAIA,EAEAuzB,IAt+JA,SAAAmD,EAAAG,GACA,SAAA8C,EAAAt+B,GACA,IAAAqD,EACAiX,EACAikB,EACA,IAAAl7B,KAAArD,EACAA,EAAAymB,GAAAU,KAAA9jB,CAAA,IAEAiX,EAAAta,EAAAqD,IACAk7B,EAAAn8B,EAAAkY,CAAA,IACA6L,GAAAnjB,EACAhD,EAAAqD,GAAAiX,EAAAkhB,EAAA,EAAA,GACA+C,GAAApY,GAAAC,IACApmB,EAAAqD,GAAAi7B,EAAAhkB,CAAA,IAEA,OAAAta,CACA,CACA,OAAAs+B,EAAAxP,GAAAyG,OAAA,CAAA,EAAA,GAAAsD,CAAA,CAAA,CACA,CA2IA,SAAA2E,IACArF,EAAAA,GACA,IAAAqG,EAAAzF,GAAAqC,SAAA,EACAhD,EAAAA,GACA,IAAAqG,EAAAtG,CAAA,CACA,CAOA,SAAAqG,EAAAZ,GACA,IAyBA7nB,EAFA2oB,EA6DAC,EACAC,EAGAC,EAjBAC,EAAAA,EAKAC,EAAAA,EAkDA5a,EACA6a,EACAC,EACAC,EAjIAC,EAAA1/B,KACA2/B,EAAA,WAGAC,EAAAvQ,GAAA,MAAA,EACAwQ,EAAAxQ,GAAA,qDAAA,EACAyQ,EAAAD,EAAA,GACAE,EAAA1Q,GAAAwQ,EAAAz/B,SAAA,KAAA,EAAAq0B,GAAA,CAAA,CAAA,EAKAuL,GAHAJ,EAAA1O,OAAA2O,CAAA,EACAA,EAAA99B,KAAA,EAAAD,KAAA,EAEAm+B,EAAAH,CAAA,GACAI,EAAA,CACAxV,EAAA,IAAAsV,EAAAtV,EACAC,EAAA,IAAAqV,EAAArV,CACA,EACAwV,GACAC,EAAA9sB,GAAA+sB,UAAAC,UAEAC,EAAA,YACAJ,EAAAC,EAFAI,EAAA,WAEA,OAAA,EACAC,EAAAL,EAAAI,GAAA,UAAA,EACAvB,EAAAmB,EAAAI,GAAA,OAAA,EACAE,EAAAN,EAAAI,GAAA,KAAA,EAEAG,EAAAh8B,SAGA,EAAAw7B,EACA7pB,EAAAqqB,EAAAP,EAAAG,GAAAJ,EAAA,EAAAC,EAAAI,GAAA,IAAAL,CAAA,CAAA,EAAA,EAAA,EAGA,EAAAM,EACAnqB,EAAAqqB,EAAAP,EAAAG,GAAAG,EAAA,EAAAN,EAAAI,GAAA,IAAAE,CAAA,CAAA,EAAA,EAAA,EAGA,EAAAzB,IACA3oB,EAAAqqB,EAAAP,EAAAG,GAAAtB,EAAA,EAAAmB,EAAAI,GAAA,IAAAvB,CAAA,CAAA,EAAA,EAAA,GAGA3oB,GA0IA,SAAAsqB,IACA,IAAAC,EAAAvtB,GAAAwtB,OAAAC,YAAA,EACAC,EAAA1tB,GAAAwtB,OAAAG,aAAA,EACA,OAAA3tB,GAAA4tB,kBAAAL,EAAAG,CACA,CAKA,SAAAf,EAAAkB,GACA,MAAA,CACAzW,EAAAyW,EAAAna,GAAAI,IAAA+Z,EAAAna,GAAAK,IACAsD,EAAAwW,EAAAna,GAAAO,IAAA4Z,EAAAna,GAAAQ,GACA,CACA,CArJA6H,GAAAyG,OAAA4J,EAAA,CACAvB,eAAAA,EACAgC,KAAAA,EACAiB,eAAA,CAAA,EACAC,sBAAA,CAAArY,GAAAK,GAAA,EACA2W,oBAAAA,EACAE,0BAAAA,EACAoB,uBAAA,WACA,IAAAhrB,EAAA,CAAA,EACAupB,EAAAp/B,SAAA,yCAAA,EACA,IACA6V,EAAA,SAAAupB,EAAAlqB,IAAA,iBAAA,IAAA,EAAAwqB,GAAA,CAAAA,IAAA,SAAA7sB,GAAAkf,iBAAAsN,EAAA,qBAAA,EAAApN,iBAAA,SAAA,CACA,CAAA,MAAA6O,IAOA,OAAAjrB,CACA,EAAA,EACAkrB,0BAAA,CAAA9W,EAAA,GAAAC,EAAA,EAAA,EACA8W,QAAA7Z,GAAAS,kBAAA,QAAA,OAAA,OAAA,GAAA,KACAqZ,qBAGA7B,EAAAlqB,IAAAgqB,EApEA,QAoEA,EACAN,EACAS,EAAA9Y,GAAAS,IADA4X,EAEAS,EAAA9Y,GAAAM,IAEAuY,EAAAlqB,IAAAgqB,EAAA,SAAA,EACAL,EACAQ,EAAA9Y,GAAAS,IADA6X,EAEAQ,EAAA9Y,GAAAM,IAEA+X,EAAAC,GAAA,GAAAD,EAAAC,GAAA,GAEAqC,mBACA9B,EAAAlqB,IAAA,CAAAisB,aAjFA,SAiFAC,aAhFA,SAgFAC,UAAA,KAAA,CAAA,EAAAlX,WAAA,CAAA,EACAsU,EAAAW,EAAA7L,OAAA,EACAmL,EAAAY,EAAA/L,OAAA,EAEA6L,EAAAjV,WAAA,CAAA,GAAA,EACAwU,EAAAW,EAAA/L,OAAA,EACA,CAKA9uB,EAAAg6B,EAAA7K,OAAA8K,EAAA9K,KAKAxN,EAAAsY,EAAA9K,OAAA+K,EAAA/K,IACA,GAEA0N,iBAAA,CAAA,CAAAna,GAAAG,aAAA,WAAA,EACAia,kBAAA,CAAA,CAAApa,GAAAG,aAAA,YAAA,EACAka,qBAAA,WACA,IAAAC,EAAA,CAAA,EACA,IACA5uB,GAAArL,iBAAA,OAAA,KAAAsI,OAAAiR,eAAA,GAAA,UAAA,CACAxP,IAAA,WACAkwB,EAAA,CAAA,CACA,CACA,CAAA,CAAA,CACA,CAAA,MAAA/5B,IACA,OAAA+5B,CACA,EAAA,EACAC,sBAAA,CAAA,CAAAnZ,GAAAM,GAAA,EACA8Y,wBAAA,CAAA,CAAApZ,GAAAK,GAAA,CACA,CAAA,EAEAwW,EAAAjgB,WAAAoH,GAAAJ,CAAA,EAAA/O,OAAA,EAIAqoB,EAAAxV,GAAAwV,EAAAvV,IAGAjG,EAAAgI,GAAAhI,IACA6a,EAAAvW,GAAAC,GAAA,EACAuW,EAAAxW,GAAAI,GAAA,EACAqW,EAAAmB,EAAA,EAwDAvR,GAAA/b,EAAA,EAAA4C,GAAA,SAvDA,WACA,IACAmsB,EACAC,EAaAC,EAGAC,EACAC,EAEAC,EACAC,EAtBA,EAAApJ,GAAA,EAAAn4B,SACAihC,EAAArZ,GAAAC,GAAA,EAGA2Z,GAFAN,EAAAtZ,GAAAI,GAAA,GAEAoW,EAEA,IAHAqD,EAAAR,EAAA9C,IAGA,GAAAqD,IAGAE,EAAApW,GAAAqW,MAAAV,GAAA9C,EAAA,IAAA,EACAyD,EAAAtW,GAAAqW,MAAAT,GAAA9C,EAAA,IAAA,EACAyD,EAAAve,EAAAme,CAAA,EACAK,EAAAxe,EAAAke,CAAA,EACAO,EAAAze,EAAAoe,CAAA,EACAM,EAAA1e,EAAAse,CAAA,EACAT,EAAA3B,EAAA,EAEAyC,EAAA,EAAAJ,GAAA,EAAAC,EACAV,EAAA,CAwBA,SAAAc,EAAAC,GACAC,EAAA9e,EAAA4e,CAAA,EACAG,EAAA/e,EAAA6e,CAAA,EACA,OAAAC,IAAAC,GAAAD,EAAA,IAAAC,GAAAD,EAAA,IAAAC,CACA,EA5BAN,EAAAC,CAAA,EACAX,EAAAF,IAAA9C,GAAA,EAAAA,EAEAiD,EAAAhD,EAAAM,oBADAqD,GAAAb,GAAAC,IAKA7C,EAAA1O,OAAA2O,CAAA,EACA8C,EAAAjD,EAAAM,oBAAAC,EAAAJ,EAAA,EAAA,EACAA,EAAAhoB,OAAA,EACA6qB,EAAAhY,IAAAiY,EAAAjY,GAAAgY,EAAA/X,IAAAgY,EAAAhY,GACA0E,GAAApuB,KAAAs4B,GAAA,EAAA,WACAA,GAAAv5B,IAAA,GACAu5B,GAAAv5B,IAAA,EAAA0jC,OAAA,MAAA,CACA,CAAA,GAIAnE,EAAA8C,EACA7C,EAAA8C,EACA7C,EAAA8C,GAEA,CAcA,EASA,CAMA,SAAAvD,EAAAd,GACA,IAYAyF,EAXAC,EAAAvU,GAAAqC,QACAmS,EAAA7a,GAAA/H,IACA6iB,EAAA,aACAC,EAAAD,EAAA,WACAE,EAAAhd,GAAAC,EACAgd,EAAA,GACAC,EAAA,GACAC,EAAA,CAAA,EACAC,EAAA,GACAC,EAAAD,EACAE,EAAAT,EAAA,EAOAU,EAAA,WACA,GAAA,EAAAN,EAAAD,IAAAG,EAAA,CACAR,EAAA3a,GAAAO,IAAA,EAAA,WACAgb,EAAA,CACA,CAAA,EACA,IAGA/K,EAEAgL,EACAC,EACAxjB,EAPAyjB,EAAAb,EAAA,EACAc,EAAAD,EAAAJ,EAQA,GAAAD,EAAAM,EAAA,CACAL,EAAAI,EAAAC,EAAAN,EAEA,IAAA,IADAO,EAAAR,EACAl/B,EAAA,EAAAA,EAAA++B,EAAAD,GAAA9+B,CAAA,IACAs0B,EAAAyK,EAAA/+B,MACAiK,KAEAq1B,GADAK,EAAArL,EAAArD,QAAA,GACA2N,GACAW,EAAA/X,GAAAxO,IAAA,EAAA2mB,EAAAd,EAAA,EACA9iB,EAAA4iB,EAAA,GAEA,CAAA,IAAAW,GAAA,OAAAA,IAAAvjB,EAAAijB,EAAAh/B,GAAAu/B,IACAjL,EAAAkK,OAAA,MAAA,EACAQ,EAAAh/B,GAAA,IAAAlB,KAAAid,GAAAwjB,CAAA,GAGAG,EAAAlY,GAAAxO,IAAA,EAAAwO,GAAA1O,IAAA4mB,EAAAH,CAAA,CAAA,GAGAJ,EAAAO,CACA,CACA,MACAP,EAAAD,CAEA,EAxDApkC,KA8DAyzB,IAAA,SAAA+F,GACA,CAAA,IAAAoK,EAAApK,EAAAyK,CAAA,IACAA,EAAA1oB,KAAAie,CAAA,EACA0K,EAAA3oB,KAAAsoB,EAAA,CAAA,EACA,EAAAI,EAAAD,KAAA,CAAAG,IACAA,EAAA,CAAA,EACAjG,EAAAkD,eAAA+C,EACAI,EAAA,EAGA,EAxEAvkC,KA8EA6X,OAAA,SAAA2hB,GACAt4B,EAAA0iC,EAAApK,EAAAyK,CAAA,EACA,CAAA,EAAA/iC,IAEAgjC,EAAAriB,OAAA3gB,EAAA,CAAA,EACA+iC,EAAApiB,OAAA3gB,EAAA,CAAA,EAGA,IAAA+iC,EAAAD,KAAAG,IACAA,EAAA,CAAA,EACAjG,EAAAkD,eAAA+C,EACAR,IAAAx0B,MACA6Z,GAAAS,IAAA,EAAAka,CAAA,EACAA,EAAA,CAAA,EAIA,CACA,CAYA,SAAA3F,EAAA8G,EAAA3O,EAAAnsB,EAAAk0B,GAAAkD,IAEA,IAoBA2D,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,GACAC,GACAC,GACAC,GACAC,EACAC,EAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,EACAC,GACAC,GAGAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACAC,GACAC,GACAC,EACAC,EACAC,EACAjc,GACAkc,EACAC,EACAC,EACAnc,GACAC,GACAmc,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GAEAC,GACAC,GACAC,GACAC,EAEAC,EACAC,EACAC,GACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAcvvC,EAAAqmB,GAAArmB,KACA+uB,GAAArC,GAAAqC,QACAzwB,EAAAouB,GAAApuB,KAGAy+B,GAAA,IAAAjH,GACA0Z,GAAA9iB,GAAArI,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","file":"jst-min.js","sourcesContent":["\r\n/**\r\n * It is a generic implementation for active navigation component.\r\n *\r\n * It has two callbacks. one of which handles situations such as how it handles\r\n * the active link styling and expending the category div for that active link it\r\n * is from a category.\r\n *\r\n * Second callback takes responsibility for expending the category div expending,\r\n * hiding previously expanded category and updating active link styling as this\r\n * can vastly tackle situations for SPA application.\r\n *\r\n * Default marking for wrapper CSS class is 'jst-nav-cat' and default active link\r\n * highlighting CSS class is 'jst-nav-act'.\r\n * */\r\n\r\nclass ActiveNav {\r\n\r\n    /** represent different type of animation **/\r\n    static SLIDE = 1;\r\n    static FADE = 2;\r\n    static TOGGLE = 3;\r\n\r\n    #navId;\r\n\r\n    // indicates the CSS class which is used to mark top-level link of for navigation.\r\n    #wrapperCls = 'jst-nav-link';\r\n\r\n    /**\r\n     * when an active link can be found inside the nav as specified by navId,\r\n     * this callback gets called.\r\n     *\r\n     * this callback gets the object with various information about the active\r\n     * link as per the document hyper reference. the main job this callback is\r\n     * how it can design active link if it is a direct active link or how it\r\n     * shows the links div of category which has the active link inside.\r\n     *\r\n     * The passed object has the following:\r\n     *\r\n     *     activeDom    - the 'a' element which is the active link\r\n     *     wrapper      - holder div of '.jst-nav-cat', inside whom the active link is found\r\n     *     directChild  - flags whether the active link is single direct link having no category\r\n     *                    or is from a category.\r\n    */\r\n    #decorCallback;\r\n\r\n    /**\r\n     * This callback mainly handles the default behavior for expending the link-to-open-category.\r\n     * It shows and hides the category based on their click event and visibility(toggling).\r\n     *\r\n     * It gets the div element which acts as wrapper div for the links of the category so that it\r\n     * can toggle, store/restore the active link dom element correctly.\r\n     * */\r\n    #navCatHook;\r\n\r\n    // holds currently expanded category div element\r\n    #activeCat = null;\r\n\r\n    // animation speed for opening category or hiding\r\n    #speed = 400;\r\n\r\n    // default animation is slide down & slide up\r\n    #anim = ActiveNav.SLIDE;\r\n\r\n    // icons to be show next to the expended category div link\r\n    #arrowDown = 'expand_more';\r\n    #arrowUp = 'expand_less';\r\n\r\n    constructor(navId) {\r\n        this.#navId = navId;\r\n\r\n        // default active link styling and expending category handler\r\n        this.#decorCallback = (obj) => {\r\n\r\n            // remove active css class from any active element first because\r\n            // we may have active nav for an SPA(Single Page Application); who knows!\r\n            let actEle = $($(`#${this.#navId}`).children()).find('.jst-nav-act');\r\n            $(actEle).removeClass('jst-nav-act');\r\n            $(obj.actDom).addClass('jst-nav-act');\r\n\r\n            if (!obj.directChild) {\r\n                // look for 2nd child; if we don't have then it is either a direct\r\n                // link or has no links for the category.\r\n                let children = $(obj.wrapper).find('.jst-nav-cat');\r\n                if (!children) return;\r\n\r\n                this.#animate(children, true, obj.wrapper);\r\n            } else {\r\n                // hide actively shown links of category as it is working for SPA.\r\n                if (this.#activeCat) {\r\n                    this.#animate(this.#activeCat, false, obj.wrapper);\r\n                    this.#activeCat = null;\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        // default navigation category or direct link click event handler\r\n        this.#navCatHook = (wrapperCatEle) => {\r\n\r\n            // default nav cat hook callback implementation assumes that the second\r\n            // element holds the links of the category so that it can toggle the\r\n            // visibility; this implementation can be replaced by providing custom\r\n            // hook callback.\r\n\r\n            // hide there is already an active category\r\n            if (this.#activeCat) {\r\n                let parent = $(this.#activeCat).closest('.jst-nav-link');\r\n                this.#animate(this.#activeCat, false, parent);\r\n            }\r\n\r\n            let children = $(wrapperCatEle).find('.jst-nav-cat');\r\n            if (!children) return;\r\n\r\n            // are we toggling?\r\n            if ($(children).is(this.#activeCat)) {\r\n                this.#activeCat = null;\r\n                return;\r\n            }\r\n\r\n            // it is not toggling so show the requested the links for the category\r\n            if (!children) return;\r\n            this.#animate(children, true, wrapperCatEle);\r\n            this.#activeCat = children;\r\n        };\r\n\r\n        // add click listener to the first element of the wrapperCls marked container\r\n        // for delegating event to navCatHook callback.\r\n        $(`#${navId} .${this.#wrapperCls}`).each((index, ele) => {\r\n            let children = $(ele).children();\r\n            if (children.length < 1) return;\r\n\r\n            $(children).first().click(() => this.#navCatHook(ele));\r\n        });\r\n\r\n        // initialize all the icons into default arrow position\r\n        $(`#${navId} .jst-nav-arrow`).html(this.#arrowDown);\r\n    }\r\n\r\n    #animate(ele, motion, wrapperDiv) {\r\n        let arrow = $(wrapperDiv).children().first().find('.jst-nav-arrow');\r\n        let icon = motion ? this.#arrowUp : this.#arrowDown;\r\n\r\n        if (this.#anim === ActiveNav.FADE) {\r\n            if (motion) $(ele).fadeIn(this.#speed, () => $(arrow).html(icon));\r\n            else $(ele).fadeOut(this.#speed, () => $(arrow).html(icon));\r\n        }\r\n\r\n        else if (this.#anim === ActiveNav.TOGGLE) {\r\n            if (motion) $(ele).show(this.#speed, () => $(arrow).html(icon));\r\n            else $(ele).hide(this.#speed, () => $(arrow).html(icon));\r\n        }\r\n\r\n        else {\r\n            if (motion) $(ele).slideDown(this.#speed, () => $(arrow).html(icon));\r\n            else $(ele).slideUp(this.#speed, () => $(arrow).html(icon));\r\n        }\r\n    }\r\n\r\n    #updateArrow(lastDown, lastUp) {\r\n        let iconDom = $(`#${this.#navId}`).find('.jst-nav-arrow');\r\n        $(iconDom).each((index, ele) => {\r\n            let content = $(ele).html();\r\n            if (content === lastDown) $(ele).html(this.#arrowDown);\r\n            else if (content === lastUp) $(ele).html(this.#arrowUp);\r\n        });\r\n\r\n    }\r\n\r\n    arrowDown(html) {\r\n        let lastVal = this.#arrowDown;\r\n        this.#arrowDown = html;\r\n        this.#updateArrow(lastVal, null);\r\n        return this;\r\n    }\r\n\r\n    arrowUp(html) {\r\n        let lastVal = this.#arrowUp;\r\n        this.#arrowUp = html;\r\n        this.#updateArrow(null, lastVal);\r\n        return this;\r\n    }\r\n\r\n    animFn(type) {\r\n        this.#anim = type;\r\n        return this;\r\n    }\r\n\r\n    animSpeed(speed) {\r\n        this.#speed = speed;\r\n        return this;\r\n    }\r\n\r\n    decorCallback(callback) {\r\n        this.#decorCallback = callback;\r\n        return this;\r\n    }\r\n\r\n    navCatHook(callback) {\r\n        this.#navCatHook = callback;\r\n        return this;\r\n    }\r\n\r\n    find (href = '') {\r\n        // get the path\r\n        let pathName = new URL(document.location).href;\r\n\r\n        if (href.length > 0) pathName = href;\r\n\r\n        let dom;\r\n        for(let a of $(`#${this.#navId} a`)) {\r\n            if (a.href === pathName) {\r\n                dom = a;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(!this.#decorCallback) return;\r\n\r\n        if (jst.isUndef(dom)) {\r\n            this.#decorCallback({});\r\n            return;\r\n        }\r\n\r\n        let obj = {};\r\n        obj.actDom = dom;\r\n        obj.wrapper = $(dom).closest(`.${this.#wrapperCls}`);\r\n        obj.directChild = $(dom).parent().is(obj.wrapper);\r\n        this.#decorCallback(obj);\r\n    }\r\n\r\n}\r\n","\r\n/*\r\n*   Biscuit is a class which safely accesses and saves the values into the cookie\r\n*   storage. It has simplified method for each primitive data type for accessing\r\n*   and storing the value.\r\n*\r\n*   Any cookie value can also be deleted too. By default, it save cookie for 1 year\r\n*   or 365 days.\r\n* */\r\nclass Biscuit {\r\n\r\n    static set(key, value, expDay= 365) {\r\n        const d = new Date();\r\n        d.setTime(d.getTime() + (expDay * 24 * 60 * 60 * 1000));\r\n        let expires = \"expires=\"+ d.toUTCString();\r\n        document.cookie = key + \"=\" + value + \";\" + expires + \";SameSite=Lax; path=/\";\r\n    }\r\n\r\n    static unset(key) {\r\n        document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;SameSite=Lax`;\r\n    }\r\n\r\n    static getBool(key, defaultValue) {\r\n        let value = Biscuit.getStr(key, null);\r\n        if (value == null) return defaultValue;\r\n        return value === 'true';\r\n    }\r\n\r\n    static getInt(key, defaultValue) {\r\n        return parseInt(Biscuit.getStr(key, defaultValue));\r\n    }\r\n\r\n    static getFloat(key, defaultValue) {\r\n        return parseFloat(Biscuit.getStr(key, defaultValue));\r\n    }\r\n\r\n    static getStr(key, defaultValue) {\r\n        let name = key + \"=\";\r\n        let decodedCookie = decodeURIComponent(document.cookie);\r\n\r\n        let ca = decodedCookie.split(';');\r\n        for(let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) return c.substring(name.length, c.length);\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n}\r\n","\r\nclass Blogger {\r\n\r\n    youtube = false;\r\n\r\n    #action = {\r\n        bold: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \"**\" + sel.middle + \"**\" + sel.end;\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.selectionEnd = sel.posStart + 2;\r\n                return;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        italic: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \"*\" + sel.middle + \"*\" + sel.end;\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.selectionEnd = sel.posStart + 1;\r\n                return;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        code : (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \"```\\n\" + sel.middle + \"\\n```\" + sel.end;\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.selectionEnd = sel.posStart + 4;\r\n                return;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        heading: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \"# \" + sel.middle + sel.end;\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.selectionEnd = sel.posStart + 2;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        list: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \"* \" + sel.middle + sel.end;\r\n\r\n            this.#editor.selectionEnd = sel.posStart + 2;\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        divider: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \"\\n---\\n\" + sel.middle + sel.end;\r\n\r\n            this.#editor.selectionEnd = sel.posStart + 5;\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        link: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.value = sel.start + '[]()' + sel.end;\r\n                this.#editor.selectionEnd = sel.posStart + 1;\r\n            } else {\r\n                this.#editor.value = sel.start + '[]('+ sel.middle + ')' + sel.end;\r\n                this.#editor.selectionEnd = sel.posStart + 1;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        image: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.value = sel.start + '![]()' + sel.end;\r\n                this.#editor.selectionEnd = sel.posStart + 4;\r\n            } else {\r\n                this.#editor.value = sel.start + '![]('+ sel.middle + ')' + sel.end;\r\n                this.#editor.selectionEnd = sel.posStart + 2;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        quote: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.value = sel.start + '> ' + sel.end;\r\n                this.#editor.selectionEnd = sel.posStart + 2;\r\n            } else {\r\n\r\n                let buffer = '';\r\n                let str = sel.middle.split('\\n');\r\n                log(str);\r\n\r\n                str.forEach((v) => {\r\n                    buffer += `> ${v} \\n`;\r\n                });\r\n                buffer += '\\n';\r\n\r\n                this.#editor.value = sel.start + buffer + sel.end;\r\n                this.#editor.selectionEnd = sel.posStart + buffer.length;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        },\r\n\r\n        youtube: (event = null) => {\r\n            if (event) event.preventDefault();\r\n\r\n            let sel = this.#selection();\r\n            this.#editor.focus();\r\n            this.#editor.value = sel.start + \":yt \" + sel.middle + \" yt:\" + sel.end;\r\n\r\n            if (sel.selection.length === 0) {\r\n                this.#editor.selectionEnd = sel.posStart + 4;\r\n                return;\r\n            }\r\n\r\n            this.#parsePreview();\r\n        }\r\n\r\n    };\r\n\r\n    #editor;\r\n    #toolbar;\r\n    #preview;\r\n\r\n    constructor(editor, toolbar, preview) {\r\n        if (typeof marked === 'undefined') throw new Error('Marked dependency is missing.');\r\n        if (typeof hljs === 'undefined') throw new Error('Highlight JS dependency is missing.');\r\n        Blogger.#setupMarked();\r\n\r\n        this.#editor = document.getElementById(editor);\r\n        this.#toolbar = document.getElementById(toolbar);\r\n        this.#preview = document.getElementById(preview);\r\n\r\n        this.#addToolbar();\r\n        this.#toolbarHook();\r\n\r\n        // by default try to parse from the editor\r\n        let value = this.#editor.value;\r\n        if (value.length > 0) this.#parsePreview(value);\r\n\r\n        this.#editor.addEventListener('keyup', () => this.#parsePreview());\r\n\r\n        this.#editor.addEventListener('keydown', (e) => {\r\n\r\n            let ctrl = e.ctrlKey;\r\n            let key = e.key;\r\n\r\n            if (key.toLowerCase() === 'tab') {\r\n                this.#addTab(e);\r\n                return;\r\n            }\r\n\r\n            if (!ctrl) return;\r\n\r\n            switch (key) {\r\n                case 'b':\r\n                    this.#action['bold'](e);\r\n                    break;\r\n\r\n                case 'i':\r\n                    this.#action['italic'](e);\r\n                    break;\r\n\r\n                case 'k':\r\n                    this.#action['code'](e);\r\n                    break;\r\n\r\n                case 'h':\r\n                    this.#action['heading'](e);\r\n                    break;\r\n\r\n                case 'l':\r\n                    this.#action['list'](e);\r\n                    break;\r\n\r\n                case 'd':\r\n                    this.#action['divider'](e);\r\n                    break;\r\n\r\n                case '.':\r\n                    this.#action['link'](e);\r\n                    break;\r\n\r\n                case 'p':\r\n                    this.#action['image'](e);\r\n                    break;\r\n\r\n                case 'q':\r\n                    this.#action['quote'](e);\r\n                    break;\r\n\r\n                case 'y':\r\n                    this.#action['youtube'](e);\r\n                    break;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    #addTab(event) {\r\n        event.preventDefault();\r\n\r\n        let sel = this.#selection();\r\n        this.#editor.focus();\r\n        this.#editor.value = sel.start + \"    \" + sel.end;\r\n\r\n        this.#editor.selectionEnd = sel.start.length + 4;\r\n    }\r\n\r\n    #parsePreview() {\r\n        let value = this.#editor.value;\r\n        if (!this.youtube) {\r\n            Blogger.#youtubeThumbnail();\r\n            this.youtube = true;\r\n        }\r\n        this.#preview.innerHTML = marked.parse(value);\r\n    }\r\n\r\n    static parse(txt) {\r\n        Blogger.#youtubeTag();\r\n        return marked.parse(txt);\r\n    }\r\n\r\n    static lineNumbers() {\r\n        hljs.highlightAll();\r\n        hljs.initLineNumbersOnLoad();\r\n    }\r\n\r\n    #selection() {\r\n        let output = {};\r\n        let value = this.#editor.value;\r\n\r\n        output[\"posStart\"]  = this.#editor.selectionStart;\r\n        output[\"posEnd\"] = this.#editor.selectionEnd;\r\n\r\n        output[\"selection\"] = this.#editor.value.slice(this.#editor.selectionStart, this.#editor.selectionEnd);\r\n        output[\"length\"] = output[\"selection\"].length;\r\n\r\n        output[\"start\"] = value.slice(0, output[\"posStart\"]);\r\n        output[\"middle\"] = value.slice(output[\"posStart\"], output[\"posEnd\"]);\r\n        output[\"end\"] = value.slice(output[\"posEnd\"]);\r\n\r\n        return  output;\r\n    }\r\n\r\n    static #setupMarked() {\r\n        marked.setOptions({\r\n            pedantic: false,\r\n            gfm: true,\r\n            breaks: true,\r\n            sanitize: true,\r\n            smartLists: true,\r\n            smartypants: false,\r\n            xhtml: false\r\n        });\r\n\r\n        let renderer = {\r\n            code(code) {\r\n                return  `<pre><code class=\"hljs\">${hljs.highlightAuto(code).value}</code></pre>`;\r\n            }\r\n        };\r\n        marked.use({renderer});\r\n    }\r\n\r\n    static #youtubeTag() {\r\n        let fn = (id) => {\r\n            return `<iframe class=\"youtube\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/${id}\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>`;\r\n        };\r\n        let extensionFn = Blogger.#ytRenderer(fn);\r\n        marked.use({extensions: [extensionFn]});\r\n    }\r\n\r\n    static #youtubeThumbnail() {\r\n        let fn = (id) => {\r\n            return `<img alt=\"Youtube video\" src=\"https://img.youtube.com/vi/${id}/0.jpg\" />`;\r\n        };\r\n        let extensionFn = Blogger.#ytRenderer(fn);\r\n        marked.use({extensions: [extensionFn]});\r\n    }\r\n\r\n    static #ytRenderer(decFn) {\r\n        return {\r\n            name: 'youtube',\r\n            level: 'inline',\r\n            start(src) { return src.match(/^:yt[^:\\n]/)?.index; },\r\n            tokenizer(src) {\r\n                const rule = /^:yt([^:\\n]+)yt:/;\r\n                const match = rule.exec(src);\r\n                if (match) {\r\n                    const token = {\r\n                        type: 'youtube',\r\n                        raw: match[0],\r\n                        text: match[1].trim(),\r\n                        tokens: []\r\n                    };\r\n                    this.lexer.inline(token.text, token.tokens);\r\n                    return token;\r\n                }\r\n            },\r\n            renderer(token) {\r\n                return decFn(this.parser.parseInline(token.tokens));\r\n            }\r\n        };\r\n    }\r\n\r\n    #toolbarHook() {\r\n        for (let k in this.#action) {\r\n            let dom = document.getElementById(k);\r\n            dom.addEventListener('click', () => {\r\n                this.#action[k]();\r\n            });\r\n        }\r\n    }\r\n\r\n    #addToolbar() {\r\n        this.#toolbar.innerHTML = `\r\n            <div class=\"jst-blogger-actions\">\r\n                <i id=\"bold\"    class=\"material-icons\" title=\"Bold (Ctrl+B)\">format_bold</i>\r\n                <i id=\"italic\"  class=\"material-icons\" title=\"Italic (Ctrl+I)\">format_italic</i>\r\n                <i id=\"heading\" class=\"material-icons\" title=\"Heading (Ctrl+H)\">title</i> \r\n                <i id=\"divider\" class=\"material-icons\" title=\"Horizontal Rule (Ctrl+D)\">horizontal_rule</i> \r\n                <i id=\"code\"    class=\"material-icons\" title=\"Code (Ctrl+K)\">data_object</i>\r\n                <i id=\"list\"    class=\"material-icons\" title=\"Bullet List (Ctrl+L)\">format_list_bulleted</i>\r\n                <i id=\"quote\"   class=\"material-icons\" title=\"Quotes (Ctrl+Q)\">format_quote</i>\r\n                <i id=\"link\"    class=\"material-icons\" title=\"Hyperlink (Ctrl+>)\">link</i>\r\n                <i id=\"image\"   class=\"material-icons\" title=\"Image (Ctrl+P)\">image</i>\r\n                <i id=\"youtube\" class=\"material-icons\" title=\"Youtube Video (Ctrl+Y)\">smart_display</i>\r\n            </div>        \r\n        `;\r\n    }\r\n\r\n    markdown() {\r\n        return this.#editor.value;\r\n    }\r\n\r\n}","(() => {\r\n\r\n    class Connect {\r\n\r\n        // XHttp buffers\r\n        #url;\r\n        #xHttp;\r\n        #state;\r\n        #status;\r\n        #statusText;\r\n\r\n        // Data buffers\r\n        #headers = {};\r\n        #queryParam = {};\r\n        #dataSource = {_raw_data: ''};\r\n\r\n        // Buffers the server response.\r\n        // If talking hatish, it will have \"response\" key trimmed from the\r\n        // json encoded hati server response\r\n        #response;\r\n\r\n        // Various callbacks\r\n        #callbackAny;\r\n        #callbackOk;\r\n        #callbackErr;\r\n\r\n        #timeout;\r\n        #unresolvedHost;\r\n        #unknownError;\r\n\r\n        #preRedirect;\r\n        #postRun;\r\n        #preRun;\r\n\r\n        // Redirection paths and theirs flags\r\n        #anyPath;\r\n        #successPath;\r\n        #errorPath;\r\n\r\n        #insDirAny = false;\r\n        #insDirOk = false;\r\n        #insDirErr = false;\r\n\r\n        // Variables for toasting\r\n        #noToast = false;\r\n        #toastOnAny = true;\r\n        #autoHideToast = true;\r\n        #toastOnSuccess = false;\r\n        #toastOnError = false;\r\n        #delay = 2;\r\n\r\n        // Hati response variables\r\n        #hati = false;\r\n        #hatiMsg;\r\n        #hatiStatus;\r\n        #hatiLevel;\r\n\r\n        static HATI_STATUS_SUCCESS = 1;\r\n        static HATI_STATUS_INFO = 2;\r\n        static HATI_STATUS_WARNING = 0;\r\n        static HATI_STATUS_ERROR = -1;\r\n        static HATI_STATUS_UNKNOWN = -2;\r\n\r\n        static HATI_LVL_SYSTEM = 0;\r\n        static HATI_LVL_USER = 1;\r\n        static HATI_LVL_UNKNOWN = -2;\r\n\r\n        // XHttp state flags\r\n        STATE_REQ_NOT_INITIALIZED = 0;\r\n        STATE_SERVER_CONNECTION_ESTABLISHED = 1;\r\n        STATE_REQ_RECEIVED = 2;\r\n        STATE_REQ_PROCESSING = 3;\r\n        STATE_REQ_FINISH_AND_READY = 4;\r\n\r\n        // XHttp status flags\r\n        STATUS_OK = 200;\r\n        STATUS_FORBIDDEN = 403;\r\n        STATUS_PAGE_NOT_FOUND = 404;\r\n        STATUS_REQ_TIMEOUT = 408;\r\n\r\n        static #contentType = {\r\n            form: 'application/x-www-form-urlencoded',\r\n            json: 'application/json',\r\n            raw: 'text/plain'\r\n        }\r\n\r\n        constructor() {\r\n            this.#xHttp = new XMLHttpRequest();\r\n            this.#xHttp.onreadystatechange = () => {\r\n                this.#state = this.#xHttp.readyState;\r\n                this.#status = this.#xHttp.status;\r\n                this.#statusText = this.#xHttp.statusText;\r\n\r\n                if (this.#state !== this.STATE_REQ_FINISH_AND_READY) return;\r\n\r\n                if (this.#status === this.STATUS_OK) {\r\n                    this.#callbackMediator(this.#xHttp.responseText);\r\n                } else if (this.#status === this.STATUS_REQ_TIMEOUT) {\r\n                    if (this.#timeout != null) this.#timeout();\r\n                } else if (this.#status === this.STATUS_PAGE_NOT_FOUND) {\r\n                    if (this.#unresolvedHost != null) this.#unresolvedHost();\r\n                } else {\r\n                    if (this.#unknownError != null) this.#unknownError();\r\n                }\r\n            };\r\n        }\r\n\r\n        #callbackMediator(response) {\r\n            this.#response = response;\r\n\r\n            if (!this.#hati) {\r\n                this.#noToast = true;\r\n                this.#invokeRedirect(true);\r\n                this.#invokeCallback(true);\r\n                this.#resetConnection();\r\n                return;\r\n            }\r\n\r\n            // invalidate response for hati & store the response\r\n            try {\r\n                this.#response = JSON.parse(response);\r\n                this.#hatiMsg = this.#response.response['msg'];\r\n                this.#hatiStatus = this.#response.response['status'];\r\n                this.#hatiLevel = this.#response.response['level'];\r\n\r\n                if (this.#response.response['delay_time'] !== undefined)\r\n                    console.warn('Hati is running in development mode');\r\n\r\n                // delete the response property of the Hati response\r\n                delete this.#response.response;\r\n            } catch (error) {\r\n                this.#resetHati();\r\n                console.error(`${this.#hatiMsg} ${error.message}.\\nResponse: ${this.#response}`);\r\n                this.#invokeCallback(false);\r\n                this.#resetConnection();\r\n                return;\r\n            }\r\n\r\n            let success = this.#hatiStatus === Connect.HATI_STATUS_SUCCESS;\r\n\r\n            this.#invokeRedirect(success);\r\n\r\n            // after any redirection if we are still here yet, then invoke callbacks accordingly\r\n            this.#invokeCallback(success);\r\n\r\n            // if no toast then we don't go any further down here\r\n            if (this.#noToast) {\r\n                this.#resetConnection();\r\n                return;\r\n            }\r\n\r\n            // handle sticky toast\r\n            if (!this.#autoHideToast) {\r\n                Toast.show(this.#hatiStatus, this.#hatiMsg, false);\r\n                this.#directAfterToast(success);\r\n                this.#resetConnection();\r\n                return;\r\n            }\r\n\r\n            if (this.#toastOnAny) {\r\n                // here we know it is toast for all types of flags.\r\n                this.#showToast(success);\r\n            } else {\r\n                // show toast only it is either success or error\r\n                if (this.#toastOnSuccess && success) this.#showToast(true);\r\n                else if (this.#toastOnError && !success) this.#showToast(false);\r\n                else this.#resetConnection();\r\n            }\r\n        }\r\n\r\n        #invokeRedirect(success) {\r\n            // firstly process any redirection based on no-toast or instant redirection\r\n            if ((this.#insDirAny || this.#noToast) && this.#anyPath) Connect.redirect(this.#anyPath);\r\n            if ((this.#insDirOk || this.#noToast) && success) Connect.redirect(this.#successPath);\r\n            if ((this.#insDirErr || this.#noToast) && !success) Connect.redirect(this.#errorPath);\r\n        }\r\n\r\n        #invokeCallback(success) {\r\n            if (this.#callbackAny != null) this.#callbackAny(success);\r\n            else {\r\n                if (success && this.#callbackOk != null) this.#callbackOk();\r\n                if (!success && this.#callbackErr != null) this.#callbackErr();\r\n            }\r\n\r\n            if (this.#postRun) this.#postRun();\r\n        }\r\n\r\n        #resetConnection() {\r\n            this.#url = null;\r\n\r\n            // data buffer variables\r\n            this.#headers = {};\r\n            this.#queryParam = {};\r\n            this.#dataSource = {};\r\n\r\n            // various callbacks\r\n            this.#callbackAny = null;\r\n            this.#callbackOk = null;\r\n            this.#callbackErr = null;\r\n            this.#timeout = null;\r\n            this.#unresolvedHost = null;\r\n            this.#unknownError = null;\r\n            this.#preRedirect = null;\r\n            this.#postRun = null;\r\n            this.#preRun = null;\r\n\r\n            // redirection paths and theirs flags\r\n            this.#anyPath = null;\r\n            this.#successPath = null;\r\n            this.#errorPath = null;\r\n            this.#insDirAny = false;\r\n            this.#insDirOk = false;\r\n            this.#insDirErr = false;\r\n\r\n            // variables for toasting\r\n            this.#noToast = false;\r\n            this.#toastOnAny = true;\r\n            this.#autoHideToast = true;\r\n            this.#toastOnSuccess = false;\r\n            this.#toastOnError = false;\r\n            this.#delay = 2;\r\n        }\r\n\r\n        #resetHati() {\r\n            this.#hatiStatus = Connect.HATI_STATUS_UNKNOWN;\r\n            this.#hatiLevel = Connect.HATI_LVL_UNKNOWN;\r\n            this.#hatiMsg = `Server didn't talk Hatish.`;\r\n        }\r\n\r\n        #directAfterToast(success) {\r\n            if (this.#anyPath) this.#direct(this.#anyPath);\r\n            else {\r\n                if (success) this.#direct(this.#successPath);\r\n                else this.#direct(this.#errorPath);\r\n            }\r\n        }\r\n\r\n        #direct(path) {\r\n            if (this.#preRedirect) this.#preRedirect();\r\n            Connect.redirect(path);\r\n        }\r\n\r\n        #showToast(success) {\r\n            Toast.show(this.#hatiStatus, this.#hatiMsg, true, () => {\r\n                this.#directAfterToast(success);\r\n                this.#resetConnection();\r\n            }, this.#delay);\r\n        }\r\n\r\n        /**\r\n         * Removes the & and ? marks if it is happened to be\r\n         * */\r\n        static #removeExtraSign(url) {\r\n            if (url.endsWith('&')) url = url.substring(0, url.length - 1);\r\n            if (url.endsWith('?')) url = url.substring(0, url.length - 1);\r\n            return url;\r\n        }\r\n\r\n        #prepareUrl() {\r\n            let url = this.#url + '?';\r\n            Object.entries(this.#queryParam).forEach(([k, v]) =>\r\n                url += `${k}=${v}&`\r\n            )\r\n            return url;\r\n        }\r\n\r\n        #setHeaders() {\r\n            Object.entries(this.#headers).forEach(([k, v]) =>\r\n                this.#xHttp.setRequestHeader(k, String(v))\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Sets the Toast to be sticky when Hati send in a toast\r\n         *\r\n         * @return {Connect}\r\n         * */\r\n        stickyToast() {\r\n            this.#autoHideToast = false;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets flag to not show any toast sent by Hati\r\n         *\r\n         * @return {Connect}\r\n         * */\r\n        noToast() {\r\n            this.#noToast = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to show only Success response by Hati\r\n         *\r\n         * @return {Connect}\r\n         * */\r\n        toastSuccess() {\r\n            this.#toastOnAny = false;\r\n            this.#toastOnSuccess = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to show only Error response by Hati\r\n         *\r\n         * @return {Connect}\r\n         * */\r\n        toastError() {\r\n            this.#toastOnAny = false;\r\n            this.#toastOnError = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the duration for toast to be shown\r\n         *\r\n         * @return {Connect}\r\n         * */\r\n        toastTime(time) {\r\n            this.#delay = time;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a path to be redirected to after the server response regardless of status/response\r\n         *\r\n         * @param {string} path The path to redirect to\r\n         * @param {boolean} instant Indicates whether to redirect instantly after receiving the response\r\n         * @return {Connect}\r\n         * */\r\n        direct(path, instant = false) {\r\n            this.#anyPath = path;\r\n            this.#successPath = null;\r\n            this.#errorPath = null;\r\n            this.#insDirAny = instant;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to redirects to the specified path on successful Hati response\r\n         *\r\n         * @param {string} path The path to be redirected to\r\n         * @param {boolean} instant Indicates whether to redirect instantly after receiving the response\r\n         * @return {Connect}\r\n         * */\r\n        directSuccess(path, instant = false) {\r\n            this.#anyPath = null;\r\n            this.#successPath = path;\r\n            this.#insDirOk = instant;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Flags to redirects to the specified path on error Hati response\r\n         *\r\n         * @param {string} path The path to be redirected to\r\n         * @param {boolean} instant Indicates whether to redirect instantly after receiving the response\r\n         * @return {Connect}\r\n         * */\r\n        directError(path, instant = false) {\r\n            this.#anyPath = null;\r\n            this.#errorPath = path;\r\n            this.#insDirErr = instant;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Set the callback to be invoked on server response regardless of status\r\n         *\r\n         * @param {function(boolean)} callback With boolean indicating if the server is talking Hatish and response is\r\n         * success otherwise on any other server, it is always true.\r\n         * @return {Connect}\r\n         * */\r\n        onAny(callback) {\r\n            this.#callbackAny = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked when the Hati server replied ok response\r\n         *\r\n         * @param {function()} callback\r\n         * @return {Connect}\r\n         * */\r\n        onOk(callback) {\r\n            this.#callbackOk = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked when the Hati server replied error response\r\n         *\r\n         * @param {function()} callback\r\n         * @return {Connect}\r\n         * */\r\n        onErr(callback) {\r\n            this.#callbackErr = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked before connecting to the server\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {Connect}\r\n         * */\r\n        preRun(callback) {\r\n            this.#preRun = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked after receiving server response\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {Connect}\r\n         * */\r\n        postRun(callback) {\r\n            this.#postRun = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked before redirection after getting any server response\r\n         *\r\n         * @param {function ()} callback\r\n         * */\r\n        preRedirect(callback) {\r\n            this.#preRedirect = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked on timeout connecting to the server on specified url\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {Connect}\r\n         * */\r\n        onTimeout(callback) {\r\n            this.#timeout = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked on encountering unresolved host error\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {Connect}\r\n         * */\r\n        onUnresolvedHost(callback) {\r\n            this.#unresolvedHost = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the callback to be invoked when any unknown error happened\r\n         *\r\n         * @param {function ()} callback\r\n         * @return {Connect}\r\n         * */\r\n        onUnknownError(callback) {\r\n            this.#unknownError = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Does further the processing after server replied, and extract Hati API related information accordingly.\r\n         * Also display any Toast was sent by Hati.\r\n         *\r\n         * @return {Connect}\r\n         * */\r\n        withHati() {\r\n            this.#hati = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Makes a GET request to the specified url. It ignores the raw data.\r\n         *\r\n         * @param {'form'|'json'} sendAs The Content-Type header is set accordingly when data is sent\r\n         * @throws {Error} When sendAs argument is set as raw data\r\n         * */\r\n        get(sendAs = 'form') {\r\n            sendAs = sendAs.toLowerCase();\r\n            if (!['form', 'json'].owns(sendAs))\r\n                throw new Error('The argument sendAs must be one of these: form, json');\r\n\r\n            delete this.#dataSource._raw_data;\r\n\r\n            // serialize the data source\r\n            let url = this.#prepareUrl();\r\n            Object.entries(this.#dataSource).forEach(([k, v]) =>\r\n                url += `${k}=${v}&`\r\n            );\r\n            url = Connect.#removeExtraSign(url);\r\n\r\n\r\n            this.header('Content-Type', Connect.#contentType[sendAs]);\r\n            this.#xHttp.open('GET', url);\r\n            this.#setHeaders();\r\n\r\n            if (this.#preRun) this.#preRun();\r\n\r\n            this.#xHttp.send();\r\n        }\r\n\r\n        /**\r\n         * Makes a POST request to the specified url.\r\n         * <br>\r\n         * For sendAs argument data will be send as:\r\n         * <br>json -- JSON object as part of request body\r\n         * <br>form -- x-www-form-urlencoded as part of the request body\r\n         * <br>raw  -- raw as part of the request body\r\n         *\r\n         * @param {'form'|'json'|'raw'=} sendAs The Content-Type header is set accordingly when data is sent\r\n         * */\r\n        post(sendAs = 'form') {\r\n            sendAs = sendAs.toLowerCase();\r\n            if (!Connect.#contentType.owns(sendAs))\r\n                throw new Error('The argument sendAs must be one of these: form, json, raw');\r\n\r\n            let url = this.#prepareUrl();\r\n            url = Connect.#removeExtraSign(url);\r\n\r\n            this.header('Content-Type', Connect.#contentType[sendAs]);\r\n\r\n\r\n            if (['json', 'form'].owns(sendAs)) {\r\n                delete this.#dataSource['_raw_data'];\r\n            }\r\n\r\n            let data;\r\n            if (sendAs === 'json') {\r\n                data = JSON.stringify(this.#dataSource);\r\n            } else if (sendAs === 'form') {\r\n                data = Connect.parameterize(this.#dataSource);\r\n            } else {\r\n                data = JSON.stringify(this.#dataSource['_raw_data']);\r\n            }\r\n\r\n            this.#xHttp.open('POST', url);\r\n            this.#setHeaders();\r\n\r\n            if (this.#preRun) this.#preRun();\r\n\r\n            this.#xHttp.send(data);\r\n        }\r\n\r\n        /**\r\n         * Sets the url the connection is going to be made to\r\n         *\r\n         * @param {string} url API url\r\n         * @return {Connect}\r\n         * */\r\n        to(url) {\r\n            this.#url = url;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Any header can be added to the request.\r\n         *\r\n         * @param {string} key Header key\r\n         * @param {string} value Header value\r\n         * @return {Connect}\r\n         * */\r\n        header(key, value) {\r\n            this.#headers[key] = value;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sends as raw data as part of request body\r\n         *\r\n         * @param {string|number} data Any value to be sent as a raw data\r\n         * @return {Connect}\r\n         * */\r\n        raw(data) {\r\n            if (typeof data === 'object')\r\n                throw new Error(`Data of type Object can't be processed as raw data`);\r\n\r\n            this.#dataSource['_raw_data'] += data;\r\n\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Any html form data can be sent using this method. The form argument\r\n         * can either be an id(with/without # sign) or the form object.\r\n         *\r\n         * @param {string|HTMLFormElement} form The form to be sent as body of the request\r\n         * @return {Connect}\r\n        * */\r\n        form(form) {\r\n            if (typeof form == 'string') {\r\n                let id = form.startsWith('#') ? form : `#${form}`;\r\n                form = document.getElementById(id);\r\n            }\r\n\r\n            if (typeof form != 'object' && !$(form).is('form'))\r\n                throw new Error('Argument must be a form or an id to form');\r\n\r\n            // collect the form data as json\r\n            let data = $(form).serializeArray();\r\n            data.forEach((obj) => this.#dataSource[obj.name] = obj.value);\r\n\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Any json object can be sent as part get or post data. For get request\r\n         * the object's key-value pair translates into encoded url query param.\r\n         *\r\n         * @param {string|object} data The JSON data either in object or string form\r\n         * @return {Connect}\r\n         * */\r\n        json(data) {\r\n            if (typeof data === 'string') data = JSON.parse(data);\r\n\r\n            Object.keys(data).forEach((key) =>\r\n                this.#dataSource[key] = data[key]\r\n            );\r\n\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets query parameter to the url\r\n         *\r\n         * @param {string} key The parameter name\r\n         * @param {string|number} value The parameter value\r\n         * @return {Connect}\r\n         * */\r\n        queryParam(key, value) {\r\n            this.#queryParam[key] = value;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Returns the ajax connection status\r\n         *\r\n         * @return {number}\r\n         * */\r\n        get conStatus() {\r\n            return this.#status;\r\n        }\r\n\r\n        /**\r\n         * Returns the ajax connection message\r\n         *\r\n         * @return {string}\r\n         * */\r\n        get conStatusTxt() {\r\n            return this.#statusText;\r\n        }\r\n\r\n        /**\r\n         * Returns the message sent by Hati server\r\n         *\r\n         * @return {string} Message sent by Hati.\r\n         * */\r\n        get msg() {\r\n            return this.#hatiMsg;\r\n        }\r\n\r\n        /**\r\n         * Returns the status sent by Hati server\r\n         *\r\n         * @return {number} Status sent by Hati.\r\n         */\r\n        get status() {\r\n            return this.#hatiStatus;\r\n        }\r\n\r\n        /**\r\n         * Returns the level sent by Hati server\r\n         *\r\n         * @return {number} Level sent by Hati.\r\n         */\r\n        get level() {\r\n            return this.#hatiLevel;\r\n        }\r\n\r\n        /**\r\n         * Returns the response in JSON format\r\n         *\r\n         * @return {object} JSON decoded response\r\n         * */\r\n        response() {\r\n            return typeof this.#response === 'object' ? this.#response : JSON.parse(this.#response);\r\n        }\r\n\r\n        /**\r\n         * Returns the response in raw format\r\n         *\r\n         * @return {string} Response in raw textual format as replied by the server\r\n         * */\r\n        responseRaw() {\r\n            return typeof this.#response === 'object' ? JSON.stringify(this.#response) : this.#response;\r\n        }\r\n\r\n        /**\r\n         * Returns whether the connection was made successfully and the server has replied OK\r\n         *\r\n         * @return {boolean} True if the connection state is FINISH_AND_READY and status is OK, false otherwise\r\n         * */\r\n        serverReplied() {\r\n            return this.#state === this.STATE_REQ_FINISH_AND_READY && this.#status === this.STATUS_OK;\r\n        }\r\n\r\n        /**\r\n         * Returns whether Hati server has responded\r\n         *\r\n         * @return {boolean} True if hati functioned & responded correctly, false otherwise.\r\n         * */\r\n        hatiResponse() {\r\n            return this.serverReplied() && this.#hatiLevel !== Connect.HATI_LVL_UNKNOWN;\r\n        }\r\n\r\n        static parameterize(obj) {\r\n            let string = '';\r\n            for (const key in obj) {\r\n                string += `${key}=${obj[key]}&`;\r\n            }\r\n            return string.substring(0, string.length - 1);\r\n        }\r\n\r\n        static redirect(path) {\r\n            if (!path) return;\r\n            window.location = path;\r\n        }\r\n\r\n    }\r\n\r\n    window.Connect = new Connect();\r\n\r\n    /**\r\n     * Helper function, transfers key-value pair data into query parameters format\r\n     *\r\n     * @param {object} obj JSON object key-value pair to convert to query parameters\r\n     * @returns {string} Query parameterized string\r\n     * */\r\n    window.Connect.parameterize = (obj) => Connect.parameterize(obj);\r\n\r\n    /**\r\n     * Redirects to specified path. Performs checks if the path is defined.\r\n     *\r\n     * @param {string} path\r\n     * */\r\n    window.Connect.redirect = (path) => Connect.redirect(path);\r\n\r\n})();","(() => {\r\n    class Dialog {\r\n\r\n        #id;\r\n        #selfId;\r\n\r\n        #dismissed = false;\r\n        #hidden = false;\r\n        #cancelable = true;\r\n\r\n        // indicates whether it is a dark themed dialog\r\n        #dark;\r\n\r\n        #close;\r\n        #title;\r\n        #msg;\r\n\r\n        #dialog;\r\n        #msgEle;\r\n        #titleEle;\r\n        #btnYes;\r\n        #btnNo;\r\n        #btnAck;\r\n\r\n        #callbackYes;\r\n        #callbackNo;\r\n        #callbackAck;\r\n        #callbackHide;\r\n        #callbackDismiss;\r\n        #callbackRevived;\r\n\r\n        /**\r\n         * @param {string} id\r\n         * */\r\n        constructor(id) {\r\n            this.#id = id;\r\n            this.#selfId = `jst-dialog-${id}`;\r\n            jst.run(() => this.#injectDOM());\r\n        }\r\n\r\n        #checkIfDismissed() {\r\n            if (this.#dismissed) throw new Error('Dialog was dismissed. Create a fresh one!');\r\n        }\r\n\r\n        #injectDOM() {\r\n            const dialog = `\r\n                <div class=\"jst-modal\" id=\"${this.#selfId}\">\r\n                    <div class=\"jst-modal-flex\">\r\n                        <div class=\"jst-modal-flex-child\">\r\n                            <div class=\"jst-modal-header\">\r\n                                <h5 id=\"jst-dialog-title\"></h5>\r\n                                <span class=\"material-icons jst-modal-icon-close\" title=\"Close window\">close</span>\r\n                            </div>\r\n                            <div class=\"jst-modal-content\">\r\n                                <div id=\"jst-dialog-msg\"></div>\r\n                            </div>\r\n                            <div class=\"jst-dialog-btn\">\r\n                                <button id=\"jst-dialog-btn-yes\" class=\"jst-btn jst-btn-sm jst-btn-red\">Yes</button>\r\n                                <button id=\"jst-dialog-btn-no\"  class=\"jst-btn jst-btn-sm jst-btn-dark\">No</button>\r\n                                <button id=\"jst-dialog-btn-ack\" class=\"jst-btn jst-btn-sm jst-btn-teal\">OK</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>`;\r\n            $('body').prepend(dialog);\r\n\r\n            this.#dialog = $(`#${this.#selfId}`);\r\n\r\n            this.#close = jst.getChildOf('.jst-modal-icon-close', this.#dialog);\r\n            this.#titleEle = jst.getChildOf('#jst-dialog-title', this.#dialog);\r\n            this.#msgEle = jst.getChildOf('#jst-dialog-msg', this.#dialog);\r\n\r\n            let buttons = jst.getChildrenOf('.jst-dialog-btn', this.#dialog);\r\n            this.#btnYes = buttons[0];\r\n            this.#btnNo = buttons[1];\r\n            this.#btnAck = buttons[2];\r\n        }\r\n\r\n        #prepare(width, height, padding) {\r\n            // hide yes & no buttons if it is an acknowledgment dialog\r\n            if (!this.#callbackYes && !this.#callbackNo) {\r\n                $(this.#btnYes).hide();\r\n                $(this.#btnNo).hide();\r\n                $(this.#btnAck).show();\r\n            } else {\r\n                $(this.#btnYes).show();\r\n                $(this.#btnNo).show();\r\n                $(this.#btnAck).hide();\r\n            }\r\n\r\n            // set the width & height\r\n            let dialogFlexChild = jst.getChildOf('.jst-modal-flex-child', this.#dialog);\r\n            $(dialogFlexChild).css('width', width);\r\n            $(dialogFlexChild).css('height', height);\r\n\r\n            $(this.#msgEle).css('padding', padding);\r\n\r\n            let cntWrapper = jst.getChildOf('.jst-modal-content', this.#dialog)\r\n            jst.overlayScrollbar(cntWrapper);\r\n        }\r\n\r\n        #applyTheme() {\r\n            OverlayManager.theme(this.#dark);\r\n\r\n            let ele = jst.getChildOf('.jst-modal-flex-child', this.#dialog);\r\n            jst.switchCls(this.#dark, 'jst-modal-flex-child-dark', ele);\r\n\r\n            ele = jst.getChildOf('.jst-modal-header', this.#dialog);\r\n            jst.switchCls(this.#dark, 'jst-modal-header-dark', ele);\r\n\r\n            ele = jst.getChildOf('.jst-modal-icon-close', this.#dialog);\r\n            jst.switchCls(this.#dark, 'jst-modal-icon-close-dark', ele);\r\n\r\n            ele = jst.getChildOf('.jst-dialog-btn', this.#dialog);\r\n            jst.switchCls(this.#dark, 'jst-dialog-btn-dark', ele);\r\n        }\r\n\r\n        #setCloseIconListener() {\r\n            $(this.#close).on('click', () => this.dismiss());\r\n        }\r\n\r\n        #setBtnListener() {\r\n            $(this.#btnYes).on('click', () => { this.#dispatchBtnEvent(1); });\r\n            $(this.#btnNo).on('click', () => { this.#dispatchBtnEvent(-1); });\r\n            $(this.#btnAck).on('click', () => { this.#dispatchBtnEvent(0); });\r\n        }\r\n\r\n        #dispatchBtnEvent(result) {\r\n            if (result === 0 && this.#callbackAck) this.#callbackAck();\r\n            else if (result === 1 && this.#callbackYes) this.#callbackYes();\r\n            else if(this.#callbackNo) this.#callbackNo();\r\n        }\r\n\r\n        #updateCloseIcon() {\r\n            let closeIcon = jst.getChildOf('.jst-modal-icon-close', this.#dialog);\r\n            if (!this.#cancelable) $(closeIcon).fadeOut(250);\r\n            else $(closeIcon).fadeIn(250);\r\n        }\r\n\r\n        #updateTitle() {\r\n            // get the dialog title\r\n            let title =  this.#title || 'jstea Dialog 😎';\r\n            $(this.#titleEle).html(title);\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when user clicks the ok button on the dialog\r\n         *\r\n         * @param {function()} callback Function to be invoked\r\n         * @return Dialog\r\n         * */\r\n        yes(callback) {\r\n            this.#callbackYes = callback;\r\n            this.#callbackAck = null;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when user clicks the no button on the dialog\r\n         *\r\n         * @param {function()} callback Function to be invoked\r\n         * @return Dialog\r\n         * */\r\n        no(callback) {\r\n            this.#callbackNo = callback;\r\n            this.#callbackAck = null;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when user clicks the ok button on the dialog\r\n         *\r\n         * @param {function()} callback Function to be invoked\r\n         * @return Dialog\r\n         * */\r\n        acknowledge(callback) {\r\n            this.#callbackAck = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when the dialog has been hidden\r\n         *\r\n         * @param {function()} callback Function to be invoked\r\n         * @return Dialog\r\n         * */\r\n        onHide(callback) {\r\n            this.#callbackHide = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when the dialog has been dismissed\r\n         *\r\n         * @param {function()} callback Function to be invoked\r\n         * @return Dialog\r\n         * */\r\n        onDismiss(callback) {\r\n            this.#callbackDismiss = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * This method is invoked when a dialog is in display and users hits the escape button.\r\n         * OverlayManager calls this method automatically.\r\n         * <br><b>This method should be called directly.</b>\r\n         *\r\n         * @param event {Event} Keyup event object passed in by the OverlayManger\r\n         * */\r\n        onEscapeEvent(event) {\r\n            if (this.#cancelable) this.dismiss();\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when the dialog is being shown from hidden state.\r\n         *\r\n         * @param {function()} callback Function to be invoked\r\n         * @return Dialog\r\n         * */\r\n        onRevived(callback) {\r\n            this.#callbackRevived = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the dialog title\r\n         *\r\n         * @param title {string} Dialog title\r\n         * @return Dialog\r\n         * */\r\n        title(title) {\r\n            this.#title = title;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the dialog message. It can be html or string value\r\n         *\r\n         * @param msg {string} Dialog title\r\n         * @return Dialog\r\n         * */\r\n        msg(msg) {\r\n            this.#msg = msg;\r\n            return this;\r\n        }\r\n\r\n        #show(option) {\r\n            this.#checkIfDismissed();\r\n\r\n            let {w = 430, h = 'auto', pad = '1rem', cancelable = true} = option;\r\n            this.#cancelable = cancelable;\r\n\r\n            this.#prepare(w, h, pad);\r\n            this.#setCloseIconListener();\r\n            this.#setBtnListener();\r\n            this.#applyTheme();\r\n\r\n            this.#updateCloseIcon();\r\n            this.#updateTitle();\r\n\r\n            let msg = this.#msg ?? 'No dialog message.';\r\n            $(this.#msgEle).html(msg);\r\n\r\n            OverlayManager.acquire(this);\r\n            $(this.#dialog).fadeIn(250);\r\n\r\n            this.#hidden = false;\r\n        }\r\n\r\n        /**\r\n         * Shows the dialog\r\n         *\r\n         * @param {object=} option Optional values: w=450, h=auto, cancelable=true, padding=1rem\r\n         * @param {number|string=} option.w - The width in px. Max value is 75% of the window's inner width.\r\n         * @param {number|string=} option.h - The height in px. Max height is 75% of the window's inner height.\r\n         * @param {string=} option.pad - The padding in px\r\n         * @param {boolean=} option.cancelable - Flag makes the dialog cancellation status\r\n         * */\r\n        show(option = {}) {\r\n            if (OverlayManager.notReady()) {\r\n                // show after a bit of delay to avoid overlay animation glitch because of caching\r\n                jst.runLater(0.05, () => this.#show(option));\r\n            } else this.#show(option);\r\n        }\r\n\r\n        /**\r\n         * OverlayManager invokes this method when the dialog is being shown from hidden\r\n         * state.\r\n         * <br><b>It should be called directly.</b>\r\n         * */\r\n        makeVisible() {\r\n            this.#hidden = false;\r\n            this.#applyTheme();\r\n            $(this.#dialog).fadeIn(250);\r\n            if (this.#callbackRevived) this.#callbackRevived();\r\n        }\r\n\r\n        /**\r\n         * Hides the dialog\r\n         * */\r\n        hide() {\r\n            this.#checkIfDismissed();\r\n            this.#hidden = true;\r\n            $(this.#dialog).fadeOut(250);\r\n            if (this.#callbackHide) this.#callbackHide();\r\n        }\r\n\r\n        /*\r\n        * Dismisses the dialog\r\n        * */\r\n        dismiss() {\r\n            if (this.#dismissed) return;\r\n            this.#dismissed = true;\r\n\r\n            OverlayManager.release(this);\r\n            $(this.#dialog).fadeOut(250);\r\n\r\n            // remove the dom\r\n            $(this.#dialog).remove();\r\n\r\n            if (this.#callbackDismiss) this.#callbackDismiss();\r\n        }\r\n\r\n        /**\r\n         * Set the dialog cancelable. UI element gets updated behind the scene.\r\n         *\r\n         * @return {Dialog}\r\n         * */\r\n        cancelable() {\r\n            this.#cancelable = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets the dialog not cancelable. UI element gets updated automatically.\r\n         *\r\n         * @return {Dialog}\r\n         * */\r\n        notCancelable() {\r\n            this.#cancelable = false;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets dark theme to the dialog\r\n         *\r\n         * @return Dialog\r\n         * */\r\n        dark() {\r\n            this.#dark = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets light theme to the dialog\r\n         *\r\n         * @return Dialog\r\n         * */\r\n        light() {\r\n            this.#dark = false;\r\n            return this;\r\n        }\r\n\r\n        get id() {\r\n            return this.#id;\r\n        }\r\n\r\n        /**\r\n         * Changes the dialog message. It can be html or string value\r\n         *\r\n         * @param msg {string} Dialog message\r\n         * */\r\n        setMsg(msg) {\r\n            this.#msg = msg;\r\n            $(this.#msgEle).html(msg);\r\n        }\r\n\r\n        /**\r\n         * Sets the dialog title. It can be html or string value\r\n         *\r\n         * @param title {string} Dialog title\r\n         * */\r\n        setTitle(title) {\r\n            this.#title =  title;\r\n            this.#updateTitle();\r\n        }\r\n\r\n        /**\r\n         * Applies dark theme to the dialog\r\n         * */\r\n        makeDark() {\r\n            this.#dark = true;\r\n            this.#applyTheme();\r\n        }\r\n\r\n        /**\r\n         * Applies light theme to the dialog\r\n         * */\r\n        makeLight() {\r\n            this.#dark = false;\r\n            this.#applyTheme();\r\n        }\r\n\r\n        /**\r\n         * Changes the non-cancelable dialog to cancelable\r\n         * */\r\n        makeCancelable() {\r\n            this.#cancelable = true;\r\n            this.#updateCloseIcon();\r\n        }\r\n\r\n        /**\r\n         * Changes the cancelable dialog to non-cancelable\r\n         * */\r\n        makeNotCancelable() {\r\n            this.#cancelable = false;\r\n            this.#updateCloseIcon();\r\n        }\r\n\r\n        /**\r\n         * Hides the dialog button as specified by argument\r\n         *\r\n         * @param {'yes' | 'no' | 'ok'} choice\r\n         * */\r\n        hideChoice(choice) {\r\n            let btn;\r\n            if (choice === 'yes') btn  = this.#btnYes;\r\n            else if (choice === 'no') btn  = this.#btnNo;\r\n            else if (choice === 'ok') btn  = this.#btnAck;\r\n            if (btn) $(btn).fadeOut(500);\r\n        }\r\n\r\n        /**\r\n         * Shows the dialog button as specified by argument\r\n         *\r\n         * @param {'yes' | 'no' | 'ok'} choice\r\n         * */\r\n        showChoice(choice) {\r\n            let btn;\r\n            if (choice === 'yes') btn  = this.#btnYes;\r\n            else if (choice === 'no') btn  = this.#btnNo;\r\n            else if (choice === 'ok') btn  = this.#btnAck;\r\n            if (btn) $(btn).fadeIn(500);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a new dialog and gets added to DOM\r\n     *\r\n     * @param {string} id The dialog id. It can be used later to dismiss the dialog\r\n     * @return {Dialog} new dialog\r\n     * */\r\n    window.Dialog = (id) => new Dialog(id);\r\n\r\n})();","\r\n/**\r\n * Web forms are very verbose in taking user inputs. This class can greatly simplify\r\n * the form validations with nice and easy coding. Each element is marked with an ID or\r\n * name(where the input type is radio) and elements are registered via the constructor by\r\n * object. The possible properties that the object can have:\r\n *\r\n *   id         : 'id of the form element'\r\n *   name       : 'name to the radio input'\r\n *   min        : 'the min value'\r\n *   max        : 'the max value'\r\n *   minLen     : 'the minimum length'\r\n *   maxLen     : 'the maximum length'\r\n *   inline     : 'indicates to show feedback as inline'\r\n *   msgPos     : 'id of where to show the feedback message div'\r\n *   type       : 'can be of type str, int, float, email'\r\n *   pattern    : 'any Form pattern constant or custom patter to match'\r\n *   place      : 'the floating fractional place length'\r\n *   option     : 'array containing the permitted options for the input'\r\n *   noIcon     : 'any value(preferably boolean) indicates not to show icon for the element on error'\r\n * */\r\n\r\nclass FormInspector {\r\n\r\n    /**\r\n     * Predefined regular expression pattern for filtering input in various formats.\r\n     * This list has a useful pattern which can be used in general for any project.\r\n     * However, any required pattern can be passed as an argument to the object using\r\n     * the key 'Pattern'.\r\n     *\r\n     * In the naming of these constants, they have meaning like regular expression.\r\n     * A    = Alphabets(including capital & small letters)\r\n     * N    = Numbers\r\n     * AN   = Alphabets & Numbers\r\n     * S    = Space\r\n     * C    = Comma\r\n     * D    = Dot\r\n     *\r\n     * When you use any of these pattern, they will remove any other characters except the\r\n     * mentioned characters in the pattern names.\r\n     * */\r\n\r\n    // a-z, A-Z\r\n    static SAN_A = /[a-zA-Z]/g ;\r\n\r\n    // 0-9\r\n    static SAN_N = /[0-9]/g;\r\n\r\n    // a-z, A-Z, 0-9\r\n    static SAN_AN = /[a-zA-Z0-9]/g;\r\n\r\n    // a-z, A-Z, spaces\r\n    static SAN_AS = /[a-zA-Z\\s]/g;\r\n\r\n    // a-z, A-Z, commas\r\n    static SAN_AC = /[a-zA-Z,]/g;\r\n\r\n    // a-z, A-Z, dots\r\n    static SAN_AD = /[a-zA-Z.]/g;\r\n\r\n    // a-z, A-Z, 0-9, spaces\r\n    static SAN_ANS = /[a-zA-Z0-9\\s]/g;\r\n\r\n    // a-z, A-Z, 0-9, spaces, commas\r\n    static SAN_ASC = /[a-zA-Z\\s,]/g;\r\n\r\n    // a-z, A-Z, 0-9, dots\r\n    static SAN_AND = /[a-zA-Z0-9.]/g;\r\n\r\n    // a-z, A-Z, 0-9, spaces, commas\r\n    static SAN_ANSC = /[a-zA-Z0-9\\s,]/g;\r\n\r\n    // a-z, A-Z, 0-9, spaces, dots\r\n    static SAN_ANSD = /[a-zA-Z0-9\\s.]/g;\r\n\r\n    // a-z, A-Z, 0-9, spaces, commas, dots\r\n    static SAN_ANSCD = /[a-zA-Z0-9\\s,.]/g;\r\n\r\n    // ISO date format YYYY-MM-DD\r\n    static SAN_ISO_DATE = /(\\d{4}-\\d{2}-\\d{2})/g;\r\n\r\n    // ISO time format HH:MM:SS\r\n    static SAN_ISO_TIME = /(\\d{2}:\\d{2}:\\d{2})/g;\r\n\r\n    // form dom\r\n    #form;\r\n\r\n    // holds the configuration info for each element\r\n    #eleArr = [];\r\n\r\n    // indicated whether the feedback message should be inline or block level element\r\n    #inline;\r\n\r\n    #iconOk = '&#10004;';\r\n    #iconErr = '&#10060;';\r\n\r\n    #colorOk = 'green';\r\n    #colorErr = 'red';\r\n\r\n    #noMsg = false;\r\n    #noIcon = false;\r\n    #animateErr = true;\r\n\r\n    #errAnimation = (ele) => {\r\n        $(ele)\r\n            .animate({opacity: '0.5'}, 200)\r\n            .animate({opacity: '1'}, 200)\r\n            .animate({opacity: '0.5'}, 200)\r\n            .animate({opacity: '1'}, 200);\r\n    };\r\n\r\n    // indicates whether the form inputs are resolved and ready to be submitted\r\n    #canSubmit = true;\r\n\r\n    // form element is identified by id. ID can be separated by '-' so that it\r\n    // can be split into capitalized word for nice feedback message\r\n    static #getEleName(ele) {\r\n        let value = ele.id || ele.name;\r\n        value = value.replaceAll(/-/g, ' ');\r\n        return value.capitalize(true);\r\n    }\r\n\r\n    // form element can be of various types such as input, select, textarea etc.\r\n    // this method can detect these types and return the value based on types.\r\n    static #getValue(ele) {\r\n        let type = $(ele.dom).attr('type');\r\n        if (type === 'radio') {\r\n            return $(`input[name=\"${ele.name}\"]:checked`).val();\r\n        } else if (type === 'checkbox') {\r\n            return $(ele.dom).is(\":checked\") ? $(ele.dom).val() : false;\r\n        } else return $(ele.dom).val();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string|object} form The form id or the form object. If empty, FormInspector tries to\r\n     * calculate from the elements\r\n     * @param {boolean=} inline  When true input validation feedback is shown next to input as\r\n     * inline html element otherwise shown as block level element\r\n     *\r\n     * @throws {Error} If the form element can't be found\r\n     * */\r\n    constructor(form, inline = false) {\r\n\r\n        // first make sure we have found the form to work with\r\n        if(!$(form).is('form') && typeof form !== 'string') {\r\n            throw new Error('Argument form must be an id or a reference to a form');\r\n        }\r\n\r\n        this.#form = jst.eleId(form);\r\n        if (jst.isUndef(this.#form) || this.#form === null) throw new Error(`Failed to find the form as specified`);\r\n\r\n\r\n        // prevent the form submission automatically and hook to validate method to\r\n        // validate inputs\r\n        $(this.#form).submit((evt) => evt.preventDefault());\r\n\r\n        this.#inline = inline;\r\n    }\r\n\r\n    /**\r\n     * Adds rules to perform validation on specified element\r\n     *\r\n     *\r\n     * @param {object|array}                    rules Rules the form is validated against. Each rule is an object\r\n     * specifying the filters\r\n     * @param {string}                          rules.id id of the form element\r\n     * @param {'str'|'int'|'float'|'email'}     rules.type the type of the data must be provided in\r\n     * @param {string=}                         rules.name 'name to the radio input\r\n     * @param {number=}                         rules.min the min value\r\n     * @param {number=}                         rules.max the max value\r\n     * @param {number=}                         rules.minLen the minimum length\r\n     * @param {number=}                         rules.maxLen the maximum length\r\n     * @param {boolean=}                        rules.inline indicates to show feedback as inline\r\n     * @param {string=}                         rules.msgPos id of where to show the feedback message div\r\n     * @param {string=}                         rules.pattern any Form pattern constant or custom patter to match\r\n     * @param {number=}                         rules.place the floating fractional place length\r\n     * @param {array=}                          rules.option array containing the permitted options for the input\r\n     * @param {boolean=}                        rules.noIcon indicates not to show icon for the element on error\r\n     * */\r\n    addRule(...rules) {\r\n        // unpack the objects\r\n        if (Array.isArray(rules[0])) rules = rules[0];\r\n\r\n        rules.forEach((rule) => {\r\n            // get the form input element and see if it is defined\r\n            let dom = $(this.#form).find(`#${rule.id}`)[0];\r\n\r\n            if (jst.isUndef(dom) && rule.owns('name'))\r\n                dom =  $(this.#form).find(`[name=${rule.name}]`);\r\n\r\n            if (jst.isUndef(dom)) {\r\n                console.warn('Element with no identity(id/name) has been skipped');\r\n                return;\r\n            }\r\n\r\n            // add the input dom element to the object\r\n            rule['dom'] = dom;\r\n\r\n            rule['ok'] = false;\r\n            rule['firstBlur'] = true;\r\n            rule['key'] = rule.id || rule.name;\r\n\r\n            this.#addListener(rule);\r\n\r\n            // store ref to all the passed ele configurations after setup\r\n            this.#eleArr.push(rule);\r\n        });\r\n    }\r\n\r\n    // add various types of listeners such as keyup, blur based on the form element\r\n    // type. It can also perform any needed logic before handing over the listener\r\n    // callback function to verify the input.\r\n    #addListener(ele) {\r\n        let dom = ele.dom;\r\n        let nodeName = $(dom).prop('nodeName').toLowerCase();\r\n        let eleType = $(dom).attr('type');\r\n\r\n        $(dom).on('blur', () => FormInspector.#decorateBlurEvent(ele, this.#filter));\r\n\r\n        if (eleType === 'radio' || eleType === 'checkbox' || nodeName === 'select')\r\n            $(dom).change(() => this.#filter(ele));\r\n        else\r\n            $(dom).keyup(() => { if (!ele.firstBlur) this.#filter(ele); });\r\n    }\r\n\r\n    #filter = (ele) => {\r\n\r\n        let nodeName = $(ele.dom).prop('nodeName').toLowerCase();\r\n        let filterType = ele.type;\r\n        let inputType = $(ele.dom).attr('type');\r\n\r\n        let ok;\r\n\r\n        // stop from selecting first option of the select input\r\n        if (nodeName === 'select') {\r\n            if(FormInspector.#getValue(ele) === '') {\r\n                ele.ok = this.#showMsg(false, ele, 'Select an option.');\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (filterType === 'email' || inputType === 'email') ok = this.#email(ele);\r\n        else if (filterType === 'str') ok = this.#str(ele);\r\n        else if (filterType === 'int') ok = this.#int(ele);\r\n        else if (filterType === 'float') ok = this.#float(ele);\r\n\r\n        // check if we need to match any pattern\r\n        if (ok && ele.owns('pattern')) ok = this.#pattern(ele);\r\n\r\n        ele.ok = ok;\r\n    };\r\n\r\n    // we don't want to disturb the user with the error message when they are\r\n    // filling out the input for the first time. With constructions, we have\r\n    // already said that it is first blur. Now on this blur callback event we\r\n    // tell this is not first blur anymore to indicate to show the error message\r\n    // as user types in after the first blur has already been taken place.\r\n    static #decorateBlurEvent(ele, fn) {\r\n        ele.firstBlur = false;\r\n        ele.animate = true;\r\n        if (!ele.ok) fn(ele);\r\n    }\r\n\r\n    #email = (ele) => {\r\n        let value = FormInspector.#getValue(ele);\r\n        if (!jst.isStr(value)) return this.#showMsg(false, ele, `Can't be empty.`);\r\n\r\n        let emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        let result = emailRegex.test(value);\r\n        let msg = result ? 'Email accepted.' : 'Invalid email.';\r\n        return this.#showMsg(result, ele, msg);\r\n    };\r\n\r\n    #str = (ele) => {\r\n        let value = FormInspector.#getValue(ele);\r\n\r\n        if (!jst.isStr(value)) return this.#showMsg(false, ele, `Can't be empty`);\r\n\r\n        value = value.trim();\r\n\r\n        if (!this.#checkLen(ele, value)) return false;\r\n        if (!this.#checkInOption(ele, value)) return false;\r\n        return this.#showMsg(true, ele, `${FormInspector.#getEleName(ele)} accepted.`);\r\n    };\r\n\r\n    #int = (ele) => {\r\n        let value =  FormInspector.#getValue(ele);\r\n\r\n        // make sure we have actual string input\r\n        if(!jst.isStr(value)) return this.#showMsg(false, ele, `Can't be empty.`);\r\n\r\n        // keep anything except numbers from the input then see if it has invalid character\r\n        let iChar = value.replace(/[0-9]/g, '');\r\n        if (iChar.length > 0) return this.#showMsg(false, ele, 'Invalid number.');\r\n\r\n        // get the number\r\n        value = parseInt(value);\r\n\r\n        if (!Number.isSafeInteger(value)) return this.#showMsg(false, ele, `Must be an integer.`);\r\n        if (!this.#checkLen(ele, value)) return false;\r\n        if(!this.#checkRange(ele, value)) return false;\r\n        if (!this.#checkInOption(ele, value)) return false;\r\n        return this.#showMsg(true, ele, `${FormInspector.#getEleName(ele)} accepted.`);\r\n    };\r\n\r\n    #float = (ele) => {\r\n        let value = FormInspector.#getValue(ele);\r\n\r\n        // make sure we have actual string input\r\n        if (!jst.isStr(value)) return this.#showMsg(false, ele, `Can't be empty.`);\r\n\r\n        // add the floating point place if it has not\r\n        if (value.match(/\\./g) == null) value += '.0';\r\n\r\n        if (value.replaceAll(/-?\\d+\\.\\d+/g, '').length !== 0) return this.#showMsg(false, ele, 'Illegal input.');\r\n\r\n        if (!this.#checkLen(ele, value)) return false;\r\n\r\n        if (!this.#checkRange(ele, value)) return false;\r\n\r\n        if (ele.owns('place')) {\r\n            if (value.split('.')[1].length !== ele['place'])\r\n                return this.#showMsg(false, ele, `Fractional place must be of ${ele['place']}.`);\r\n        }\r\n\r\n        if (!this.#checkInOption(ele, value)) return false;\r\n        return this.#showMsg(true, ele, `${FormInspector.#getEleName(ele)} accepted.`);\r\n    };\r\n\r\n    #pattern = (ele) => {\r\n        let value = FormInspector.#getValue(ele);\r\n        if (!jst.isStr(value)) return this.#showMsg(false, ele, `Can't be empty.`);\r\n        if (value.replaceAll(ele.pattern, '').length !== 0) return this.#showMsg(false, ele, `Invalid input.`);\r\n        return this.#showMsg(true, ele, `${FormInspector.#getEleName(ele)} accepted.`);\r\n    };\r\n\r\n    // Based on the value of the result, it either updates or adds the message element\r\n    // into the specified element or to the next of the input element by default.\r\n    #showMsg(result, ele, msg) {\r\n        let inline =  ele.owns('inline') ? ele.inline : this.#inline;\r\n        let icon = result ? this.#iconOk : this.#iconErr;\r\n        let color = result ? this.#colorOk : this.#colorErr;\r\n\r\n        // add the msg element if we have none\r\n        let haveNextEle = $(ele.dom).next().hasClass('jst-form-msg');\r\n        let havePositionedEle = ele.owns('msgPos');\r\n\r\n        if (!haveNextEle || havePositionedEle) {\r\n            let msgEle = inline ?\r\n                `<div class=\"jst-d-inline jst-form-msg\"><span></span> <span></span></div>` :\r\n                `<div class=\"jst-form-msg\"><span></span> <span></span></div>`;\r\n\r\n            // add the message element accordingly\r\n            if(havePositionedEle) $(`#${ele['msgPos']}`).html(msgEle);\r\n            else $(ele.dom).after(msgEle);\r\n        }\r\n\r\n        // update the nextEle to newly inserted one since we have just updated\r\n        let nextEle = havePositionedEle ? $('#' + ele['msgPos']) : $(ele.dom).next();\r\n\r\n        // update the icon, message and the color class\r\n        let spans = $(nextEle).find('span');\r\n        let iconSpan = spans[0];\r\n        let msgSpan = spans[1];\r\n        if (!this.#noIcon && ele.missing('noIcon')) $(iconSpan).html(icon);\r\n        if (!this.#noMsg  && ele.missing('noMsg')) $(msgSpan).html(msg);\r\n        $(nextEle).css('color', color);\r\n\r\n        // animate if requested by the blur event\r\n        if (ele.owns('animate') && !result) {\r\n            if (this.#animateErr) this.#errAnimation(nextEle);\r\n            ele.erase('animate');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    #checkLen(ele, value) {\r\n        if ((typeof value).toLowerCase() !== 'string') value = String(value);\r\n\r\n        let min = ele.minLen || 0;\r\n        let max = ele.maxLen || -1;\r\n\r\n        if (value.length < min) return this.#showMsg(false, ele, `Must be ${min} in length.`);\r\n        if (max !== -1 && value.length > max) return this.#showMsg(false, ele, `Exceeded maximum length of ${max}.`);\r\n        return true;\r\n    }\r\n\r\n    #checkRange(ele, value) {\r\n        let min = ele.min || 0;\r\n        let max = ele.max || -1;\r\n\r\n        if (value < min) return this.#showMsg(false, ele, `Can't be less than ${min}.`);\r\n        if (max !== -1 && value > max) return this.#showMsg(false, ele, `Can't be greater than ${max}.`);\r\n        return true;\r\n    }\r\n\r\n    #checkInOption(ele, value) {\r\n        let inOption = false;\r\n        if (ele.owns('option')) {\r\n            for (const opValue of ele['option']) {\r\n                if (opValue === value) {\r\n                    inOption = true;\r\n                    break;\r\n                }\r\n            }\r\n        } else return true;\r\n        let msg = $(ele.dom).attr('type') === 'checkbox' ? `Must be acknowledged.` : `Must be of valid options.`;\r\n        if (!inOption) return this.#showMsg(false, ele, msg);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Submits the form to action set no the form.\r\n     *\r\n     * This method can be useful because FormInspector prevents the default\r\n     * form submission behaviour to validate the form inputs.\r\n     * */\r\n    submit() {\r\n        $(this.#form).off('submit');\r\n        $(this.#form).submit();\r\n        $(this.#form).on('submit');\r\n    }\r\n\r\n    /**\r\n     * It checks all the inputs against the rules set.\r\n     *\r\n     * @return {boolean} True if the form inputs pass the rules, false otherwise\r\n     * */\r\n    validate() {\r\n        // say, we can submit the form\r\n        this.#canSubmit = true;\r\n\r\n        this.#eleArr.forEach((ele) => {\r\n            if (jst.isUndef(ele.dom)) return;\r\n\r\n            ele.animate = true;\r\n            ele.firstBlur = false;\r\n            this.#filter(ele);\r\n            if (this.#canSubmit) this.#canSubmit = ele.ok;\r\n        });\r\n\r\n        return this.#canSubmit;\r\n    }\r\n\r\n    /**\r\n     * For feedback, icon will not be shown\r\n     *\r\n     * @return {FormInspector}\r\n     * */\r\n    noIcon() { this.#noIcon = true; return this; }\r\n\r\n    /**\r\n     * Any type of input feedback will not be shown\r\n     *\r\n     * @return {FormInspector}\r\n     * */\r\n    noMsg() { this.#noMsg = true; return this; }\r\n\r\n    /**\r\n     * Change the icon to be shown when input is accepted\r\n     *\r\n     * @param html {string} Any HTML value for the icon\r\n     * @return {FormInspector}\r\n     * */\r\n    iconOk(html) { this.#iconOk = html; return this; }\r\n\r\n    /**\r\n     * Change the icon to be shown when input has an error\r\n     *\r\n     * @param html {string} Any HTML value for the icon\r\n     * @return {FormInspector}\r\n     * */\r\n    iconErr(html) { this.#iconErr = html; return this; }\r\n\r\n    /**\r\n     * Disables animation for error highlighting\r\n     *\r\n     * @return {FormInspector}\r\n     * */\r\n    noErrAnim() { this.#animateErr = false; return this; }\r\n\r\n    /**\r\n     * Add custom animation to element when there is any error for the element\r\n     *\r\n     * @param fn {function(HTMLElement)} The callback is invoked with the element which has error.\r\n     * @return {FormInspector}\r\n     * */\r\n    errAnim(fn) { this.#errAnimation = fn; return this; }\r\n\r\n    /**\r\n     * Change the color of the error message text\r\n     *\r\n     * @param color {string} Any color value such hex, rgb, color name\r\n     * @return {FormInspector}\r\n     * */\r\n    errColor(color) { this.#colorErr = color; return this; }\r\n\r\n    /**\r\n     * Change the color of accepted input message text\r\n     *\r\n     * @param color {string} Any color value such hex, rgb, color name\r\n     * @return {FormInspector}\r\n     * */\r\n    okColor(color) { this.#colorOk = color; return this; }\r\n\r\n}\r\n","(() => {\r\n\r\n    class Icon {\r\n\r\n        #iconPool = {};\r\n\r\n        #prepare(ele) {\r\n            ele = jst.eleId(ele);\r\n            if (!ele) throw new Error(`No icon element found for ${ele}`);\r\n\r\n            // get the unique id for the icon element so that we can track its animation class\r\n            // and restore it back to the original state. if no id attribute is found; so give\r\n            // it a unique id and save it in the pool.\r\n            let id = $(ele).attr('id');\r\n            if (!id) {\r\n                id = 'jst-id-' + Icon.#getUId();\r\n                $(ele).attr('id', id);\r\n            }\r\n\r\n            // define an object for holding various information for the icon and its state, parent.\r\n            let obj = {};\r\n\r\n            obj.id = id;\r\n            obj.parent = ele;\r\n            obj.icon = jst.getChildOf('.jst-icon-swap', ele);\r\n            obj.original = $(obj.icon).html();\r\n\r\n            // before returning the obj modify the parent opacity\r\n            $(obj.parent).animate({opacity: 0.6});\r\n\r\n            // also make it disable\r\n            $(obj.parent).attr('disabled', 'true');\r\n\r\n            // now save it in the icon pool\r\n            this.#iconPool[id] = obj;\r\n\r\n            return obj;\r\n        }\r\n\r\n        #getObj(ele) {\r\n            ele = jst.eleId(ele);\r\n\r\n            if (!ele) throw new Error(`No element found in the document as specified by the argument.`);\r\n\r\n            let id = $(ele).attr('id');\r\n            if (!id) throw new Error('This element did not go through icon methods yet.');\r\n\r\n            if (this.#iconPool.missing(id)) throw new Error('This element was not found in the icon pool.');\r\n\r\n            return this.#iconPool[id];\r\n        }\r\n\r\n        #apply(ele, icon, animType) {\r\n            let obj = this.#prepare(ele);\r\n\r\n            // store the animation type into the obj for removing the css class later\r\n            obj.anim_type = animType;\r\n\r\n            // set the animation class\r\n            $(obj.icon).addClass(animType);\r\n\r\n            // set the icon value\r\n            $(obj.icon).html(icon);\r\n        }\r\n\r\n        /**\r\n         * Any element can be animated in pulse motion. The element must have an id and its child\r\n         * must be classed with .jst-icon-swap.\r\n         *\r\n         * @param ele {string|object} It can be the id with/without '#' or the element object which\r\n         * is to be animated.\r\n         *\r\n         * @param icon {string} Any html value which will be shown inside the .jst-icon-swap element\r\n         * during animation\r\n         * */\r\n        pulse(ele, icon = 'hourglass_full') { this.#apply(ele, icon, 'jst-anim-pulse'); }\r\n\r\n\r\n        /**\r\n         * Any element can be animated in spin motion. The element must have an id and its child\r\n         * must be classed with .jst-icon-swap.\r\n         *\r\n         * @param ele {string|object} It can be the id with/without '#' or the element object which\r\n         * is to be animated.\r\n         *\r\n         * @param icon {string} Any html value which will be shown inside the .jst-icon-swap element\r\n         * during animation\r\n         * */\r\n        spin(ele, icon = 'loop') { this.#apply(ele, icon, 'jst-anim-spin'); }\r\n\r\n        still(ele, icon = 'schedule') { this.#apply(ele, icon, ''); }\r\n\r\n\r\n        /**\r\n         * Any element in animation can be restored. When restored, in-animation content inside element\r\n         * is also restored.\r\n         *\r\n         * @param ele {string|object} It can be the id with/without '#' or the element object which\r\n         * is to stop animating\r\n         * */\r\n        restore(ele) {\r\n            let obj = this.#getObj(ele);\r\n\r\n            // remove the animation class\r\n            $(obj.icon).removeClass(obj.anim_type);\r\n\r\n            // restore back the original content\r\n            $(obj.icon).html(obj.original);\r\n\r\n            // restore parent opacity\r\n            $(obj.parent).animate({opacity: '1'});\r\n\r\n            // make parent intractable\r\n            $(obj.parent).removeAttr('disabled');\r\n        }\r\n\r\n        static #getUId = () => new Date().valueOf();\r\n\r\n    }\r\n\r\n    window.Icon = new Icon();\r\n\r\n})();","/**********************************************************************************************\r\n *                                        WARNING:                                             *\r\n *           PLEASE DON'T MODIFY THIS UNLESS YOU KNOW WHAT YOU ARE DOING. ANY IN APPROPRIATE   *\r\n *           CHANGE TO THIS CLASS MAY LEAD TO MALFUNCTIONING OR CODE BREAKING.                 *\r\n ************************************************************************************************/\r\n\r\n\r\n/**\r\n * JS-Tea is a collection of JavaScript readable classes and utility functions which\r\n * greatly make the web app development easier.\r\n *\r\n * This js file includes all the js-tea library files together and provides the library\r\n * environment to the code.\r\n * */\r\nclass jst {\r\n\r\n    /**\r\n     * It takes a callback function as argument and executes it immediately when the document\r\n     * is ready, otherwise it adds an event listener to the window and runs the callback when\r\n     * the window is ready. So this method is DOM safe.\r\n     *\r\n     * @param {function()} fn The callback function.\r\n     * */\r\n    static run(fn) {\r\n        if (document.readyState === 'complete') fn();\r\n        else window.addEventListener('load', () => fn());\r\n    }\r\n\r\n    /**\r\n     * Runs a function after a specified amount delay. Internally uses jst.run()\r\n     * method. So this method is DOM safe.\r\n     *\r\n     * @param {number} delay in seconds\r\n     * @param {function ()} fn callback to be invoked after the delay specified\r\n     * */\r\n    static runLater(delay, fn) {\r\n        let d = delay * 1000;\r\n        let f = fn;\r\n        jst.run(() => setTimeout(f, d));\r\n    };\r\n\r\n    /**\r\n     * This click function can be called from anywhere within the document. The order is\r\n     * not important as the click event attachment happens after the document ready state.\r\n     *\r\n     * @param {string|HTMLElement} ele It can be the id to the element either with # sign or not.\r\n     * The dom element can also be passed as an argument.\r\n     *\r\n     * @param {function(Event)} fn The callback function to execute on event occurs\r\n     *\r\n     * */\r\n    static click(ele, fn) {\r\n        jst.run(() => {\r\n            if (Array.isArray(ele)) {\r\n                ele = ele[0];\r\n            } else if (typeof ele === 'string') {\r\n                let id = ele[0] === '#' ? ele.substring(1) : ele;\r\n                ele = document.getElementById(id);\r\n            }\r\n\r\n            if (ele == null) return;\r\n            ele.addEventListener('click', (event) => fn(event));\r\n        });\r\n    }\r\n\r\n    static isDef = (val) => val !== undefined;\r\n\r\n    static isUndef = (val) => val === undefined;\r\n\r\n    static isStr = (val) => !(!val || val.length === 0);\r\n\r\n    static isDomEle = (ele) => $(ele).length !== 0;\r\n\r\n    static eleId(val, space = document) {\r\n        if (typeof val !== 'string') return val;\r\n        val = val[0] === '#' ? val.substring(1) : val;\r\n        return space.getElementById(val);\r\n    }\r\n\r\n    /**\r\n     * Id attribute of a dom element, or a string id with/without \"#\" can be extracted\r\n     * safely. The returned id is the string without the \"#\" sign in front.\r\n     *\r\n     * @param id {object|string} It can be a dom element, or the id string\r\n     * @param onMissId {null|string} It is added to element if there is no id attribute for the element\r\n     * @returns {string|undefined} the provided/extracted id\r\n     * @throws {Error} when the passed id is neither a dom element nor a string value\r\n     * */\r\n    static id(id, onMissId = null) {\r\n        if (jst.isDomEle(id)) {\r\n            let i = $(id).attr('id');\r\n            if (jst.isUndef(i) && onMissId !== null) {\r\n                $(id).attr('id', onMissId);\r\n                i = onMissId;\r\n            }\r\n            return i;\r\n        }\r\n\r\n        if (typeof id === 'string') {\r\n            if (id.startsWith('#')) return id.substring(1);\r\n            return id;\r\n        }\r\n\r\n        throw new Error('Id must be one of the following types: dom element, id string with/without \"#\"');\r\n    }\r\n\r\n    /**\r\n     * Generates a random number from pseudorandom generator using Math.random\r\n     * method.\r\n     *\r\n     * @param a {number} random number start range.\r\n     * @param b {number} random number end range.\r\n     * @return {number} a random number in between a & b.\r\n     * */\r\n    static random = (a, b) => Math.floor(Math.random() * b) + a;\r\n\r\n    static jqueryuiISO = (id) => $(`#${id}`).datepicker({dateFormat: \"yy-mm-dd\"});\r\n\r\n    /**\r\n     * This keeps the only JS EXECUTION THREAD busy in a loop for specified\r\n     * amount of seconds\r\n     *\r\n     * @param {number} sec amount of seconds to be sleeping for\r\n     * */\r\n    static sleep(sec) {\r\n        sec = (new Date().valueOf()) + (1000 * sec);\r\n        while (true) if (new Date().valueOf() >= sec) break;\r\n    }\r\n\r\n    static getChildOf = (selector, parent) => $(parent).find(`${selector}`)[0];\r\n\r\n    static getChildrenOf = (id, parent) => $(parent).find(`${id}`).children();\r\n\r\n    static queryParam(key, defaultValue) {\r\n        let params = new URL(document.location).searchParams;\r\n        let value = params.get(key);\r\n        return value != null ? value : defaultValue;\r\n    }\r\n\r\n    static uniqueId() {\r\n        let timestamp = Date.now().toString();\r\n        let random = this.random(1, 1000);\r\n        return `${timestamp}${random}`;\r\n    }\r\n\r\n    static switchCls(condition, cls, ele) {\r\n        if (condition) $(ele).addClass(cls);\r\n        else $(ele).removeClass(cls);\r\n    }\r\n\r\n    static updateProperties() {\r\n\r\n        window.log = (msg) => console.log(msg);\r\n        window.warn = (msg) => console.warn(msg);\r\n        window.err = (msg) => console.error(msg);\r\n        window.info = (msg) => console.info(msg);\r\n\r\n        Object.defineProperty(Array.prototype, 'owns', {\r\n            value: function (item) {\r\n                if (item === undefined) throw new Error(`Key can't be undefined.`);\r\n                return this.indexOf(item) !== -1;\r\n            },\r\n            writable: false, // no code can rewrite/modify the contain method\r\n            configurable: false // no one can configure this property\r\n        });\r\n\r\n        Object.defineProperty(Array.prototype, 'missing', {\r\n            value: function (item) {\r\n                if (item === undefined) throw new Error(`Key can't be undefined.`);\r\n                return this.indexOf(item) === -1;\r\n            },\r\n            writable: false, // no code can rewrite/modify the contain method\r\n            configurable: false // no one can configure this property\r\n        });\r\n\r\n        Object.defineProperty(Array.prototype, 'erase', {\r\n            value: function (item) {\r\n                let index = this.indexOf(item);\r\n                if (index < 0) return null;\r\n                let value = this[index];\r\n                this.splice(index, 1);\r\n                return value;\r\n            }, writable: false, configurable: false\r\n        });\r\n\r\n        Object.defineProperty(Array.prototype, 'eraseAt', {\r\n            value: function (index) {\r\n                if (typeof index !== 'number' || index < 0) return null;\r\n                let value = this[index];\r\n                this.splice(index, 1);\r\n                return value;\r\n            }, writable: false, configurable: false\r\n        });\r\n\r\n        Object.defineProperty(Object.prototype, 'owns', {\r\n            value: function (key) {\r\n                if (key === undefined) throw new Error(`Key can't be undefined.`);\r\n                return this.hasOwnProperty(key);\r\n            },\r\n            writable: false, // no code can rewrite/modify the contain method\r\n            configurable: false // no one can configure this property\r\n        });\r\n\r\n        Object.defineProperty(Object.prototype, 'missing', {\r\n            value: function (key) {\r\n                if (key === undefined) throw new Error(`Key can't be undefined.`);\r\n                return !this.owns(key);\r\n            },\r\n            writable: false, // no code can rewrite/modify the contain method\r\n            configurable: false // no one can configure this property\r\n        });\r\n\r\n        Object.defineProperty(Object.prototype, 'erase', {\r\n            value: function (key) {\r\n                let val = {key: key, value: this[key]};\r\n                delete this[key];\r\n                return val;\r\n            }, writable: false, configurable: false\r\n        });\r\n\r\n        /*\r\n        * Add various helpful property methods to objects os Array, String, Object to\r\n        * make it easier for code writing and clarity.\r\n        * */\r\n\r\n        Object.defineProperty(String.prototype, 'capitalize', {\r\n            value: function (lower = false) {\r\n                return (lower ? this.toLowerCase() : this).replace(/(?:^|\\s|[\"'([{])+\\S/g, match => match.toUpperCase());\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds OverlayScrollbars to specified element\r\n     *\r\n     * @param {HTMLElement} ele\r\n     * */\r\n    static overlayScrollbar(ele) {\r\n        if (typeof OverlayScrollbars !== 'function') {\r\n            warn(`OverlayScrollbars is not working properly. Popup can't scroll their content.`);\r\n            return;\r\n        }\r\n\r\n        OverlayScrollbars(ele, {\r\n            scrollbars: {\r\n                clickScrolling: true,\r\n                dragScrolling: true,\r\n                autoHide: 'move',\r\n                autoHideDelay: 1500\r\n            },\r\n        })\r\n    }\r\n\r\n}\r\n\r\njst.updateProperties();\r\n\r\n/*\r\n* Add OverlayScrollbars css file\r\n* */\r\n(() => {\r\n    let cssLink = document.createElement('link');\r\n    cssLink.rel = 'stylesheet';\r\n    cssLink.type = 'text/css';\r\n    cssLink.href = 'https://cdn.jsdelivr.net/npm/overlayscrollbars/css/OverlayScrollbars.min.css';\r\n    document.head.appendChild(cssLink);\r\n})();\r\n","/**\r\n* Modal class really simplifies showing modal in the web page. It adds overlay div\r\n* on construction. Method show and hide can be configured with object-config and callback\r\n* functions.\r\n*\r\n* Any div marked with jst-modal will become ready to be shown as modal.\r\n* data-jst-modal-title attribute can add the title to the modal from HTML markup.\r\n* optionally Modal.title() can be invoked for title.\r\n*\r\n* Modal can also be configured with dark() and light() method where appropriate styles are\r\n* applied behind the scene.\r\n*\r\n* The overall layout structure is like the following.\r\n*\r\n*       <div .jst-overlay>\r\n*       <div.jst-modal>\r\n*           <div.jst-modal-flex>\r\n*               <div.jst-modal-flex-child>\r\n*                   <div.jst-modal-header>\r\n*                       <h5.jst-modal-title>\r\n*                       <span.jst-modal-icon-close>\r\n*                   <div.jst-modal-content>\r\n* */\r\n\r\n(() => {\r\n\r\n    class Modal {\r\n\r\n        #id;\r\n\r\n        #dismissed = false;\r\n        #hidden = false;\r\n\r\n        #dismissCallback;\r\n        #hideCallback;\r\n\r\n        // callback invoked when modal is shown from hidden state\r\n        #revivedCallback;\r\n\r\n        // whether the modal will be closeable by Esc keyup event or clicking outside the modal\r\n        #cancelable = false;\r\n\r\n        #dark = false;\r\n        #title;\r\n        #padding;\r\n\r\n        #modal = null;\r\n\r\n        /**\r\n        * @param {string} id\r\n        * */\r\n        constructor(id) {\r\n            this.#id = id;\r\n        }\r\n\r\n        #checkIfDismissed() {\r\n            if (this.#dismissed) throw new Error('Modal was dismissed. Create a fresh one!');\r\n        }\r\n\r\n        #adjustModalSize(width, height) {\r\n            let ele = jst.getChildOf('.jst-modal-flex-child', this.#modal);\r\n            $(ele).css('width', width);\r\n            $(ele).css('height', height);\r\n        }\r\n\r\n        #applyTheme() {\r\n            OverlayManager.theme(this.#dark);\r\n\r\n            let  ele = jst.getChildOf('.jst-modal-flex-child', this.#modal);\r\n            jst.switchCls(this.#dark, 'jst-modal-flex-child-dark', ele);\r\n\r\n            ele = jst.getChildOf('.jst-modal-header', this.#modal);\r\n            jst.switchCls(this.#dark, 'jst-modal-header-dark', ele);\r\n\r\n            ele = jst.getChildOf('.jst-modal-icon-close', this.#modal);\r\n            jst.switchCls(this.#dark, 'jst-modal-icon-close-dark', ele);\r\n        }\r\n\r\n        #updateCloseIcon() {\r\n            let closeIcon = jst.getChildOf('.jst-modal-icon-close', this.#modal);\r\n            if (!this.#cancelable) $(closeIcon).fadeOut(250);\r\n            else $(closeIcon).fadeIn(250);\r\n        }\r\n\r\n        #updateTitle() {\r\n            // get the modal title\r\n            let title =  this.#title || 'jstea Modal 😎';\r\n            $(jst.getChildOf('.jst-modal-title', this.#modal)).html(title);\r\n        }\r\n\r\n        #setCloseIconCallback() {\r\n            let btn = jst.getChildOf('.jst-modal-icon-close', this.#modal);\r\n            jst.click(btn, () => this.dismiss());\r\n        }\r\n\r\n        #injectDOM() {\r\n            let modalFlex = jst.getChildOf('.jst-modal-flex', this.#modal);\r\n\r\n            // check whether the modal dom has already been injected\r\n            if (jst.isDef(modalFlex)) return;\r\n\r\n            // wrap all the content of the div of class jst-modal inside the jst-modal-flex\r\n            // so that we can show the modal as display flex where the position x & y will be automatic.\r\n            let modalFlexHtml = `<div class=\"jst-modal-flex\"><div class=\"jst-modal-flex-child\"><div  class=\"jst-modal-content\"></div></div></div>`;\r\n            $($(this.#modal).contents()).wrapAll(modalFlexHtml);\r\n\r\n            // adjust padding\r\n            $(this.#modal).find('.jst-modal-content').css('padding', this.#padding);\r\n\r\n            let modalFlexChild = jst.getChildOf('.jst-modal-flex-child', this.#modal);\r\n            let modalHeader = `\r\n                <div class=\"jst-modal-header\">\r\n                    <h5 class=\"jst-m-0 jst-p-0 jst-modal-title\"></h5>\r\n                    <span class=\"material-icons jst-modal-icon-close\" title=\"Close window\">close</span>\r\n                </div>\r\n            `;\r\n            $(modalFlexChild).prepend(modalHeader);\r\n\r\n            // initiate the scrollbar for the modal content\r\n            let modalContent = jst.getChildOf('.jst-modal-content', modalFlexChild);\r\n            jst.overlayScrollbar(modalContent);\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when user closes the modal or pressed the escape\r\n         * button.\r\n         *\r\n         * @param callback {function} Function to be invoked when the modal is dismissed\r\n         * @return Modal\r\n         * */\r\n        onDismiss(callback) {\r\n            this.#dismissCallback = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when the modal is going to be hidden\r\n         *\r\n         * @param callback {function} Function to be invoked when the modal just has been hidden\r\n         * @return Modal\r\n         * */\r\n        onHide(callback) {\r\n            this.#hideCallback = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Sets a callback to be notified when the modal is being shown from hidden state.\r\n         *\r\n         * @param {function()} callback Function to be invoked when the modal is being shown from hidden state\r\n         * @return Modal\r\n         * */\r\n        onRevived(callback) {\r\n            this.#revivedCallback = callback;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * This method is invoked when a modal is in display and users hits the escape button.\r\n         * OverlayManager calls this method automatically.\r\n         * <br><b>This method should be called directly.</b>\r\n         *\r\n         * @param event {object} Keyup event object passed in by the OverlayManger\r\n         * */\r\n        onEscapeEvent(event) {\r\n            if (this.#cancelable) this.dismiss();\r\n        }\r\n\r\n        #show(option) {\r\n            this.#checkIfDismissed();\r\n\r\n            let {w=450, h = 'auto', pad = '1rem', cancelable = true} = option;\r\n\r\n            this.#id = jst.id(this.#id);\r\n            this.#modal = $(jst.eleId(this.#id));\r\n            this.#cancelable = cancelable;\r\n            this.#padding = pad;\r\n\r\n            this.#injectDOM();\r\n            this.#setCloseIconCallback();\r\n            this.#adjustModalSize(w, h);\r\n            this.#updateTitle();\r\n            this.#updateCloseIcon();\r\n            this.#applyTheme();\r\n\r\n            // acquire the overlay & show the modal\r\n            OverlayManager.acquire(this);\r\n            this.#modal.fadeIn(250);\r\n\r\n            this.#hidden = false;\r\n        }\r\n\r\n        /**\r\n         * Shows the modal\r\n         *\r\n         * @param {object=} option Optional values: w=450, h=auto, cancelable=true, padding=1rem\r\n         * @param {number|string=} option.w - The width of the modal in px. Max value is 75% of the window's inner width.\r\n         * @param {number|string=} option.h - The height of the modal in px. Max height is 75% of the window's inner height.\r\n         * @param {string=} option.pad - The padding of the modal in px\r\n         * @param {boolean=} option.cancelable - Flag makes the modal cancellation status\r\n         * */\r\n        show(option = {}) {\r\n            if (OverlayManager.notReady()) {\r\n                // show after a bit of delay to avoid overlay animation glitch because of caching\r\n                jst.runLater(0.05, () => this.#show(option));\r\n            } else this.#show(option);\r\n        }\r\n\r\n        /*\r\n        * Dismisses the modal\r\n        * */\r\n        dismiss() {\r\n            if (this.#dismissed) return;\r\n            this.#dismissed = true;\r\n\r\n            OverlayManager.release(this);\r\n            $(this.#modal).fadeOut(250);\r\n            if (this.#dismissCallback) this.#dismissCallback();\r\n        }\r\n\r\n        /**\r\n         * Hides the modal\r\n         * * */\r\n        hide() {\r\n            if (this.#dismissed) return;\r\n\r\n            this.#hidden = true;\r\n\r\n            $(this.#modal).fadeOut(250);\r\n            if (this.#hideCallback) this.#hideCallback();\r\n        }\r\n\r\n        /**\r\n         * OverlayManager invokes this method when the modal is being shown from hidden\r\n         * state.\r\n         * <br><b>It should be called directly.</b>\r\n         * */\r\n        makeVisible() {\r\n            this.#hidden = false;\r\n            this.#applyTheme();\r\n            $(this.#modal).fadeIn(250);\r\n            if (this.#revivedCallback) this.#revivedCallback();\r\n        }\r\n\r\n        /**\r\n         * Sets dark theme to the modal\r\n         *\r\n         * @return Modal\r\n         * */\r\n        dark() { this.#dark = true; return this; }\r\n\r\n        /**\r\n         * Sets light theme to the modal\r\n         *\r\n         * @return Modal\r\n         * */\r\n        light() { this.#dark = false; return this; }\r\n\r\n        /**\r\n         * Changes the modal title. It overrides the title defined in the data\r\n         * attribute by data-jst-modal-title.\r\n         *\r\n         * @param value {string} Modal title\r\n         * @return Modal\r\n         * */\r\n        title(value) {\r\n            this.#title = value;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Makes the modal not cancelable. UI element gets updated automatically.\r\n         *\r\n         * @return {Modal}\r\n         * */\r\n        notCancelable() {\r\n            this.#cancelable = false;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Makes the modal cancelable. UI element gets updated behind the scene.\r\n         *\r\n         * @return {Modal}\r\n         * */\r\n        cancelable() {\r\n            this.#cancelable = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Tells whether the modal is shown or not\r\n         *\r\n         * @return {boolean} true if the modal is shown, false otherwise\r\n         * */\r\n        shown() {\r\n            return !this.hidden;\r\n        }\r\n\r\n        get hidden() {\r\n            return this.#hidden;\r\n        }\r\n\r\n        get dismissed() {\r\n            return this.#dismissed;\r\n        }\r\n\r\n        get id () {\r\n            return this.#id;\r\n        }\r\n\r\n        /**\r\n         * Sets the modal title. It can be html or string value\r\n         *\r\n         * @param title {string} Modal title\r\n         * */\r\n        setTitle(title) {\r\n            this.#title =  title;\r\n            this.#updateTitle();\r\n        }\r\n\r\n        /**\r\n         * Applies dark theme to the modal\r\n         * */\r\n        makeDark() {\r\n            this.#dark = true;\r\n            this.#applyTheme();\r\n        }\r\n\r\n        /**\r\n         * Applies light theme to the modal\r\n         * */\r\n        makeLight() {\r\n            this.#dark = false;\r\n            this.#applyTheme();\r\n        }\r\n\r\n        /**\r\n         * Changes the non-cancelable modal to cancelable\r\n         * */\r\n        makeCancelable() {\r\n            this.#cancelable = true;\r\n            this.#updateCloseIcon();\r\n        }\r\n\r\n        /**\r\n         * Changes the non-cancelable modal to cancelable\r\n         * */\r\n        makeNotCancelable() {\r\n            this.#cancelable = false;\r\n            this.#updateCloseIcon();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Any DOM element marked with class .jst-modal and id can be modal-ed.\r\n     *\r\n     * @param {string|HTMLElement} id - It can be the id with/without '#' or the html element object which\r\n     * is to be shown as modal.\r\n     * @return {Modal} new modal\r\n     * */\r\n    window.Modal = (id) => new Modal(id);\r\n\r\n})();\r\n","\r\nclass Num {\r\n\r\n    /*\r\n    * currency sign constants\r\n    * */\r\n\r\n    static MONEY_BD = '৳';\r\n    static MONEY_GBP = '£';\r\n    static MONEY_USD = '$';\r\n\r\n    /**\r\n     * Any number can be formatted in either currency format with sign or fractional\r\n     * number with specified place.\r\n     *\r\n     * @param {number|string} input the number is either in string or number format.\r\n     * @param {string} money currency sign for the number.\r\n     * @param {boolean} lead0 indicates whether to add leading zero before the number.\r\n     * @param {number} place the fractional place of number.\r\n     * @return {string} formatted number with currency sign as specified by arguments.\r\n     * */\r\n    static format(input, money = '', lead0 = false, place = 2) {\r\n        // make sure we have a number\r\n        let num = parseFloat(input);\r\n        if (isNaN(num)) return '0-0';\r\n\r\n        // figure out whether it is a round up integer or floating value\r\n        let integer = Number.isSafeInteger(num);\r\n\r\n        // learn if it is a positive value\r\n        let negative = num < 0;\r\n        num = negative ? Math.abs(num) : num;\r\n\r\n        // create the symbol\r\n        let symbol = negative ? '-' : '';\r\n        symbol += money.length === 0 ? '' : money;\r\n\r\n        // add decimal places\r\n        num = !integer ? num.toFixed(place) : num;\r\n\r\n        // add leading zero if asked\r\n        num = lead0 ? this.lead0(num) : num;\r\n\r\n        return `${symbol}${num}`;\r\n    }\r\n\r\n    /**\r\n     * Number formatted in currency can be parsed back to float number using this\r\n     * method. By the default, sign is GBP(Great Britten Pound).\r\n     *\r\n     * @param {string} input number is in currency format.\r\n     * @param {string} sign currency sign.\r\n     * @return {number} the parsed floating number.\r\n     * */\r\n    static moneyToNum(input, sign = Num.MONEY_GBP) {\r\n        input = String(input);\r\n        return parseFloat(input.replace(sign, ''));\r\n    }\r\n\r\n    /**\r\n     * Leading zero can be added to any number if it is less than 10.\r\n     *\r\n     * @param {number} number the number.\r\n     * @return {string} number with leading zero if needed.\r\n     * */\r\n    static lead0(number) {\r\n        return (number < 10) ? `0${number}` : number;\r\n    }\r\n\r\n}","(() => {\r\n\r\n    class Overlay {\r\n\r\n        #clientList = [];\r\n\r\n        #ready = false;\r\n        #overlay;\r\n\r\n        constructor() {\r\n            jst.run(() => {\r\n                // insert the element once if there is not already one\r\n                let overlay = `<div class=\"jst-overlay\"></div>`;\r\n                $('body').prepend(overlay);\r\n                this.#overlay = $('.jst-overlay');\r\n\r\n                // pass the keydown escape or mouse click event to the currently showing modal/dialog\r\n                $(document).on('keydown click', this.#overlay,(event) => {\r\n                    if (this.#cLen() === 0) return true;\r\n\r\n                    let keyboard = event.type === 'keydown' && event.key === 'Escape';\r\n                    let click = event.type === 'click' && $(event.target).hasClass('jst-modal-flex');\r\n\r\n                    if (!keyboard && !click) return true;\r\n\r\n                    let len = this.#cLen(-1);\r\n                    this.#clientList[len]?.onEscapeEvent(event);\r\n                });\r\n\r\n                $(this.#overlay).hide(0);\r\n                this.#ready = true;\r\n            });\r\n        }\r\n\r\n        #cLen(adjust = 0) {\r\n            return this.#clientList.length + adjust;\r\n        }\r\n\r\n        #update() {\r\n            if (this.#cLen() === 0) {\r\n                // If there is no client to overlay then wait for 75 milliseconds before\r\n                // hiding the overlay. Another client may show up in the half way hiding.\r\n                jst.runLater(.075, () => {\r\n                    if (this.#cLen() === 0) {\r\n\r\n                        $(this.#overlay).fadeOut(250);\r\n                    }\r\n                    else this.#clientList[this.#cLen(-1)].makeVisible();\r\n                })\r\n            }\r\n            else this.#clientList[this.#cLen(-1)].makeVisible();\r\n        }\r\n\r\n        theme(dark = false) {\r\n            let ele = $('.jst-overlay');\r\n            jst.switchCls(dark, 'jst-overlay-dark', ele);\r\n        }\r\n\r\n        /**\r\n         * Overlay can be acquired for any client. The client must have the interface\r\n         * consists of methods: id(), onEscapeEvent(event), makeVisible(), hide()\r\n         * */\r\n        acquire(client) {\r\n            // ask the currently showing client to hide, if there is any\r\n            let lastIndex = this.#cLen(-1);\r\n            this.#clientList[lastIndex]?.hide();\r\n\r\n            // do we need to show overlay?\r\n            if (lastIndex === -1) $(this.#overlay).fadeIn(250);\r\n\r\n            this.#clientList.push(client);\r\n        }\r\n\r\n        /**\r\n         * Client can release any acquired overlay. The client must have an interface of\r\n         * essential methods which are needed by OverlayManger to handle the complete\r\n         * lifecycle of the overlay.\r\n         *\r\n         * See OverlayManger.acquire() method for more details.\r\n         * */\r\n        release(client) {\r\n            this.#clientList.erase(client);\r\n\r\n            // do we need to hide the overlay itself?\r\n            this.#update();\r\n        }\r\n\r\n        notReady() { return !this.#ready; }\r\n\r\n        ready() { return this.#ready; }\r\n\r\n        get clientList () {\r\n            return this.#clientList;\r\n        }\r\n\r\n    }\r\n\r\n    window.OverlayManager = new Overlay();\r\n\r\n    /**\r\n     * Get any previously or currently showing popup with the id.\r\n     *\r\n     * @param {string} id The popup id\r\n     * @returns {object | undefined} undefined if there is no popup with the id otherwise the popup\r\n     * */\r\n    window.getPopup = (id) => {\r\n        let clients = OverlayManager.clientList;\r\n        for(let i in clients) {\r\n            if (clients[i].id === id) return clients[i];\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Dismiss any previously or currently showing popup with the id.\r\n     *\r\n     * @param {string} id The popup id\r\n     * @returns {boolean} true if it finds the popup with the specified id, false otherwise\r\n     * */\r\n    window.dismissPopup = (id) => {\r\n        let popup = getPopup(id);\r\n        if (jst.isUndef(popup)) return false;\r\n        popup.dismiss();\r\n        return true;\r\n    };\r\n\r\n})();","/*!\r\n * OverlayScrollbars\r\n * https://github.com/KingSora/OverlayScrollbars\r\n *\r\n * Version: 1.13.3\r\n *\r\n * Copyright KingSora | Rene Haas.\r\n * https://github.com/KingSora\r\n *\r\n * Released under the MIT license.\r\n * Date: 20.07.2022\r\n */\r\n\r\n(function (global, factory) {\r\n    if (typeof define === 'function' && define.amd)\r\n        define(function () { return factory(global, global.document, undefined); });\r\n    else if (typeof module === 'object' && typeof module.exports === 'object')\r\n        module.exports = factory(global, global.document, undefined);\r\n    else\r\n        factory(global, global.document, undefined);\r\n}(typeof window !== 'undefined' ? window : this,\r\n    function (window, document, undefined) {\r\n        'use strict';\r\n        var PLUGINNAME = 'OverlayScrollbars';\r\n        var TYPES = {\r\n            o: 'object',\r\n            f: 'function',\r\n            a: 'array',\r\n            s: 'string',\r\n            b: 'boolean',\r\n            n: 'number',\r\n            u: 'undefined',\r\n            z: 'null'\r\n            //d : 'date',\r\n            //e : 'error',\r\n            //r : 'regexp',\r\n            //y : 'symbol'\r\n        };\r\n        var LEXICON = {\r\n            c: 'class',\r\n            s: 'style',\r\n            i: 'id',\r\n            l: 'length',\r\n            p: 'prototype',\r\n            ti: 'tabindex',\r\n            oH: 'offsetHeight',\r\n            cH: 'clientHeight',\r\n            sH: 'scrollHeight',\r\n            oW: 'offsetWidth',\r\n            cW: 'clientWidth',\r\n            sW: 'scrollWidth',\r\n            hOP: 'hasOwnProperty',\r\n            bCR: 'getBoundingClientRect'\r\n        };\r\n        var VENDORS = (function () {\r\n            //https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n            var jsCache = {};\r\n            var cssCache = {};\r\n            var cssPrefixes = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\n            var jsPrefixes = ['WebKit', 'Moz', 'O', 'MS'];\r\n            function firstLetterToUpper(str) {\r\n                return str.charAt(0).toUpperCase() + str.slice(1);\r\n            }\r\n\r\n            return {\r\n                _cssPrefixes: cssPrefixes,\r\n                _jsPrefixes: jsPrefixes,\r\n                _cssProperty: function (name) {\r\n                    var result = cssCache[name];\r\n\r\n                    if (cssCache[LEXICON.hOP](name))\r\n                        return result;\r\n\r\n                    var uppercasedName = firstLetterToUpper(name);\r\n                    var elmStyle = document.createElement('div')[LEXICON.s];\r\n                    var resultPossibilities;\r\n                    var i = 0;\r\n                    var v;\r\n                    var currVendorWithoutDashes;\r\n\r\n                    for (; i < cssPrefixes.length; i++) {\r\n                        currVendorWithoutDashes = cssPrefixes[i].replace(/-/g, '');\r\n                        resultPossibilities = [\r\n                            name, //transition\r\n                            cssPrefixes[i] + name, //-webkit-transition\r\n                            currVendorWithoutDashes + uppercasedName, //webkitTransition\r\n                            firstLetterToUpper(currVendorWithoutDashes) + uppercasedName //WebkitTransition\r\n                        ];\r\n                        for (v = 0; v < resultPossibilities[LEXICON.l]; v++) {\r\n                            if (elmStyle[resultPossibilities[v]] !== undefined) {\r\n                                result = resultPossibilities[v];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    cssCache[name] = result;\r\n                    return result;\r\n                },\r\n                _cssPropertyValue: function (property, values, suffix) {\r\n                    var name = property + ' ' + values;\r\n                    var result = cssCache[name];\r\n\r\n                    if (cssCache[LEXICON.hOP](name))\r\n                        return result;\r\n\r\n                    var dummyStyle = document.createElement('div')[LEXICON.s];\r\n                    var possbleValues = values.split(' ');\r\n                    var preparedSuffix = suffix || '';\r\n                    var i = 0;\r\n                    var v = -1;\r\n                    var prop;\r\n\r\n                    for (; i < possbleValues[LEXICON.l]; i++) {\r\n                        for (; v < VENDORS._cssPrefixes[LEXICON.l]; v++) {\r\n                            prop = v < 0 ? possbleValues[i] : VENDORS._cssPrefixes[v] + possbleValues[i];\r\n                            dummyStyle.cssText = property + ':' + prop + preparedSuffix;\r\n                            if (dummyStyle[LEXICON.l]) {\r\n                                result = prop;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    cssCache[name] = result;\r\n                    return result;\r\n                },\r\n                _jsAPI: function (name, isInterface, fallback) {\r\n                    var i = 0;\r\n                    var result = jsCache[name];\r\n\r\n                    if (!jsCache[LEXICON.hOP](name)) {\r\n                        result = window[name];\r\n                        for (; i < jsPrefixes[LEXICON.l]; i++)\r\n                            result = result || window[(isInterface ? jsPrefixes[i] : jsPrefixes[i].toLowerCase()) + firstLetterToUpper(name)];\r\n                        jsCache[name] = result;\r\n                    }\r\n                    return result || fallback;\r\n                }\r\n            }\r\n        })();\r\n        var COMPATIBILITY = (function () {\r\n            function windowSize(x) {\r\n                return x ? window.innerWidth || document.documentElement[LEXICON.cW] || document.body[LEXICON.cW] : window.innerHeight || document.documentElement[LEXICON.cH] || document.body[LEXICON.cH];\r\n            }\r\n            function bind(func, thisObj) {\r\n                if (typeof func != TYPES.f) {\r\n                    throw \"Can't bind function!\";\r\n                    // closest thing possible to the ECMAScript 5\r\n                    // internal IsCallable function\r\n                    //throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\r\n                }\r\n                var proto = LEXICON.p;\r\n                var aArgs = Array[proto].slice.call(arguments, 2);\r\n                var fNOP = function () { };\r\n                var fBound = function () { return func.apply(this instanceof fNOP ? this : thisObj, aArgs.concat(Array[proto].slice.call(arguments))); };\r\n\r\n                if (func[proto])\r\n                    fNOP[proto] = func[proto]; // Function.prototype doesn't have a prototype property\r\n                fBound[proto] = new fNOP();\r\n\r\n                return fBound;\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * Gets the current window width.\r\n                 * @returns {Number|number} The current window width in pixel.\r\n                 */\r\n                wW: bind(windowSize, 0, true),\r\n\r\n                /**\r\n                 * Gets the current window height.\r\n                 * @returns {Number|number} The current window height in pixel.\r\n                 */\r\n                wH: bind(windowSize, 0),\r\n\r\n                /**\r\n                 * Gets the MutationObserver Object or undefined if not supported.\r\n                 * @returns {MutationObserver|*|undefined} The MutationsObserver Object or undefined.\r\n                 */\r\n                mO: bind(VENDORS._jsAPI, 0, 'MutationObserver', true),\r\n\r\n                /**\r\n                 * Gets the ResizeObserver Object or undefined if not supported.\r\n                 * @returns {MutationObserver|*|undefined} The ResizeObserver Object or undefined.\r\n                 */\r\n                rO: bind(VENDORS._jsAPI, 0, 'ResizeObserver', true),\r\n\r\n                /**\r\n                 * Gets the RequestAnimationFrame method or it's corresponding polyfill.\r\n                 * @returns {*|Function} The RequestAnimationFrame method or it's corresponding polyfill.\r\n                 */\r\n                rAF: bind(VENDORS._jsAPI, 0, 'requestAnimationFrame', false, function (func) { return window.setTimeout(func, 1000 / 60); }),\r\n\r\n                /**\r\n                 * Gets the CancelAnimationFrame method or it's corresponding polyfill.\r\n                 * @returns {*|Function} The CancelAnimationFrame method or it's corresponding polyfill.\r\n                 */\r\n                cAF: bind(VENDORS._jsAPI, 0, 'cancelAnimationFrame', false, function (id) { return window.clearTimeout(id); }),\r\n\r\n                /**\r\n                 * Gets the current time.\r\n                 * @returns {number} The current time.\r\n                 */\r\n                now: function () {\r\n                    return Date.now && Date.now() || new Date().getTime();\r\n                },\r\n\r\n                /**\r\n                 * Stops the propagation of the given event.\r\n                 * @param event The event of which the propagation shall be stoped.\r\n                 */\r\n                stpP: function (event) {\r\n                    if (event.stopPropagation)\r\n                        event.stopPropagation();\r\n                    else\r\n                        event.cancelBubble = true;\r\n                },\r\n\r\n                /**\r\n                 * Prevents the default action of the given event.\r\n                 * @param event The event of which the default action shall be prevented.\r\n                 */\r\n                prvD: function (event) {\r\n                    if (event.preventDefault && event.cancelable)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                },\r\n\r\n                /**\r\n                 * Gets the pageX and pageY values of the given mouse event.\r\n                 * @param event The mouse event of which the pageX and pageX shall be got.\r\n                 * @returns {{x: number, y: number}} x = pageX value, y = pageY value.\r\n                 */\r\n                page: function (event) {\r\n                    event = event.originalEvent || event;\r\n\r\n                    var strPage = 'page';\r\n                    var strClient = 'client';\r\n                    var strX = 'X';\r\n                    var strY = 'Y';\r\n                    var target = event.target || event.srcElement || document;\r\n                    var eventDoc = target.ownerDocument || document;\r\n                    var doc = eventDoc.documentElement;\r\n                    var body = eventDoc.body;\r\n\r\n                    //if touch event return return pageX/Y of it\r\n                    if (event.touches !== undefined) {\r\n                        var touch = event.touches[0];\r\n                        return {\r\n                            x: touch[strPage + strX],\r\n                            y: touch[strPage + strY]\r\n                        }\r\n                    }\r\n\r\n                    // Calculate pageX/Y if not native supported\r\n                    if (!event[strPage + strX] && event[strClient + strX] && event[strClient + strX] != null) {\r\n\r\n                        return {\r\n                            x: event[strClient + strX] +\r\n                                (doc && doc.scrollLeft || body && body.scrollLeft || 0) -\r\n                                (doc && doc.clientLeft || body && body.clientLeft || 0),\r\n                            y: event[strClient + strY] +\r\n                                (doc && doc.scrollTop || body && body.scrollTop || 0) -\r\n                                (doc && doc.clientTop || body && body.clientTop || 0)\r\n                        }\r\n                    }\r\n                    return {\r\n                        x: event[strPage + strX],\r\n                        y: event[strPage + strY]\r\n                    };\r\n                },\r\n\r\n                /**\r\n                 * Gets the clicked mouse button of the given mouse event.\r\n                 * @param event The mouse event of which the clicked button shal be got.\r\n                 * @returns {number} The number of the clicked mouse button. (0 : none | 1 : leftButton | 2 : middleButton | 3 : rightButton)\r\n                 */\r\n                mBtn: function (event) {\r\n                    var button = event.button;\r\n                    if (!event.which && button !== undefined)\r\n                        return (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));\r\n                    else\r\n                        return event.which;\r\n                },\r\n\r\n                /**\r\n                 * Checks whether a item is in the given array and returns its index.\r\n                 * @param item The item of which the position in the array shall be determined.\r\n                 * @param arr The array.\r\n                 * @returns {number} The zero based index of the item or -1 if the item isn't in the array.\r\n                 */\r\n                inA: function (item, arr) {\r\n                    for (var i = 0; i < arr[LEXICON.l]; i++)\r\n                        //Sometiems in IE a \"SCRIPT70\" Permission denied error occurs if HTML elements in a iFrame are compared\r\n                        try {\r\n                            if (arr[i] === item)\r\n                                return i;\r\n                        }\r\n                        catch (e) { }\r\n                    return -1;\r\n                },\r\n\r\n                /**\r\n                 * Returns true if the given value is a array.\r\n                 * @param arr The potential array.\r\n                 * @returns {boolean} True if the given value is a array, false otherwise.\r\n                 */\r\n                isA: function (arr) {\r\n                    var def = Array.isArray;\r\n                    return def ? def(arr) : this.type(arr) == TYPES.a;\r\n                },\r\n\r\n                /**\r\n                 * Determine the internal JavaScript [[Class]] of the given object.\r\n                 * @param obj The object of which the type shall be determined.\r\n                 * @returns {string} The type of the given object.\r\n                 */\r\n                type: function (obj) {\r\n                    if (obj === undefined)\r\n                        return obj + '';\r\n                    if (obj === null)\r\n                        return obj + '';\r\n                    return Object[LEXICON.p].toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\r\n                },\r\n\r\n\r\n                bind: bind\r\n\r\n                /**\r\n                 * Gets the vendor-prefixed CSS property by the given name.\r\n                 * For example the given name is \"transform\" and you're using a old Firefox browser then the returned value would be \"-moz-transform\".\r\n                 * If the browser doesn't need a vendor-prefix, then the returned string is the given name.\r\n                 * If the browser doesn't support the given property name at all (not even with a vendor-prefix) the returned value is null.\r\n                 * @param propName The unprefixed CSS property name.\r\n                 * @returns {string|null} The vendor-prefixed CSS property or null if the browser doesn't support the given CSS property.\r\n\r\n                 cssProp: function(propName) {\r\n                    return VENDORS._cssProperty(propName);\r\n                }\r\n                 */\r\n            }\r\n        })();\r\n\r\n\r\n        var MATH = Math;\r\n        var JQUERY = window.jQuery;\r\n        var EASING = (function () {\r\n            var _easingsMath = {\r\n                p: MATH.PI,\r\n                c: MATH.cos,\r\n                s: MATH.sin,\r\n                w: MATH.pow,\r\n                t: MATH.sqrt,\r\n                n: MATH.asin,\r\n                a: MATH.abs,\r\n                o: 1.70158\r\n            };\r\n\r\n            /*\r\n             x : current percent (0 - 1),\r\n             t : current time (duration * percent),\r\n             b : start value (from),\r\n             c : end value (to),\r\n             d : duration\r\n\r\n             easingName : function(x, t, b, c, d) { return easedValue; }\r\n             */\r\n\r\n            return {\r\n                swing: function (x, t, b, c, d) {\r\n                    return 0.5 - _easingsMath.c(x * _easingsMath.p) / 2;\r\n                },\r\n                linear: function (x, t, b, c, d) {\r\n                    return x;\r\n                },\r\n                easeInQuad: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t + b;\r\n                },\r\n                easeOutQuad: function (x, t, b, c, d) {\r\n                    return -c * (t /= d) * (t - 2) + b;\r\n                },\r\n                easeInOutQuad: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t + b : -c / 2 * ((--t) * (t - 2) - 1) + b;\r\n                },\r\n                easeInCubic: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t * t + b;\r\n                },\r\n                easeOutCubic: function (x, t, b, c, d) {\r\n                    return c * ((t = t / d - 1) * t * t + 1) + b;\r\n                },\r\n                easeInOutCubic: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;\r\n                },\r\n                easeInQuart: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t * t * t + b;\r\n                },\r\n                easeOutQuart: function (x, t, b, c, d) {\r\n                    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n                },\r\n                easeInOutQuart: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t * t * t + b : -c / 2 * ((t -= 2) * t * t * t - 2) + b;\r\n                },\r\n                easeInQuint: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t * t * t * t + b;\r\n                },\r\n                easeOutQuint: function (x, t, b, c, d) {\r\n                    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n                },\r\n                easeInOutQuint: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t * t * t * t + b : c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\r\n                },\r\n                easeInSine: function (x, t, b, c, d) {\r\n                    return -c * _easingsMath.c(t / d * (_easingsMath.p / 2)) + c + b;\r\n                },\r\n                easeOutSine: function (x, t, b, c, d) {\r\n                    return c * _easingsMath.s(t / d * (_easingsMath.p / 2)) + b;\r\n                },\r\n                easeInOutSine: function (x, t, b, c, d) {\r\n                    return -c / 2 * (_easingsMath.c(_easingsMath.p * t / d) - 1) + b;\r\n                },\r\n                easeInExpo: function (x, t, b, c, d) {\r\n                    return (t == 0) ? b : c * _easingsMath.w(2, 10 * (t / d - 1)) + b;\r\n                },\r\n                easeOutExpo: function (x, t, b, c, d) {\r\n                    return (t == d) ? b + c : c * (-_easingsMath.w(2, -10 * t / d) + 1) + b;\r\n                },\r\n                easeInOutExpo: function (x, t, b, c, d) {\r\n                    if (t == 0) return b;\r\n                    if (t == d) return b + c;\r\n                    if ((t /= d / 2) < 1) return c / 2 * _easingsMath.w(2, 10 * (t - 1)) + b;\r\n                    return c / 2 * (-_easingsMath.w(2, -10 * --t) + 2) + b;\r\n                },\r\n                easeInCirc: function (x, t, b, c, d) {\r\n                    return -c * (_easingsMath.t(1 - (t /= d) * t) - 1) + b;\r\n                },\r\n                easeOutCirc: function (x, t, b, c, d) {\r\n                    return c * _easingsMath.t(1 - (t = t / d - 1) * t) + b;\r\n                },\r\n                easeInOutCirc: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? -c / 2 * (_easingsMath.t(1 - t * t) - 1) + b : c / 2 * (_easingsMath.t(1 - (t -= 2) * t) + 1) + b;\r\n                },\r\n                easeInElastic: function (x, t, b, c, d) {\r\n                    var s = _easingsMath.o; var p = 0; var a = c;\r\n                    if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;\r\n                    if (a < _easingsMath.a(c)) { a = c; s = p / 4; }\r\n                    else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\r\n                    return -(a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\r\n                },\r\n                easeOutElastic: function (x, t, b, c, d) {\r\n                    var s = _easingsMath.o; var p = 0; var a = c;\r\n                    if (t == 0) return b;\r\n                    if ((t /= d) == 1) return b + c;\r\n                    if (!p) p = d * .3;\r\n                    if (a < _easingsMath.a(c)) { a = c; s = p / 4; }\r\n                    else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\r\n                    return a * _easingsMath.w(2, -10 * t) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) + c + b;\r\n                },\r\n                easeInOutElastic: function (x, t, b, c, d) {\r\n                    var s = _easingsMath.o; var p = 0; var a = c;\r\n                    if (t == 0) return b;\r\n                    if ((t /= d / 2) == 2) return b + c;\r\n                    if (!p) p = d * (.3 * 1.5);\r\n                    if (a < _easingsMath.a(c)) { a = c; s = p / 4; }\r\n                    else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\r\n                    if (t < 1) return -.5 * (a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\r\n                    return a * _easingsMath.w(2, -10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) * .5 + c + b;\r\n                },\r\n                easeInBack: function (x, t, b, c, d, s) {\r\n                    s = s || _easingsMath.o;\r\n                    return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n                },\r\n                easeOutBack: function (x, t, b, c, d, s) {\r\n                    s = s || _easingsMath.o;\r\n                    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n                },\r\n                easeInOutBack: function (x, t, b, c, d, s) {\r\n                    s = s || _easingsMath.o;\r\n                    return ((t /= d / 2) < 1) ? c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b : c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n                },\r\n                easeInBounce: function (x, t, b, c, d) {\r\n                    return c - this.easeOutBounce(x, d - t, 0, c, d) + b;\r\n                },\r\n                easeOutBounce: function (x, t, b, c, d) {\r\n                    var o = 7.5625;\r\n                    if ((t /= d) < (1 / 2.75)) {\r\n                        return c * (o * t * t) + b;\r\n                    } else if (t < (2 / 2.75)) {\r\n                        return c * (o * (t -= (1.5 / 2.75)) * t + .75) + b;\r\n                    } else if (t < (2.5 / 2.75)) {\r\n                        return c * (o * (t -= (2.25 / 2.75)) * t + .9375) + b;\r\n                    } else {\r\n                        return c * (o * (t -= (2.625 / 2.75)) * t + .984375) + b;\r\n                    }\r\n                },\r\n                easeInOutBounce: function (x, t, b, c, d) {\r\n                    return (t < d / 2) ? this.easeInBounce(x, t * 2, 0, c, d) * .5 + b : this.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;\r\n                }\r\n            };\r\n            /*\r\n             *\r\n             * TERMS OF USE - EASING EQUATIONS\r\n             *\r\n             * Open source under the BSD License.\r\n             *\r\n             * Copyright Â© 2001 Robert Penner\r\n             * All rights reserved.\r\n             *\r\n             * Redistribution and use in source and binary forms, with or without modification,\r\n             * are permitted provided that the following conditions are met:\r\n             *\r\n             * Redistributions of source code must retain the above copyright notice, this list of\r\n             * conditions and the following disclaimer.\r\n             * Redistributions in binary form must reproduce the above copyright notice, this list\r\n             * of conditions and the following disclaimer in the documentation and/or other materials\r\n             * provided with the distribution.\r\n             *\r\n             * Neither the name of the author nor the names of contributors may be used to endorse\r\n             * or promote products derived from this software without specific prior written permission.\r\n             *\r\n             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n             * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n             * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n             *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n             *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\r\n             *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\r\n             * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n             *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\r\n             * OF THE POSSIBILITY OF SUCH DAMAGE.\r\n             *\r\n             */\r\n        })();\r\n        var FRAMEWORK = (function () {\r\n            var _rnothtmlwhite = (/[^\\x20\\t\\r\\n\\f]+/g);\r\n            var _strSpace = ' ';\r\n            var _strEmpty = '';\r\n            var _strScrollLeft = 'scrollLeft';\r\n            var _strScrollTop = 'scrollTop';\r\n            var _animations = [];\r\n            var _type = COMPATIBILITY.type;\r\n            var _cssNumber = {\r\n                animationIterationCount: true,\r\n                columnCount: true,\r\n                fillOpacity: true,\r\n                flexGrow: true,\r\n                flexShrink: true,\r\n                fontWeight: true,\r\n                lineHeight: true,\r\n                opacity: true,\r\n                order: true,\r\n                orphans: true,\r\n                widows: true,\r\n                zIndex: true,\r\n                zoom: true\r\n            };\r\n\r\n            function extend() {\r\n                var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {},\r\n                    i = 1,\r\n                    length = arguments[LEXICON.l],\r\n                    deep = false;\r\n\r\n                // Handle a deep copy situation\r\n                if (_type(target) == TYPES.b) {\r\n                    deep = target;\r\n                    target = arguments[1] || {};\r\n                    // skip the boolean and the target\r\n                    i = 2;\r\n                }\r\n\r\n                // Handle case when target is a string or something (possible in deep copy)\r\n                if (_type(target) != TYPES.o && !_type(target) == TYPES.f) {\r\n                    target = {};\r\n                }\r\n\r\n                // extend jQuery itself if only one argument is passed\r\n                if (length === i) {\r\n                    target = FakejQuery;\r\n                    --i;\r\n                }\r\n\r\n                for (; i < length; i++) {\r\n                    // Only deal with non-null/undefined values\r\n                    if ((options = arguments[i]) != null) {\r\n                        // Extend the base object\r\n                        for (name in options) {\r\n                            src = target[name];\r\n                            copy = options[name];\r\n\r\n                            // Prevent never-ending loop\r\n                            if (target === copy) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Recurse if we're merging plain objects or arrays\r\n                            if (deep && copy && (isPlainObject(copy) || (copyIsArray = COMPATIBILITY.isA(copy)))) {\r\n                                if (copyIsArray) {\r\n                                    copyIsArray = false;\r\n                                    clone = src && COMPATIBILITY.isA(src) ? src : [];\r\n\r\n                                } else {\r\n                                    clone = src && isPlainObject(src) ? src : {};\r\n                                }\r\n\r\n                                // Never move original objects, clone them\r\n                                target[name] = extend(deep, clone, copy);\r\n\r\n                                // Don't bring in undefined values\r\n                            } else if (copy !== undefined) {\r\n                                target[name] = copy;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Return the modified object\r\n                return target;\r\n            };\r\n\r\n            function inArray(item, arr, fromIndex) {\r\n                for (var i = fromIndex || 0; i < arr[LEXICON.l]; i++)\r\n                    if (arr[i] === item)\r\n                        return i;\r\n                return -1;\r\n            }\r\n\r\n            function isFunction(obj) {\r\n                return _type(obj) == TYPES.f;\r\n            };\r\n\r\n            function isEmptyObject(obj) {\r\n                for (var name in obj)\r\n                    return false;\r\n                return true;\r\n            };\r\n\r\n            function isPlainObject(obj) {\r\n                if (!obj || _type(obj) != TYPES.o)\r\n                    return false;\r\n\r\n                var key;\r\n                var proto = LEXICON.p;\r\n                var hasOwnProperty = Object[proto].hasOwnProperty;\r\n                var hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\r\n                var hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\r\n\r\n                if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n                    return false;\r\n                }\r\n\r\n\r\n                for (key in obj) { /**/ }\r\n\r\n                return _type(key) == TYPES.u || hasOwnProperty.call(obj, key);\r\n            };\r\n\r\n            function each(obj, callback) {\r\n                var i = 0;\r\n\r\n                if (isArrayLike(obj)) {\r\n                    for (; i < obj[LEXICON.l]; i++) {\r\n                        if (callback.call(obj[i], i, obj[i]) === false)\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    for (i in obj) {\r\n                        if (callback.call(obj[i], i, obj[i]) === false)\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                return obj;\r\n            };\r\n\r\n            function isArrayLike(obj) {\r\n                var length = !!obj && [LEXICON.l] in obj && obj[LEXICON.l];\r\n                var t = _type(obj);\r\n                return isFunction(t) ? false : (t == TYPES.a || length === 0 || _type(length) == TYPES.n && length > 0 && (length - 1) in obj);\r\n            }\r\n\r\n            function stripAndCollapse(value) {\r\n                var tokens = value.match(_rnothtmlwhite) || [];\r\n                return tokens.join(_strSpace);\r\n            }\r\n\r\n            function matches(elem, selector) {\r\n                var nodeList = (elem.parentNode || document).querySelectorAll(selector) || [];\r\n                var i = nodeList[LEXICON.l];\r\n\r\n                while (i--)\r\n                    if (nodeList[i] == elem)\r\n                        return true;\r\n\r\n                return false;\r\n            }\r\n\r\n            function insertAdjacentElement(el, strategy, child) {\r\n                if (COMPATIBILITY.isA(child)) {\r\n                    for (var i = 0; i < child[LEXICON.l]; i++)\r\n                        insertAdjacentElement(el, strategy, child[i]);\r\n                }\r\n                else if (_type(child) == TYPES.s)\r\n                    el.insertAdjacentHTML(strategy, child);\r\n                else\r\n                    el.insertAdjacentElement(strategy, child.nodeType ? child : child[0]);\r\n            }\r\n\r\n            function setCSSVal(el, prop, val) {\r\n                try {\r\n                    if (el[LEXICON.s][prop] !== undefined)\r\n                        el[LEXICON.s][prop] = parseCSSVal(prop, val);\r\n                } catch (e) { }\r\n            }\r\n\r\n            function parseCSSVal(prop, val) {\r\n                if (!_cssNumber[prop.toLowerCase()] && _type(val) == TYPES.n)\r\n                    val += 'px';\r\n                return val;\r\n            }\r\n\r\n            function startNextAnimationInQ(animObj, removeFromQ) {\r\n                var index;\r\n                var nextAnim;\r\n                if (removeFromQ !== false)\r\n                    animObj.q.splice(0, 1);\r\n                if (animObj.q[LEXICON.l] > 0) {\r\n                    nextAnim = animObj.q[0];\r\n                    animate(animObj.el, nextAnim.props, nextAnim.duration, nextAnim.easing, nextAnim.complete, true);\r\n                }\r\n                else {\r\n                    index = inArray(animObj, _animations);\r\n                    if (index > -1)\r\n                        _animations.splice(index, 1);\r\n                }\r\n            }\r\n\r\n            function setAnimationValue(el, prop, value) {\r\n                if (prop === _strScrollLeft || prop === _strScrollTop)\r\n                    el[prop] = value;\r\n                else\r\n                    setCSSVal(el, prop, value);\r\n            }\r\n\r\n            function animate(el, props, options, easing, complete, guaranteedNext) {\r\n                var hasOptions = isPlainObject(options);\r\n                var from = {};\r\n                var to = {};\r\n                var i = 0;\r\n                var key;\r\n                var animObj;\r\n                var start;\r\n                var progress;\r\n                var step;\r\n                var specialEasing;\r\n                var duration;\r\n                if (hasOptions) {\r\n                    easing = options.easing;\r\n                    start = options.start;\r\n                    progress = options.progress;\r\n                    step = options.step;\r\n                    specialEasing = options.specialEasing;\r\n                    complete = options.complete;\r\n                    duration = options.duration;\r\n                }\r\n                else\r\n                    duration = options;\r\n                specialEasing = specialEasing || {};\r\n                duration = duration || 400;\r\n                easing = easing || 'swing';\r\n                guaranteedNext = guaranteedNext || false;\r\n\r\n                for (; i < _animations[LEXICON.l]; i++) {\r\n                    if (_animations[i].el === el) {\r\n                        animObj = _animations[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!animObj) {\r\n                    animObj = {\r\n                        el: el,\r\n                        q: []\r\n                    };\r\n                    _animations.push(animObj);\r\n                }\r\n\r\n                for (key in props) {\r\n                    if (key === _strScrollLeft || key === _strScrollTop)\r\n                        from[key] = el[key];\r\n                    else\r\n                        from[key] = FakejQuery(el).css(key);\r\n                }\r\n\r\n                for (key in from) {\r\n                    if (from[key] !== props[key] && props[key] !== undefined)\r\n                        to[key] = props[key];\r\n                }\r\n\r\n                if (!isEmptyObject(to)) {\r\n                    var timeNow;\r\n                    var end;\r\n                    var percent;\r\n                    var fromVal;\r\n                    var toVal;\r\n                    var easedVal;\r\n                    var timeStart;\r\n                    var frame;\r\n                    var elapsed;\r\n                    var qPos = guaranteedNext ? 0 : inArray(qObj, animObj.q);\r\n                    var qObj = {\r\n                        props: to,\r\n                        duration: hasOptions ? options : duration,\r\n                        easing: easing,\r\n                        complete: complete\r\n                    };\r\n                    if (qPos === -1) {\r\n                        qPos = animObj.q[LEXICON.l];\r\n                        animObj.q.push(qObj);\r\n                    }\r\n\r\n                    if (qPos === 0) {\r\n                        if (duration > 0) {\r\n                            timeStart = COMPATIBILITY.now();\r\n                            frame = function () {\r\n                                timeNow = COMPATIBILITY.now();\r\n                                elapsed = (timeNow - timeStart);\r\n                                end = qObj.stop || elapsed >= duration;\r\n                                percent = 1 - ((MATH.max(0, timeStart + duration - timeNow) / duration) || 0);\r\n\r\n                                for (key in to) {\r\n                                    fromVal = parseFloat(from[key]);\r\n                                    toVal = parseFloat(to[key]);\r\n                                    easedVal = (toVal - fromVal) * EASING[specialEasing[key] || easing](percent, percent * duration, 0, 1, duration) + fromVal;\r\n                                    setAnimationValue(el, key, easedVal);\r\n                                    if (isFunction(step)) {\r\n                                        step(easedVal, {\r\n                                            elem: el,\r\n                                            prop: key,\r\n                                            start: fromVal,\r\n                                            now: easedVal,\r\n                                            end: toVal,\r\n                                            pos: percent,\r\n                                            options: {\r\n                                                easing: easing,\r\n                                                speacialEasing: specialEasing,\r\n                                                duration: duration,\r\n                                                complete: complete,\r\n                                                step: step\r\n                                            },\r\n                                            startTime: timeStart\r\n                                        });\r\n                                    }\r\n                                }\r\n\r\n                                if (isFunction(progress))\r\n                                    progress({}, percent, MATH.max(0, duration - elapsed));\r\n\r\n                                if (end) {\r\n                                    startNextAnimationInQ(animObj);\r\n                                    if (isFunction(complete))\r\n                                        complete();\r\n                                }\r\n                                else\r\n                                    qObj.frame = COMPATIBILITY.rAF()(frame);\r\n                            };\r\n                            qObj.frame = COMPATIBILITY.rAF()(frame);\r\n                        }\r\n                        else {\r\n                            for (key in to)\r\n                                setAnimationValue(el, key, to[key]);\r\n                            startNextAnimationInQ(animObj);\r\n                        }\r\n                    }\r\n                }\r\n                else if (guaranteedNext)\r\n                    startNextAnimationInQ(animObj);\r\n            }\r\n\r\n            function stop(el, clearQ, jumpToEnd) {\r\n                var animObj;\r\n                var qObj;\r\n                var key;\r\n                var i = 0;\r\n                for (; i < _animations[LEXICON.l]; i++) {\r\n                    animObj = _animations[i];\r\n                    if (animObj.el === el) {\r\n                        if (animObj.q[LEXICON.l] > 0) {\r\n                            qObj = animObj.q[0];\r\n                            qObj.stop = true;\r\n                            COMPATIBILITY.cAF()(qObj.frame);\r\n                            animObj.q.splice(0, 1);\r\n\r\n                            if (jumpToEnd)\r\n                                for (key in qObj.props)\r\n                                    setAnimationValue(el, key, qObj.props[key]);\r\n\r\n                            if (clearQ)\r\n                                animObj.q = [];\r\n                            else\r\n                                startNextAnimationInQ(animObj, false);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function elementIsVisible(el) {\r\n                return !!(el[LEXICON.oW] || el[LEXICON.oH] || el.getClientRects()[LEXICON.l]);\r\n            }\r\n\r\n            function FakejQuery(selector) {\r\n                if (arguments[LEXICON.l] === 0)\r\n                    return this;\r\n\r\n                var base = new FakejQuery();\r\n                var elements = selector;\r\n                var i = 0;\r\n                var elms;\r\n                var el;\r\n\r\n                if (_type(selector) == TYPES.s) {\r\n                    elements = [];\r\n                    if (selector.charAt(0) === '<') {\r\n                        el = document.createElement('div');\r\n                        el.innerHTML = selector;\r\n                        elms = el.children;\r\n                    }\r\n                    else {\r\n                        elms = document.querySelectorAll(selector);\r\n                    }\r\n\r\n                    for (; i < elms[LEXICON.l]; i++)\r\n                        elements.push(elms[i]);\r\n                }\r\n\r\n                if (elements) {\r\n                    if (_type(elements) != TYPES.s && (!isArrayLike(elements) || elements === window || elements === elements.self))\r\n                        elements = [elements];\r\n\r\n                    for (i = 0; i < elements[LEXICON.l]; i++)\r\n                        base[i] = elements[i];\r\n\r\n                    base[LEXICON.l] = elements[LEXICON.l];\r\n                }\r\n\r\n                return base;\r\n            };\r\n\r\n            FakejQuery[LEXICON.p] = {\r\n\r\n                //EVENTS:\r\n\r\n                on: function (eventName, handler) {\r\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\r\n\r\n                    var eventNameLength = eventName[LEXICON.l];\r\n                    var i = 0;\r\n                    var el;\r\n                    return this.each(function () {\r\n                        el = this;\r\n                        try {\r\n                            if (el.addEventListener) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.addEventListener(eventName[i], handler);\r\n                            }\r\n                            else if (el.detachEvent) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.attachEvent('on' + eventName[i], handler);\r\n                            }\r\n                        } catch (e) { }\r\n                    });\r\n                },\r\n\r\n                off: function (eventName, handler) {\r\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\r\n\r\n                    var eventNameLength = eventName[LEXICON.l];\r\n                    var i = 0;\r\n                    var el;\r\n                    return this.each(function () {\r\n                        el = this;\r\n                        try {\r\n                            if (el.removeEventListener) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.removeEventListener(eventName[i], handler);\r\n                            }\r\n                            else if (el.detachEvent) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.detachEvent('on' + eventName[i], handler);\r\n                            }\r\n                        } catch (e) { }\r\n                    });\r\n                },\r\n\r\n                one: function (eventName, handler) {\r\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\r\n                    return this.each(function () {\r\n                        var el = FakejQuery(this);\r\n                        FakejQuery.each(eventName, function (i, oneEventName) {\r\n                            var oneHandler = function (e) {\r\n                                handler.call(this, e);\r\n                                el.off(oneEventName, oneHandler);\r\n                            };\r\n                            el.on(oneEventName, oneHandler);\r\n                        });\r\n                    });\r\n                },\r\n\r\n                trigger: function (eventName) {\r\n                    var el;\r\n                    var event;\r\n                    return this.each(function () {\r\n                        el = this;\r\n                        if (document.createEvent) {\r\n                            event = document.createEvent('HTMLEvents');\r\n                            event.initEvent(eventName, true, false);\r\n                            el.dispatchEvent(event);\r\n                        }\r\n                        else {\r\n                            el.fireEvent('on' + eventName);\r\n                        }\r\n                    });\r\n                },\r\n\r\n                //DOM NODE INSERTING / REMOVING:\r\n\r\n                append: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'beforeend', child); });\r\n                },\r\n\r\n                prepend: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'afterbegin', child); });\r\n                },\r\n\r\n                before: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'beforebegin', child); });\r\n                },\r\n\r\n                after: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'afterend', child); });\r\n                },\r\n\r\n                remove: function () {\r\n                    return this.each(function () {\r\n                        var el = this;\r\n                        var parentNode = el.parentNode;\r\n                        if (parentNode != null)\r\n                            parentNode.removeChild(el);\r\n                    });\r\n                },\r\n\r\n                unwrap: function () {\r\n                    var parents = [];\r\n                    var i;\r\n                    var el;\r\n                    var parent;\r\n\r\n                    this.each(function () {\r\n                        parent = this.parentNode;\r\n                        if (inArray(parent, parents) === - 1)\r\n                            parents.push(parent);\r\n                    });\r\n\r\n                    for (i = 0; i < parents[LEXICON.l]; i++) {\r\n                        el = parents[i];\r\n                        parent = el.parentNode;\r\n                        while (el.firstChild)\r\n                            parent.insertBefore(el.firstChild, el);\r\n                        parent.removeChild(el);\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                wrapAll: function (wrapperHTML) {\r\n                    var i;\r\n                    var nodes = this;\r\n                    var wrapper = FakejQuery(wrapperHTML)[0];\r\n                    var deepest = wrapper;\r\n                    var parent = nodes[0].parentNode;\r\n                    var previousSibling = nodes[0].previousSibling;\r\n                    while (deepest.childNodes[LEXICON.l] > 0)\r\n                        deepest = deepest.childNodes[0];\r\n\r\n                    for (i = 0; nodes[LEXICON.l] - i; deepest.firstChild === nodes[0] && i++)\r\n                        deepest.appendChild(nodes[i]);\r\n\r\n                    var nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\r\n                    parent.insertBefore(wrapper, nextSibling);\r\n\r\n                    return this;\r\n                },\r\n\r\n                wrapInner: function (wrapperHTML) {\r\n                    return this.each(function () {\r\n                        var el = FakejQuery(this);\r\n                        var contents = el.contents();\r\n\r\n                        if (contents[LEXICON.l])\r\n                            contents.wrapAll(wrapperHTML);\r\n                        else\r\n                            el.append(wrapperHTML);\r\n                    });\r\n                },\r\n\r\n                wrap: function (wrapperHTML) {\r\n                    return this.each(function () { FakejQuery(this).wrapAll(wrapperHTML); });\r\n                },\r\n\r\n\r\n                //DOM NODE MANIPULATION / INFORMATION:\r\n\r\n                css: function (styles, val) {\r\n                    var el;\r\n                    var key;\r\n                    var cptStyle;\r\n                    var getCptStyle = window.getComputedStyle;\r\n                    if (_type(styles) == TYPES.s) {\r\n                        if (val === undefined) {\r\n                            el = this[0];\r\n                            cptStyle = getCptStyle ? getCptStyle(el, null) : el.currentStyle[styles];\r\n\r\n                            //https://bugzilla.mozilla.org/show_bug.cgi?id=548397 can be null sometimes if iframe with display: none (firefox only!)\r\n                            return getCptStyle ? cptStyle != null ? cptStyle.getPropertyValue(styles) : el[LEXICON.s][styles] : cptStyle;\r\n                        }\r\n                        else {\r\n                            return this.each(function () {\r\n                                setCSSVal(this, styles, val);\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        return this.each(function () {\r\n                            for (key in styles)\r\n                                setCSSVal(this, key, styles[key]);\r\n                        });\r\n                    }\r\n                },\r\n\r\n                hasClass: function (className) {\r\n                    var elem, i = 0;\r\n                    var classNamePrepared = _strSpace + className + _strSpace;\r\n                    var classList;\r\n\r\n                    while ((elem = this[i++])) {\r\n                        classList = elem.classList;\r\n                        if (classList && classList.contains(className))\r\n                            return true;\r\n                        else if (elem.nodeType === 1 && (_strSpace + stripAndCollapse(elem.className + _strEmpty) + _strSpace).indexOf(classNamePrepared) > -1)\r\n                            return true;\r\n                    }\r\n\r\n                    return false;\r\n                },\r\n\r\n                addClass: function (className) {\r\n                    var classes;\r\n                    var elem;\r\n                    var cur;\r\n                    var curValue;\r\n                    var clazz;\r\n                    var finalValue;\r\n                    var supportClassList;\r\n                    var elmClassList;\r\n                    var i = 0;\r\n                    var v = 0;\r\n\r\n                    if (className) {\r\n                        classes = className.match(_rnothtmlwhite) || [];\r\n\r\n                        while ((elem = this[i++])) {\r\n                            elmClassList = elem.classList;\r\n                            if (supportClassList === undefined)\r\n                                supportClassList = elmClassList !== undefined;\r\n\r\n                            if (supportClassList) {\r\n                                while ((clazz = classes[v++]))\r\n                                    elmClassList.add(clazz);\r\n                            }\r\n                            else {\r\n                                curValue = elem.className + _strEmpty;\r\n                                cur = elem.nodeType === 1 && (_strSpace + stripAndCollapse(curValue) + _strSpace);\r\n\r\n                                if (cur) {\r\n                                    while ((clazz = classes[v++]))\r\n                                        if (cur.indexOf(_strSpace + clazz + _strSpace) < 0)\r\n                                            cur += clazz + _strSpace;\r\n\r\n                                    finalValue = stripAndCollapse(cur);\r\n                                    if (curValue !== finalValue)\r\n                                        elem.className = finalValue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                removeClass: function (className) {\r\n                    var classes;\r\n                    var elem;\r\n                    var cur;\r\n                    var curValue;\r\n                    var clazz;\r\n                    var finalValue;\r\n                    var supportClassList;\r\n                    var elmClassList;\r\n                    var i = 0;\r\n                    var v = 0;\r\n\r\n                    if (className) {\r\n                        classes = className.match(_rnothtmlwhite) || [];\r\n\r\n                        while ((elem = this[i++])) {\r\n                            elmClassList = elem.classList;\r\n                            if (supportClassList === undefined)\r\n                                supportClassList = elmClassList !== undefined;\r\n\r\n                            if (supportClassList) {\r\n                                while ((clazz = classes[v++]))\r\n                                    elmClassList.remove(clazz);\r\n                            }\r\n                            else {\r\n                                curValue = elem.className + _strEmpty;\r\n                                cur = elem.nodeType === 1 && (_strSpace + stripAndCollapse(curValue) + _strSpace);\r\n\r\n                                if (cur) {\r\n                                    while ((clazz = classes[v++]))\r\n                                        while (cur.indexOf(_strSpace + clazz + _strSpace) > -1)\r\n                                            cur = cur.replace(_strSpace + clazz + _strSpace, _strSpace);\r\n\r\n                                    finalValue = stripAndCollapse(cur);\r\n                                    if (curValue !== finalValue)\r\n                                        elem.className = finalValue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                hide: function () {\r\n                    return this.each(function () { this[LEXICON.s].display = 'none'; });\r\n                },\r\n\r\n                show: function () {\r\n                    return this.each(function () { this[LEXICON.s].display = 'block'; });\r\n                },\r\n\r\n                attr: function (attrName, value) {\r\n                    var i = 0;\r\n                    var el;\r\n                    while (el = this[i++]) {\r\n                        if (value === undefined)\r\n                            return el.getAttribute(attrName);\r\n                        el.setAttribute(attrName, value);\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                removeAttr: function (attrName) {\r\n                    return this.each(function () { this.removeAttribute(attrName); });\r\n                },\r\n\r\n                offset: function () {\r\n                    var el = this[0];\r\n                    var rect = el[LEXICON.bCR]();\r\n                    var scrollLeft = window.pageXOffset || document.documentElement[_strScrollLeft];\r\n                    var scrollTop = window.pageYOffset || document.documentElement[_strScrollTop];\r\n                    return {\r\n                        top: rect.top + scrollTop,\r\n                        left: rect.left + scrollLeft\r\n                    };\r\n                },\r\n\r\n                position: function () {\r\n                    var el = this[0];\r\n                    return {\r\n                        top: el.offsetTop,\r\n                        left: el.offsetLeft\r\n                    };\r\n                },\r\n\r\n                scrollLeft: function (value) {\r\n                    var i = 0;\r\n                    var el;\r\n                    while (el = this[i++]) {\r\n                        if (value === undefined)\r\n                            return el[_strScrollLeft];\r\n                        el[_strScrollLeft] = value;\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                scrollTop: function (value) {\r\n                    var i = 0;\r\n                    var el;\r\n                    while (el = this[i++]) {\r\n                        if (value === undefined)\r\n                            return el[_strScrollTop];\r\n                        el[_strScrollTop] = value;\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                val: function (value) {\r\n                    var el = this[0];\r\n                    if (!value)\r\n                        return el.value;\r\n                    el.value = value;\r\n                    return this;\r\n                },\r\n\r\n\r\n                //DOM TRAVERSAL / FILTERING:\r\n\r\n                first: function () {\r\n                    return this.eq(0);\r\n                },\r\n\r\n                last: function () {\r\n                    return this.eq(-1);\r\n                },\r\n\r\n                eq: function (index) {\r\n                    return FakejQuery(this[index >= 0 ? index : this[LEXICON.l] + index]);\r\n                },\r\n\r\n                find: function (selector) {\r\n                    var children = [];\r\n                    var i;\r\n                    this.each(function () {\r\n                        var el = this;\r\n                        var ch = el.querySelectorAll(selector);\r\n                        for (i = 0; i < ch[LEXICON.l]; i++)\r\n                            children.push(ch[i]);\r\n                    });\r\n                    return FakejQuery(children);\r\n                },\r\n\r\n                children: function (selector) {\r\n                    var children = [];\r\n                    var el;\r\n                    var ch;\r\n                    var i;\r\n\r\n                    this.each(function () {\r\n                        ch = this.children;\r\n                        for (i = 0; i < ch[LEXICON.l]; i++) {\r\n                            el = ch[i];\r\n                            if (selector) {\r\n                                if ((el.matches && el.matches(selector)) || matches(el, selector))\r\n                                    children.push(el);\r\n                            }\r\n                            else\r\n                                children.push(el);\r\n                        }\r\n                    });\r\n                    return FakejQuery(children);\r\n                },\r\n\r\n                parent: function (selector) {\r\n                    var parents = [];\r\n                    var parent;\r\n                    this.each(function () {\r\n                        parent = this.parentNode;\r\n                        if (selector ? FakejQuery(parent).is(selector) : true)\r\n                            parents.push(parent);\r\n                    });\r\n                    return FakejQuery(parents);\r\n                },\r\n\r\n                is: function (selector) {\r\n\r\n                    var el;\r\n                    var i;\r\n                    for (i = 0; i < this[LEXICON.l]; i++) {\r\n                        el = this[i];\r\n                        if (selector === ':visible')\r\n                            return elementIsVisible(el);\r\n                        if (selector === ':hidden')\r\n                            return !elementIsVisible(el);\r\n                        if ((el.matches && el.matches(selector)) || matches(el, selector))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n\r\n                contents: function () {\r\n                    var contents = [];\r\n                    var childs;\r\n                    var i;\r\n\r\n                    this.each(function () {\r\n                        childs = this.childNodes;\r\n                        for (i = 0; i < childs[LEXICON.l]; i++)\r\n                            contents.push(childs[i]);\r\n                    });\r\n\r\n                    return FakejQuery(contents);\r\n                },\r\n\r\n                each: function (callback) {\r\n                    return each(this, callback);\r\n                },\r\n\r\n\r\n                //ANIMATION:\r\n\r\n                animate: function (props, duration, easing, complete) {\r\n                    return this.each(function () { animate(this, props, duration, easing, complete); });\r\n                },\r\n\r\n                stop: function (clearQ, jump) {\r\n                    return this.each(function () { stop(this, clearQ, jump); });\r\n                }\r\n            };\r\n\r\n            extend(FakejQuery, {\r\n                extend: extend,\r\n                inArray: inArray,\r\n                isEmptyObject: isEmptyObject,\r\n                isPlainObject: isPlainObject,\r\n                each: each\r\n            });\r\n\r\n            return FakejQuery;\r\n        })();\r\n        var INSTANCES = (function () {\r\n            var _targets = [];\r\n            var _instancePropertyString = '__overlayScrollbars__';\r\n\r\n            /**\r\n             * Register, unregister or get a certain (or all) instances.\r\n             * Register: Pass the target and the instance.\r\n             * Unregister: Pass the target and null.\r\n             * Get Instance: Pass the target from which the instance shall be got.\r\n             * Get Targets: Pass no arguments.\r\n             * @param target The target to which the instance shall be registered / from which the instance shall be unregistered / the instance shall be got\r\n             * @param instance The instance.\r\n             * @returns {*|void} Returns the instance from the given target.\r\n             */\r\n            return function (target, instance) {\r\n                var argLen = arguments[LEXICON.l];\r\n                if (argLen < 1) {\r\n                    //return all targets\r\n                    return _targets;\r\n                }\r\n                else {\r\n                    if (instance) {\r\n                        //register instance\r\n                        target[_instancePropertyString] = instance;\r\n                        _targets.push(target);\r\n                    }\r\n                    else {\r\n                        var index = COMPATIBILITY.inA(target, _targets);\r\n                        if (index > -1) {\r\n                            if (argLen > 1) {\r\n                                //unregister instance\r\n                                delete target[_instancePropertyString];\r\n                                _targets.splice(index, 1);\r\n                            }\r\n                            else {\r\n                                //get instance from target\r\n                                return _targets[index][_instancePropertyString];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })();\r\n        var PLUGIN = (function () {\r\n            var _plugin;\r\n            var _pluginsGlobals;\r\n            var _pluginsAutoUpdateLoop;\r\n            var _pluginsExtensions = [];\r\n            var _pluginsOptions = (function () {\r\n                var type = COMPATIBILITY.type;\r\n                var possibleTemplateTypes = [\r\n                    TYPES.b, //boolean\r\n                    TYPES.n, //number\r\n                    TYPES.s, //string\r\n                    TYPES.a, //array\r\n                    TYPES.o, //object\r\n                    TYPES.f, //function\r\n                    TYPES.z  //null\r\n                ];\r\n                var restrictedStringsSplit = ' ';\r\n                var restrictedStringsPossibilitiesSplit = ':';\r\n                var classNameAllowedValues = [TYPES.z, TYPES.s];\r\n                var numberAllowedValues = TYPES.n;\r\n                var booleanNullAllowedValues = [TYPES.z, TYPES.b];\r\n                var booleanTrueTemplate = [true, TYPES.b];\r\n                var booleanFalseTemplate = [false, TYPES.b];\r\n                var callbackTemplate = [null, [TYPES.z, TYPES.f]];\r\n                var updateOnLoadTemplate = [['img'], [TYPES.s, TYPES.a, TYPES.z]];\r\n                var inheritedAttrsTemplate = [['style', 'class'], [TYPES.s, TYPES.a, TYPES.z]];\r\n                var resizeAllowedValues = 'n:none b:both h:horizontal v:vertical';\r\n                var overflowBehaviorAllowedValues = 'v-h:visible-hidden v-s:visible-scroll s:scroll h:hidden';\r\n                var scrollbarsVisibilityAllowedValues = 'v:visible h:hidden a:auto';\r\n                var scrollbarsAutoHideAllowedValues = 'n:never s:scroll l:leave m:move';\r\n                var optionsDefaultsAndTemplate = {\r\n                    className: ['os-theme-dark', classNameAllowedValues],                //null || string\r\n                    resize: ['none', resizeAllowedValues],                               //none || both  || horizontal || vertical || n || b || h || v\r\n                    sizeAutoCapable: booleanTrueTemplate,                                //true || false\r\n                    clipAlways: booleanTrueTemplate,                                     //true || false\r\n                    normalizeRTL: booleanTrueTemplate,                                   //true || false\r\n                    paddingAbsolute: booleanFalseTemplate,                               //true || false\r\n                    autoUpdate: [null, booleanNullAllowedValues],                        //true || false || null\r\n                    autoUpdateInterval: [33, numberAllowedValues],                       //number\r\n                    updateOnLoad: updateOnLoadTemplate,                                  //string || array || null\r\n                    nativeScrollbarsOverlaid: {\r\n                        showNativeScrollbars: booleanFalseTemplate,                      //true || false\r\n                        initialize: booleanTrueTemplate                                  //true || false\r\n                    },\r\n                    overflowBehavior: {\r\n                        x: ['scroll', overflowBehaviorAllowedValues],                    //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n                        y: ['scroll', overflowBehaviorAllowedValues]                     //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n                    },\r\n                    scrollbars: {\r\n                        visibility: ['auto', scrollbarsVisibilityAllowedValues],         //visible || hidden || auto || v || h || a\r\n                        autoHide: ['never', scrollbarsAutoHideAllowedValues],            //never || scroll || leave || move || n || s || l || m\r\n                        autoHideDelay: [800, numberAllowedValues],                       //number\r\n                        dragScrolling: booleanTrueTemplate,                              //true || false\r\n                        clickScrolling: booleanFalseTemplate,                            //true || false\r\n                        touchSupport: booleanTrueTemplate,                               //true || false\r\n                        snapHandle: booleanFalseTemplate                                 //true || false\r\n                    },\r\n                    textarea: {\r\n                        dynWidth: booleanFalseTemplate,                                  //true || false\r\n                        dynHeight: booleanFalseTemplate,                                 //true || false\r\n                        inheritedAttrs: inheritedAttrsTemplate                           //string || array || null\r\n                    },\r\n                    callbacks: {\r\n                        onInitialized: callbackTemplate,                                 //null || function\r\n                        onInitializationWithdrawn: callbackTemplate,                     //null || function\r\n                        onDestroyed: callbackTemplate,                                   //null || function\r\n                        onScrollStart: callbackTemplate,                                 //null || function\r\n                        onScroll: callbackTemplate,                                      //null || function\r\n                        onScrollStop: callbackTemplate,                                  //null || function\r\n                        onOverflowChanged: callbackTemplate,                             //null || function\r\n                        onOverflowAmountChanged: callbackTemplate,                       //null || function\r\n                        onDirectionChanged: callbackTemplate,                            //null || function\r\n                        onContentSizeChanged: callbackTemplate,                          //null || function\r\n                        onHostSizeChanged: callbackTemplate,                             //null || function\r\n                        onUpdated: callbackTemplate                                      //null || function\r\n                    }\r\n                };\r\n                var convert = function (template) {\r\n                    var recursive = function (obj) {\r\n                        var key;\r\n                        var val;\r\n                        var valType;\r\n                        for (key in obj) {\r\n                            if (!obj[LEXICON.hOP](key))\r\n                                continue;\r\n                            val = obj[key];\r\n                            valType = type(val);\r\n                            if (valType == TYPES.a)\r\n                                obj[key] = val[template ? 1 : 0];\r\n                            else if (valType == TYPES.o)\r\n                                obj[key] = recursive(val);\r\n                        }\r\n                        return obj;\r\n                    };\r\n                    return recursive(FRAMEWORK.extend(true, {}, optionsDefaultsAndTemplate));\r\n                };\r\n\r\n                return {\r\n                    _defaults: convert(),\r\n\r\n                    _template: convert(true),\r\n\r\n                    /**\r\n                     * Validates the passed object by the passed template.\r\n                     * @param obj The object which shall be validated.\r\n                     * @param template The template which defines the allowed values and types.\r\n                     * @param writeErrors True if errors shall be logged to the console.\r\n                     * @param diffObj If a object is passed then only valid differences to this object will be returned.\r\n                     * @returns {{}} A object which contains two objects called \"default\" and \"prepared\" which contains only the valid properties of the passed original object and discards not different values compared to the passed diffObj.\r\n                     */\r\n                    _validate: function (obj, template, writeErrors, diffObj) {\r\n                        var validatedOptions = {};\r\n                        var validatedOptionsPrepared = {};\r\n                        var objectCopy = FRAMEWORK.extend(true, {}, obj);\r\n                        var inArray = FRAMEWORK.inArray;\r\n                        var isEmptyObj = FRAMEWORK.isEmptyObject;\r\n                        var checkObjectProps = function (data, template, diffData, validatedOptions, validatedOptionsPrepared, prevPropName) {\r\n                            for (var prop in template) {\r\n                                if (template[LEXICON.hOP](prop) && data[LEXICON.hOP](prop)) {\r\n                                    var isValid = false;\r\n                                    var isDiff = false;\r\n                                    var templateValue = template[prop];\r\n                                    var templateValueType = type(templateValue);\r\n                                    var templateIsComplex = templateValueType == TYPES.o;\r\n                                    var templateTypes = !COMPATIBILITY.isA(templateValue) ? [templateValue] : templateValue;\r\n                                    var dataDiffValue = diffData[prop];\r\n                                    var dataValue = data[prop];\r\n                                    var dataValueType = type(dataValue);\r\n                                    var propPrefix = prevPropName ? prevPropName + '.' : '';\r\n                                    var error = \"The option \\\"\" + propPrefix + prop + \"\\\" wasn't set, because\";\r\n                                    var errorPossibleTypes = [];\r\n                                    var errorRestrictedStrings = [];\r\n                                    var restrictedStringValuesSplit;\r\n                                    var restrictedStringValuesPossibilitiesSplit;\r\n                                    var isRestrictedValue;\r\n                                    var mainPossibility;\r\n                                    var currType;\r\n                                    var i;\r\n                                    var v;\r\n                                    var j;\r\n\r\n                                    dataDiffValue = dataDiffValue === undefined ? {} : dataDiffValue;\r\n\r\n                                    //if the template has a object as value, it means that the options are complex (verschachtelt)\r\n                                    if (templateIsComplex && dataValueType == TYPES.o) {\r\n                                        validatedOptions[prop] = {};\r\n                                        validatedOptionsPrepared[prop] = {};\r\n                                        checkObjectProps(dataValue, templateValue, dataDiffValue, validatedOptions[prop], validatedOptionsPrepared[prop], propPrefix + prop);\r\n                                        FRAMEWORK.each([data, validatedOptions, validatedOptionsPrepared], function (index, value) {\r\n                                            if (isEmptyObj(value[prop])) {\r\n                                                delete value[prop];\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else if (!templateIsComplex) {\r\n                                        for (i = 0; i < templateTypes[LEXICON.l]; i++) {\r\n                                            currType = templateTypes[i];\r\n                                            templateValueType = type(currType);\r\n                                            //if currtype is string and starts with restrictedStringPrefix and end with restrictedStringSuffix\r\n                                            isRestrictedValue = templateValueType == TYPES.s && inArray(currType, possibleTemplateTypes) === -1;\r\n                                            if (isRestrictedValue) {\r\n                                                errorPossibleTypes.push(TYPES.s);\r\n\r\n                                                //split it into a array which contains all possible values for example: [\"y:yes\", \"n:no\", \"m:maybe\"]\r\n                                                restrictedStringValuesSplit = currType.split(restrictedStringsSplit);\r\n                                                errorRestrictedStrings = errorRestrictedStrings.concat(restrictedStringValuesSplit);\r\n                                                for (v = 0; v < restrictedStringValuesSplit[LEXICON.l]; v++) {\r\n                                                    //split the possible values into their possibiliteis for example: [\"y\", \"yes\"] -> the first is always the mainPossibility\r\n                                                    restrictedStringValuesPossibilitiesSplit = restrictedStringValuesSplit[v].split(restrictedStringsPossibilitiesSplit);\r\n                                                    mainPossibility = restrictedStringValuesPossibilitiesSplit[0];\r\n                                                    for (j = 0; j < restrictedStringValuesPossibilitiesSplit[LEXICON.l]; j++) {\r\n                                                        //if any possibility matches with the dataValue, its valid\r\n                                                        if (dataValue === restrictedStringValuesPossibilitiesSplit[j]) {\r\n                                                            isValid = true;\r\n                                                            break;\r\n                                                        }\r\n                                                    }\r\n                                                    if (isValid)\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                errorPossibleTypes.push(currType);\r\n\r\n                                                if (dataValueType === currType) {\r\n                                                    isValid = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (isValid) {\r\n                                            isDiff = dataValue !== dataDiffValue;\r\n\r\n                                            if (isDiff)\r\n                                                validatedOptions[prop] = dataValue;\r\n\r\n                                            if (isRestrictedValue ? inArray(dataDiffValue, restrictedStringValuesPossibilitiesSplit) < 0 : isDiff)\r\n                                                validatedOptionsPrepared[prop] = isRestrictedValue ? mainPossibility : dataValue;\r\n                                        }\r\n                                        else if (writeErrors) {\r\n                                            console.warn(error + \" it doesn't accept the type [ \" + dataValueType.toUpperCase() + \" ] with the value of \\\"\" + dataValue + \"\\\".\\r\\n\" +\r\n                                                \"Accepted types are: [ \" + errorPossibleTypes.join(', ').toUpperCase() + \" ].\" +\r\n                                                (errorRestrictedStrings[length] > 0 ? \"\\r\\nValid strings are: [ \" + errorRestrictedStrings.join(', ').split(restrictedStringsPossibilitiesSplit).join(', ') + \" ].\" : ''));\r\n                                        }\r\n                                        delete data[prop];\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        checkObjectProps(objectCopy, template, diffObj || {}, validatedOptions, validatedOptionsPrepared);\r\n\r\n                        //add values which aren't specified in the template to the finished validated object to prevent them from being discarded\r\n                        /*\r\n                        if(keepForeignProps) {\r\n                            FRAMEWORK.extend(true, validatedOptions, objectCopy);\r\n                            FRAMEWORK.extend(true, validatedOptionsPrepared, objectCopy);\r\n                        }\r\n                        */\r\n\r\n                        if (!isEmptyObj(objectCopy) && writeErrors)\r\n                            console.warn('The following options are discarded due to invalidity:\\r\\n' + window.JSON.stringify(objectCopy, null, 2));\r\n\r\n                        return {\r\n                            _default: validatedOptions,\r\n                            _prepared: validatedOptionsPrepared\r\n                        };\r\n                    }\r\n                }\r\n            }());\r\n\r\n            /**\r\n             * Initializes the object which contains global information about the plugin and each instance of it.\r\n             */\r\n            function initOverlayScrollbarsStatics() {\r\n                if (!_pluginsGlobals)\r\n                    _pluginsGlobals = new OverlayScrollbarsGlobals(_pluginsOptions._defaults);\r\n                if (!_pluginsAutoUpdateLoop)\r\n                    _pluginsAutoUpdateLoop = new OverlayScrollbarsAutoUpdateLoop(_pluginsGlobals);\r\n            }\r\n\r\n            /**\r\n             * The global object for the OverlayScrollbars objects. It contains resources which every OverlayScrollbars object needs. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n             * @param defaultOptions\r\n             * @constructor\r\n             */\r\n            function OverlayScrollbarsGlobals(defaultOptions) {\r\n                var _base = this;\r\n                var strOverflow = 'overflow';\r\n                var strHidden = 'hidden';\r\n                var strScroll = 'scroll';\r\n                var bodyElement = FRAMEWORK('body');\r\n                var scrollbarDummyElement = FRAMEWORK('<div id=\"os-dummy-scrollbar-size\"><div></div></div>');\r\n                var scrollbarDummyElement0 = scrollbarDummyElement[0];\r\n                var dummyContainerChild = FRAMEWORK(scrollbarDummyElement.children('div').eq(0));\r\n\r\n                bodyElement.append(scrollbarDummyElement);\r\n                scrollbarDummyElement.hide().show(); //fix IE8 bug (incorrect measuring)\r\n\r\n                var nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement0);\r\n                var nativeScrollbarIsOverlaid = {\r\n                    x: nativeScrollbarSize.x === 0,\r\n                    y: nativeScrollbarSize.y === 0\r\n                };\r\n                var msie = (function () {\r\n                    var ua = window.navigator.userAgent;\r\n                    var strIndexOf = 'indexOf';\r\n                    var strSubString = 'substring';\r\n                    var msie = ua[strIndexOf]('MSIE ');\r\n                    var trident = ua[strIndexOf]('Trident/');\r\n                    var edge = ua[strIndexOf]('Edge/');\r\n                    var rv = ua[strIndexOf]('rv:');\r\n                    var result;\r\n                    var parseIntFunc = parseInt;\r\n\r\n                    // IE 10 or older => return version number\r\n                    if (msie > 0)\r\n                        result = parseIntFunc(ua[strSubString](msie + 5, ua[strIndexOf]('.', msie)), 10);\r\n\r\n                    // IE 11 => return version number\r\n                    else if (trident > 0)\r\n                        result = parseIntFunc(ua[strSubString](rv + 3, ua[strIndexOf]('.', rv)), 10);\r\n\r\n                    // Edge (IE 12+) => return version number\r\n                    else if (edge > 0)\r\n                        result = parseIntFunc(ua[strSubString](edge + 5, ua[strIndexOf]('.', edge)), 10);\r\n\r\n                    // other browser\r\n                    return result;\r\n                })();\r\n\r\n                FRAMEWORK.extend(_base, {\r\n                    defaultOptions: defaultOptions,\r\n                    msie: msie,\r\n                    autoUpdateLoop: false,\r\n                    autoUpdateRecommended: !COMPATIBILITY.mO(),\r\n                    nativeScrollbarSize: nativeScrollbarSize,\r\n                    nativeScrollbarIsOverlaid: nativeScrollbarIsOverlaid,\r\n                    nativeScrollbarStyling: (function () {\r\n                        var result = false;\r\n                        scrollbarDummyElement.addClass('os-viewport-native-scrollbars-invisible');\r\n                        try {\r\n                            result = (scrollbarDummyElement.css('scrollbar-width') === 'none' && (msie > 9 || !msie)) || window.getComputedStyle(scrollbarDummyElement0, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\r\n                        } catch (ex) { }\r\n\r\n                        //fix opera bug: scrollbar styles will only appear if overflow value is scroll or auto during the activation of the style.\r\n                        //and set overflow to scroll\r\n                        //scrollbarDummyElement.css(strOverflow, strHidden).hide().css(strOverflow, strScroll).show();\r\n                        //return (scrollbarDummyElement0[LEXICON.oH] - scrollbarDummyElement0[LEXICON.cH]) === 0 && (scrollbarDummyElement0[LEXICON.oW] - scrollbarDummyElement0[LEXICON.cW]) === 0;\r\n\r\n                        return result;\r\n                    })(),\r\n                    overlayScrollbarDummySize: { x: 30, y: 30 },\r\n                    cssCalc: VENDORS._cssPropertyValue('width', 'calc', '(1px)') || null,\r\n                    restrictedMeasuring: (function () {\r\n                        //https://bugzilla.mozilla.org/show_bug.cgi?id=1439305\r\n                        //since 1.11.0 always false -> fixed via CSS (hopefully)\r\n                        scrollbarDummyElement.css(strOverflow, strHidden);\r\n                        var scrollSize = {\r\n                            w: scrollbarDummyElement0[LEXICON.sW],\r\n                            h: scrollbarDummyElement0[LEXICON.sH]\r\n                        };\r\n                        scrollbarDummyElement.css(strOverflow, 'visible');\r\n                        var scrollSize2 = {\r\n                            w: scrollbarDummyElement0[LEXICON.sW],\r\n                            h: scrollbarDummyElement0[LEXICON.sH]\r\n                        };\r\n                        return (scrollSize.w - scrollSize2.w) !== 0 || (scrollSize.h - scrollSize2.h) !== 0;\r\n                    })(),\r\n                    rtlScrollBehavior: (function () {\r\n                        scrollbarDummyElement.css({ 'overflow-y': strHidden, 'overflow-x': strScroll, 'direction': 'rtl' }).scrollLeft(0);\r\n                        var dummyContainerOffset = scrollbarDummyElement.offset();\r\n                        var dummyContainerChildOffset = dummyContainerChild.offset();\r\n                        //https://github.com/KingSora/OverlayScrollbars/issues/187\r\n                        scrollbarDummyElement.scrollLeft(-999);\r\n                        var dummyContainerChildOffsetAfterScroll = dummyContainerChild.offset();\r\n                        return {\r\n                            //origin direction = determines if the zero scroll position is on the left or right side\r\n                            //'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n                            //true = on the left side\r\n                            //false = on the right side\r\n                            i: dummyContainerOffset.left === dummyContainerChildOffset.left,\r\n                            //negative = determines if the maximum scroll is positive or negative\r\n                            //'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n                            //true = negative\r\n                            //false = positive\r\n                            n: dummyContainerChildOffset.left !== dummyContainerChildOffsetAfterScroll.left\r\n                        };\r\n                    })(),\r\n                    supportTransform: !!VENDORS._cssProperty('transform'),\r\n                    supportTransition: !!VENDORS._cssProperty('transition'),\r\n                    supportPassiveEvents: (function () {\r\n                        var supportsPassive = false;\r\n                        try {\r\n                            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n                                get: function () {\r\n                                    supportsPassive = true;\r\n                                }\r\n                            }));\r\n                        } catch (e) { }\r\n                        return supportsPassive;\r\n                    })(),\r\n                    supportResizeObserver: !!COMPATIBILITY.rO(),\r\n                    supportMutationObserver: !!COMPATIBILITY.mO()\r\n                });\r\n\r\n                scrollbarDummyElement.removeAttr(LEXICON.s).remove();\r\n\r\n                //Catch zoom event:\r\n                (function () {\r\n                    if (nativeScrollbarIsOverlaid.x && nativeScrollbarIsOverlaid.y)\r\n                        return;\r\n\r\n                    var abs = MATH.abs;\r\n                    var windowWidth = COMPATIBILITY.wW();\r\n                    var windowHeight = COMPATIBILITY.wH();\r\n                    var windowDpr = getWindowDPR();\r\n                    var onResize = function () {\r\n                        if (INSTANCES().length > 0) {\r\n                            var newW = COMPATIBILITY.wW();\r\n                            var newH = COMPATIBILITY.wH();\r\n                            var deltaW = newW - windowWidth;\r\n                            var deltaH = newH - windowHeight;\r\n\r\n                            if (deltaW === 0 && deltaH === 0)\r\n                                return;\r\n\r\n                            var deltaWRatio = MATH.round(newW / (windowWidth / 100.0));\r\n                            var deltaHRatio = MATH.round(newH / (windowHeight / 100.0));\r\n                            var absDeltaW = abs(deltaW);\r\n                            var absDeltaH = abs(deltaH);\r\n                            var absDeltaWRatio = abs(deltaWRatio);\r\n                            var absDeltaHRatio = abs(deltaHRatio);\r\n                            var newDPR = getWindowDPR();\r\n\r\n                            var deltaIsBigger = absDeltaW > 2 && absDeltaH > 2;\r\n                            var difference = !differenceIsBiggerThanOne(absDeltaWRatio, absDeltaHRatio);\r\n                            var dprChanged = newDPR !== windowDpr && windowDpr > 0;\r\n                            var isZoom = deltaIsBigger && difference && dprChanged;\r\n                            var oldScrollbarSize = _base.nativeScrollbarSize;\r\n                            var newScrollbarSize;\r\n\r\n                            if (isZoom) {\r\n                                bodyElement.append(scrollbarDummyElement);\r\n                                newScrollbarSize = _base.nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement[0]);\r\n                                scrollbarDummyElement.remove();\r\n                                if (oldScrollbarSize.x !== newScrollbarSize.x || oldScrollbarSize.y !== newScrollbarSize.y) {\r\n                                    FRAMEWORK.each(INSTANCES(), function () {\r\n                                        if (INSTANCES(this))\r\n                                            INSTANCES(this).update('zoom');\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            windowWidth = newW;\r\n                            windowHeight = newH;\r\n                            windowDpr = newDPR;\r\n                        }\r\n                    };\r\n\r\n                    function differenceIsBiggerThanOne(valOne, valTwo) {\r\n                        var absValOne = abs(valOne);\r\n                        var absValTwo = abs(valTwo);\r\n                        return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n                    }\r\n\r\n                    function getWindowDPR() {\r\n                        var dDPI = window.screen.deviceXDPI || 0;\r\n                        var sDPI = window.screen.logicalXDPI || 1;\r\n                        return window.devicePixelRatio || (dDPI / sDPI);\r\n                    }\r\n\r\n                    FRAMEWORK(window).on('resize', onResize);\r\n                })();\r\n\r\n                function calcNativeScrollbarSize(measureElement) {\r\n                    return {\r\n                        x: measureElement[LEXICON.oH] - measureElement[LEXICON.cH],\r\n                        y: measureElement[LEXICON.oW] - measureElement[LEXICON.cW]\r\n                    };\r\n                }\r\n            }\r\n\r\n            /**\r\n             * The object which manages the auto update loop for all OverlayScrollbars objects. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n             * @constructor\r\n             */\r\n            function OverlayScrollbarsAutoUpdateLoop(globals) {\r\n                var _base = this;\r\n                var _inArray = FRAMEWORK.inArray;\r\n                var _getNow = COMPATIBILITY.now;\r\n                var _strAutoUpdate = 'autoUpdate';\r\n                var _strAutoUpdateInterval = _strAutoUpdate + 'Interval';\r\n                var _strLength = LEXICON.l;\r\n                var _loopingInstances = [];\r\n                var _loopingInstancesIntervalCache = [];\r\n                var _loopIsActive = false;\r\n                var _loopIntervalDefault = 33;\r\n                var _loopInterval = _loopIntervalDefault;\r\n                var _loopTimeOld = _getNow();\r\n                var _loopID;\r\n\r\n\r\n                /**\r\n                 * The auto update loop which will run every 50 milliseconds or less if the update interval of a instance is lower than 50 milliseconds.\r\n                 */\r\n                var loop = function () {\r\n                    if (_loopingInstances[_strLength] > 0 && _loopIsActive) {\r\n                        _loopID = COMPATIBILITY.rAF()(function () {\r\n                            loop();\r\n                        });\r\n                        var timeNew = _getNow();\r\n                        var timeDelta = timeNew - _loopTimeOld;\r\n                        var lowestInterval;\r\n                        var instance;\r\n                        var instanceOptions;\r\n                        var instanceAutoUpdateAllowed;\r\n                        var instanceAutoUpdateInterval;\r\n                        var now;\r\n\r\n                        if (timeDelta > _loopInterval) {\r\n                            _loopTimeOld = timeNew - (timeDelta % _loopInterval);\r\n                            lowestInterval = _loopIntervalDefault;\r\n                            for (var i = 0; i < _loopingInstances[_strLength]; i++) {\r\n                                instance = _loopingInstances[i];\r\n                                if (instance !== undefined) {\r\n                                    instanceOptions = instance.options();\r\n                                    instanceAutoUpdateAllowed = instanceOptions[_strAutoUpdate];\r\n                                    instanceAutoUpdateInterval = MATH.max(1, instanceOptions[_strAutoUpdateInterval]);\r\n                                    now = _getNow();\r\n\r\n                                    if ((instanceAutoUpdateAllowed === true || instanceAutoUpdateAllowed === null) && (now - _loopingInstancesIntervalCache[i]) > instanceAutoUpdateInterval) {\r\n                                        instance.update('auto');\r\n                                        _loopingInstancesIntervalCache[i] = new Date(now += instanceAutoUpdateInterval);\r\n                                    }\r\n\r\n                                    lowestInterval = MATH.max(1, MATH.min(lowestInterval, instanceAutoUpdateInterval));\r\n                                }\r\n                            }\r\n                            _loopInterval = lowestInterval;\r\n                        }\r\n                    } else {\r\n                        _loopInterval = _loopIntervalDefault;\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Add OverlayScrollbars instance to the auto update loop. Only successful if the instance isn't already added.\r\n                 * @param instance The instance which shall be updated in a loop automatically.\r\n                 */\r\n                _base.add = function (instance) {\r\n                    if (_inArray(instance, _loopingInstances) === -1) {\r\n                        _loopingInstances.push(instance);\r\n                        _loopingInstancesIntervalCache.push(_getNow());\r\n                        if (_loopingInstances[_strLength] > 0 && !_loopIsActive) {\r\n                            _loopIsActive = true;\r\n                            globals.autoUpdateLoop = _loopIsActive;\r\n                            loop();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Remove OverlayScrollbars instance from the auto update loop. Only successful if the instance was added before.\r\n                 * @param instance The instance which shall be updated in a loop automatically.\r\n                 */\r\n                _base.remove = function (instance) {\r\n                    var index = _inArray(instance, _loopingInstances);\r\n                    if (index > -1) {\r\n                        //remove from loopingInstances list\r\n                        _loopingInstancesIntervalCache.splice(index, 1);\r\n                        _loopingInstances.splice(index, 1);\r\n\r\n                        //correct update loop behavior\r\n                        if (_loopingInstances[_strLength] === 0 && _loopIsActive) {\r\n                            _loopIsActive = false;\r\n                            globals.autoUpdateLoop = _loopIsActive;\r\n                            if (_loopID !== undefined) {\r\n                                COMPATIBILITY.cAF()(_loopID);\r\n                                _loopID = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            /**\r\n             * A object which manages the scrollbars visibility of the target element.\r\n             * @param pluginTargetElement The element from which the scrollbars shall be hidden.\r\n             * @param options The custom options.\r\n             * @param extensions The custom extensions.\r\n             * @param globals\r\n             * @param autoUpdateLoop\r\n             * @returns {*}\r\n             * @constructor\r\n             */\r\n            function OverlayScrollbarsInstance(pluginTargetElement, options, extensions, globals, autoUpdateLoop) {\r\n                //shortcuts\r\n                var type = COMPATIBILITY.type;\r\n                var inArray = FRAMEWORK.inArray;\r\n                var each = FRAMEWORK.each;\r\n\r\n                //make correct instanceof\r\n                var _base = new _plugin();\r\n                var _frameworkProto = FRAMEWORK[LEXICON.p];\r\n\r\n                //if passed element is no HTML element: skip and return\r\n                if (!isHTMLElement(pluginTargetElement))\r\n                    return;\r\n\r\n                //if passed element is already initialized: set passed options if there are any and return its instance\r\n                if (INSTANCES(pluginTargetElement)) {\r\n                    var inst = INSTANCES(pluginTargetElement);\r\n                    inst.options(options);\r\n                    return inst;\r\n                }\r\n\r\n                //globals:\r\n                var _nativeScrollbarIsOverlaid;\r\n                var _overlayScrollbarDummySize;\r\n                var _rtlScrollBehavior;\r\n                var _autoUpdateRecommended;\r\n                var _msieVersion;\r\n                var _nativeScrollbarStyling;\r\n                var _cssCalc;\r\n                var _nativeScrollbarSize;\r\n                var _supportTransition;\r\n                var _supportTransform;\r\n                var _supportPassiveEvents;\r\n                var _supportResizeObserver;\r\n                var _supportMutationObserver;\r\n                var _restrictedMeasuring;\r\n\r\n                //general readonly:\r\n                var _initialized;\r\n                var _destroyed;\r\n                var _isTextarea;\r\n                var _isBody;\r\n                var _documentMixed;\r\n                var _domExists;\r\n\r\n                //general:\r\n                var _isBorderBox;\r\n                var _sizeAutoObserverAdded;\r\n                var _paddingX;\r\n                var _paddingY;\r\n                var _borderX;\r\n                var _borderY;\r\n                var _marginX;\r\n                var _marginY;\r\n                var _isRTL;\r\n                var _sleeping;\r\n                var _contentBorderSize = {};\r\n                var _scrollHorizontalInfo = {};\r\n                var _scrollVerticalInfo = {};\r\n                var _viewportSize = {};\r\n                var _nativeScrollbarMinSize = {};\r\n\r\n                //naming:\r\n                var _strMinusHidden = '-hidden';\r\n                var _strMarginMinus = 'margin-';\r\n                var _strPaddingMinus = 'padding-';\r\n                var _strBorderMinus = 'border-';\r\n                var _strTop = 'top';\r\n                var _strRight = 'right';\r\n                var _strBottom = 'bottom';\r\n                var _strLeft = 'left';\r\n                var _strMinMinus = 'min-';\r\n                var _strMaxMinus = 'max-';\r\n                var _strWidth = 'width';\r\n                var _strHeight = 'height';\r\n                var _strFloat = 'float';\r\n                var _strEmpty = '';\r\n                var _strAuto = 'auto';\r\n                var _strSync = 'sync';\r\n                var _strScroll = 'scroll';\r\n                var _strHundredPercent = '100%';\r\n                var _strX = 'x';\r\n                var _strY = 'y';\r\n                var _strDot = '.';\r\n                var _strSpace = ' ';\r\n                var _strScrollbar = 'scrollbar';\r\n                var _strMinusHorizontal = '-horizontal';\r\n                var _strMinusVertical = '-vertical';\r\n                var _strScrollLeft = _strScroll + 'Left';\r\n                var _strScrollTop = _strScroll + 'Top';\r\n                var _strMouseTouchDownEvent = 'mousedown touchstart';\r\n                var _strMouseTouchUpEvent = 'mouseup touchend touchcancel';\r\n                var _strMouseTouchMoveEvent = 'mousemove touchmove';\r\n                var _strMouseEnter = 'mouseenter';\r\n                var _strMouseLeave = 'mouseleave';\r\n                var _strKeyDownEvent = 'keydown';\r\n                var _strKeyUpEvent = 'keyup';\r\n                var _strSelectStartEvent = 'selectstart';\r\n                var _strTransitionEndEvent = 'transitionend webkitTransitionEnd oTransitionEnd';\r\n                var _strResizeObserverProperty = '__overlayScrollbarsRO__';\r\n\r\n                //class names:\r\n                var _cassNamesPrefix = 'os-';\r\n                var _classNameHTMLElement = _cassNamesPrefix + 'html';\r\n                var _classNameHostElement = _cassNamesPrefix + 'host';\r\n                var _classNameHostElementForeign = _classNameHostElement + '-foreign';\r\n                var _classNameHostTextareaElement = _classNameHostElement + '-textarea';\r\n                var _classNameHostScrollbarHorizontalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusHorizontal + _strMinusHidden;\r\n                var _classNameHostScrollbarVerticalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusVertical + _strMinusHidden;\r\n                var _classNameHostTransition = _classNameHostElement + '-transition';\r\n                var _classNameHostRTL = _classNameHostElement + '-rtl';\r\n                var _classNameHostResizeDisabled = _classNameHostElement + '-resize-disabled';\r\n                var _classNameHostScrolling = _classNameHostElement + '-scrolling';\r\n                var _classNameHostOverflow = _classNameHostElement + '-overflow';\r\n                var _classNameHostOverflow = _classNameHostElement + '-overflow';\r\n                var _classNameHostOverflowX = _classNameHostOverflow + '-x';\r\n                var _classNameHostOverflowY = _classNameHostOverflow + '-y';\r\n                var _classNameTextareaElement = _cassNamesPrefix + 'textarea';\r\n                var _classNameTextareaCoverElement = _classNameTextareaElement + '-cover';\r\n                var _classNamePaddingElement = _cassNamesPrefix + 'padding';\r\n                var _classNameViewportElement = _cassNamesPrefix + 'viewport';\r\n                var _classNameViewportNativeScrollbarsInvisible = _classNameViewportElement + '-native-scrollbars-invisible';\r\n                var _classNameViewportNativeScrollbarsOverlaid = _classNameViewportElement + '-native-scrollbars-overlaid';\r\n                var _classNameContentElement = _cassNamesPrefix + 'content';\r\n                var _classNameContentArrangeElement = _cassNamesPrefix + 'content-arrange';\r\n                var _classNameContentGlueElement = _cassNamesPrefix + 'content-glue';\r\n                var _classNameSizeAutoObserverElement = _cassNamesPrefix + 'size-auto-observer';\r\n                var _classNameResizeObserverElement = _cassNamesPrefix + 'resize-observer';\r\n                var _classNameResizeObserverItemElement = _cassNamesPrefix + 'resize-observer-item';\r\n                var _classNameResizeObserverItemFinalElement = _classNameResizeObserverItemElement + '-final';\r\n                var _classNameTextInherit = _cassNamesPrefix + 'text-inherit';\r\n                var _classNameScrollbar = _cassNamesPrefix + _strScrollbar;\r\n                var _classNameScrollbarTrack = _classNameScrollbar + '-track';\r\n                var _classNameScrollbarTrackOff = _classNameScrollbarTrack + '-off';\r\n                var _classNameScrollbarHandle = _classNameScrollbar + '-handle';\r\n                var _classNameScrollbarHandleOff = _classNameScrollbarHandle + '-off';\r\n                var _classNameScrollbarUnusable = _classNameScrollbar + '-unusable';\r\n                var _classNameScrollbarAutoHidden = _classNameScrollbar + '-' + _strAuto + _strMinusHidden;\r\n                var _classNameScrollbarCorner = _classNameScrollbar + '-corner';\r\n                var _classNameScrollbarCornerResize = _classNameScrollbarCorner + '-resize';\r\n                var _classNameScrollbarCornerResizeB = _classNameScrollbarCornerResize + '-both';\r\n                var _classNameScrollbarCornerResizeH = _classNameScrollbarCornerResize + _strMinusHorizontal;\r\n                var _classNameScrollbarCornerResizeV = _classNameScrollbarCornerResize + _strMinusVertical;\r\n                var _classNameScrollbarHorizontal = _classNameScrollbar + _strMinusHorizontal;\r\n                var _classNameScrollbarVertical = _classNameScrollbar + _strMinusVertical;\r\n                var _classNameDragging = _cassNamesPrefix + 'dragging';\r\n                var _classNameThemeNone = _cassNamesPrefix + 'theme-none';\r\n                var _classNamesDynamicDestroy = [\r\n                    _classNameViewportNativeScrollbarsInvisible,\r\n                    _classNameViewportNativeScrollbarsOverlaid,\r\n                    _classNameScrollbarTrackOff,\r\n                    _classNameScrollbarHandleOff,\r\n                    _classNameScrollbarUnusable,\r\n                    _classNameScrollbarAutoHidden,\r\n                    _classNameScrollbarCornerResize,\r\n                    _classNameScrollbarCornerResizeB,\r\n                    _classNameScrollbarCornerResizeH,\r\n                    _classNameScrollbarCornerResizeV,\r\n                    _classNameDragging].join(_strSpace);\r\n\r\n                //callbacks:\r\n                var _callbacksInitQeueue = [];\r\n\r\n                //attrs viewport shall inherit from target\r\n                var _viewportAttrsFromTarget = [LEXICON.ti];\r\n\r\n                //options:\r\n                var _defaultOptions;\r\n                var _currentOptions;\r\n                var _currentPreparedOptions;\r\n\r\n                //extensions:\r\n                var _extensions = {};\r\n                var _extensionsPrivateMethods = 'added removed on contract';\r\n\r\n                //update\r\n                var _lastUpdateTime;\r\n                var _swallowedUpdateHints = {};\r\n                var _swallowedUpdateTimeout;\r\n                var _swallowUpdateLag = 42;\r\n                var _updateOnLoadEventName = 'load';\r\n                var _updateOnLoadElms = [];\r\n\r\n                //DOM elements:\r\n                var _windowElement;\r\n                var _documentElement;\r\n                var _htmlElement;\r\n                var _bodyElement;\r\n                var _targetElement;                     //the target element of this OverlayScrollbars object\r\n                var _hostElement;                       //the host element of this OverlayScrollbars object -> may be the same as targetElement\r\n                var _sizeAutoObserverElement;           //observes size auto changes\r\n                var _sizeObserverElement;               //observes size and padding changes\r\n                var _paddingElement;                    //manages the padding\r\n                var _viewportElement;                   //is the viewport of our scrollbar model\r\n                var _contentElement;                    //the element which holds the content\r\n                var _contentArrangeElement;             //is needed for correct sizing of the content element (only if native scrollbars are overlays)\r\n                var _contentGlueElement;                //has always the size of the content element\r\n                var _textareaCoverElement;              //only applied if target is a textarea element. Used for correct size calculation and for prevention of uncontrolled scrolling\r\n                var _scrollbarCornerElement;\r\n                var _scrollbarHorizontalElement;\r\n                var _scrollbarHorizontalTrackElement;\r\n                var _scrollbarHorizontalHandleElement;\r\n                var _scrollbarVerticalElement;\r\n                var _scrollbarVerticalTrackElement;\r\n                var _scrollbarVerticalHandleElement;\r\n                var _windowElementNative;\r\n                var _documentElementNative;\r\n                var _targetElementNative;\r\n                var _hostElementNative;\r\n                var _sizeAutoObserverElementNative;\r\n                var _sizeObserverElementNative;\r\n                var _paddingElementNative;\r\n                var _viewportElementNative;\r\n                var _contentElementNative;\r\n\r\n                //Cache:\r\n                var _hostSizeCache;\r\n                var _contentScrollSizeCache;\r\n                var _arrangeContentSizeCache;\r\n                var _hasOverflowCache;\r\n                var _hideOverflowCache;\r\n                var _widthAutoCache;\r\n                var _heightAutoCache;\r\n                var _cssBoxSizingCache;\r\n                var _cssPaddingCache;\r\n                var _cssBorderCache;\r\n                var _cssMarginCache;\r\n                var _cssDirectionCache;\r\n                var _cssDirectionDetectedCache;\r\n                var _paddingAbsoluteCache;\r\n                var _clipAlwaysCache;\r\n                var _contentGlueSizeCache;\r\n                var _overflowBehaviorCache;\r\n                var _overflowAmountCache;\r\n                var _ignoreOverlayScrollbarHidingCache;\r\n                var _autoUpdateCache;\r\n                var _sizeAutoCapableCache;\r\n                var _contentElementScrollSizeChangeDetectedCache;\r\n                var _hostElementSizeChangeDetectedCache;\r\n                var _scrollbarsVisibilityCache;\r\n                var _scrollbarsAutoHideCache;\r\n                var _scrollbarsClickScrollingCache;\r\n                var _scrollbarsDragScrollingCache;\r\n                var _resizeCache;\r\n                var _normalizeRTLCache;\r\n                var _classNameCache;\r\n                var _oldClassName;\r\n                var _textareaAutoWrappingCache;\r\n                var _textareaInfoCache;\r\n                var _textareaSizeCache;\r\n                var _textareaDynHeightCache;\r\n                var _textareaDynWidthCache;\r\n                var _bodyMinSizeCache;\r\n                var _updateAutoCache = {};\r\n\r\n                //MutationObserver:\r\n                var _mutationObserverHost;\r\n                var _mutationObserverContent;\r\n                var _mutationObserverHostCallback;\r\n                var _mutationObserverContentCallback;\r\n                var _mutationObserversConnected;\r\n                var _mutationObserverAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n                var _mutationObserverAttrsHost = [LEXICON.i, LEXICON.c, LEXICON.s, 'open'].concat(_viewportAttrsFromTarget);\r\n\r\n                //events:\r\n                var _destroyEvents = [];\r\n\r\n                //textarea:\r\n                var _textareaHasFocus;\r\n\r\n                //scrollbars:\r\n                var _scrollbarsAutoHideTimeoutId;\r\n                var _scrollbarsAutoHideMoveTimeoutId;\r\n                var _scrollbarsAutoHideDelay;\r\n                var _scrollbarsAutoHideNever;\r\n                var _scrollbarsAutoHideScroll;\r\n                var _scrollbarsAutoHideMove;\r\n                var _scrollbarsAutoHideLeave;\r\n                var _scrollbarsHandleHovered;\r\n                var _scrollbarsHandlesDefineScrollPos;\r\n\r\n                //resize\r\n                var _resizeNone;\r\n                var _resizeBoth;\r\n                var _resizeHorizontal;\r\n                var _resizeVertical;\r\n\r\n\r\n                //==== Event Listener ====//\r\n\r\n                /**\r\n                 * Adds or removes a event listener from the given element.\r\n                 * @param element The element to which the event listener shall be applied or removed.\r\n                 * @param eventNames The name(s) of the events.\r\n                 * @param listener The method which shall be called.\r\n                 * @param remove True if the handler shall be removed, false or undefined if the handler shall be added.\r\n                 * @param passiveOrOptions The options for the event.\r\n                 */\r\n                function setupResponsiveEventListener(element, eventNames, listener, remove, passiveOrOptions) {\r\n                    var collected = COMPATIBILITY.isA(eventNames) && COMPATIBILITY.isA(listener);\r\n                    var method = remove ? 'removeEventListener' : 'addEventListener';\r\n                    var onOff = remove ? 'off' : 'on';\r\n                    var events = collected ? false : eventNames.split(_strSpace)\r\n                    var i = 0;\r\n\r\n                    var passiveOrOptionsIsObj = FRAMEWORK.isPlainObject(passiveOrOptions);\r\n                    var passive = (_supportPassiveEvents && (passiveOrOptionsIsObj ? (passiveOrOptions._passive) : passiveOrOptions)) || false;\r\n                    var capture = passiveOrOptionsIsObj && (passiveOrOptions._capture || false);\r\n                    var nativeParam = _supportPassiveEvents ? {\r\n                        passive: passive,\r\n                        capture: capture,\r\n                    } : capture;\r\n\r\n                    if (collected) {\r\n                        for (; i < eventNames[LEXICON.l]; i++)\r\n                            setupResponsiveEventListener(element, eventNames[i], listener[i], remove, passiveOrOptions);\r\n                    }\r\n                    else {\r\n                        for (; i < events[LEXICON.l]; i++) {\r\n                            if(_supportPassiveEvents) {\r\n                                element[0][method](events[i], listener, nativeParam);\r\n                            }\r\n                            else {\r\n                                element[onOff](events[i], listener);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                function addDestroyEventListener(element, eventNames, listener, passive) {\r\n                    setupResponsiveEventListener(element, eventNames, listener, false, passive);\r\n                    _destroyEvents.push(COMPATIBILITY.bind(setupResponsiveEventListener, 0, element, eventNames, listener, true, passive));\r\n                }\r\n\r\n                //==== Resize Observer ====//\r\n\r\n                /**\r\n                 * Adds or removes a resize observer from the given element.\r\n                 * @param targetElement The element to which the resize observer shall be added or removed.\r\n                 * @param onElementResizedCallback The callback which is fired every time the resize observer registers a size change or false / undefined if the resizeObserver shall be removed.\r\n                 */\r\n                function setupResizeObserver(targetElement, onElementResizedCallback) {\r\n                    if (targetElement) {\r\n                        var resizeObserver = COMPATIBILITY.rO();\r\n                        var strAnimationStartEvent = 'animationstart mozAnimationStart webkitAnimationStart MSAnimationStart';\r\n                        var strChildNodes = 'childNodes';\r\n                        var constScroll = 3333333;\r\n                        var callback = function () {\r\n                            targetElement[_strScrollTop](constScroll)[_strScrollLeft](_isRTL ? _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll : constScroll);\r\n                            onElementResizedCallback();\r\n                        };\r\n                        //add resize observer:\r\n                        if (onElementResizedCallback) {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.addClass('observed').append(generateDiv(_classNameResizeObserverElement)).contents()[0];\r\n                                var observer = element[_strResizeObserverProperty] = new resizeObserver(callback);\r\n                                observer.observe(element);\r\n                            }\r\n                            else {\r\n                                if (_msieVersion > 9 || !_autoUpdateRecommended) {\r\n                                    targetElement.prepend(\r\n                                        generateDiv(_classNameResizeObserverElement,\r\n                                            generateDiv({ c: _classNameResizeObserverItemElement, dir: 'ltr' },\r\n                                                generateDiv(_classNameResizeObserverItemElement,\r\n                                                    generateDiv(_classNameResizeObserverItemFinalElement)\r\n                                                ) +\r\n                                                generateDiv(_classNameResizeObserverItemElement,\r\n                                                    generateDiv({ c: _classNameResizeObserverItemFinalElement, style: 'width: 200%; height: 200%' })\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                    );\r\n\r\n                                    var observerElement = targetElement[0][strChildNodes][0][strChildNodes][0];\r\n                                    var shrinkElement = FRAMEWORK(observerElement[strChildNodes][1]);\r\n                                    var expandElement = FRAMEWORK(observerElement[strChildNodes][0]);\r\n                                    var expandElementChild = FRAMEWORK(expandElement[0][strChildNodes][0]);\r\n                                    var widthCache = observerElement[LEXICON.oW];\r\n                                    var heightCache = observerElement[LEXICON.oH];\r\n                                    var isDirty;\r\n                                    var rAFId;\r\n                                    var currWidth;\r\n                                    var currHeight;\r\n                                    var factor = 2;\r\n                                    var nativeScrollbarSize = globals.nativeScrollbarSize; //care don't make changes to this object!!!\r\n                                    var reset = function () {\r\n                                        /*\r\n                                         var sizeResetWidth = observerElement[LEXICON.oW] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                                         var sizeResetHeight = observerElement[LEXICON.oH] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                                         var expandChildCSS = {};\r\n                                         expandChildCSS[_strWidth] = sizeResetWidth;\r\n                                         expandChildCSS[_strHeight] = sizeResetHeight;\r\n                                         expandElementChild.css(expandChildCSS);\r\n\r\n\r\n                                         expandElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                                         shrinkElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                                         */\r\n                                        expandElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\r\n                                        shrinkElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\r\n                                    };\r\n                                    var onResized = function () {\r\n                                        rAFId = 0;\r\n                                        if (!isDirty)\r\n                                            return;\r\n\r\n                                        widthCache = currWidth;\r\n                                        heightCache = currHeight;\r\n                                        callback();\r\n                                    };\r\n                                    var onScroll = function (event) {\r\n                                        currWidth = observerElement[LEXICON.oW];\r\n                                        currHeight = observerElement[LEXICON.oH];\r\n                                        isDirty = currWidth != widthCache || currHeight != heightCache;\r\n\r\n                                        if (event && isDirty && !rAFId) {\r\n                                            COMPATIBILITY.cAF()(rAFId);\r\n                                            rAFId = COMPATIBILITY.rAF()(onResized);\r\n                                        }\r\n                                        else if (!event)\r\n                                            onResized();\r\n\r\n                                        reset();\r\n                                        if (event) {\r\n                                            COMPATIBILITY.prvD(event);\r\n                                            COMPATIBILITY.stpP(event);\r\n                                        }\r\n                                        return false;\r\n                                    };\r\n                                    var expandChildCSS = {};\r\n                                    var observerElementCSS = {};\r\n\r\n                                    setTopRightBottomLeft(observerElementCSS, _strEmpty, [\r\n                                        -((nativeScrollbarSize.y + 1) * factor),\r\n                                        nativeScrollbarSize.x * -factor,\r\n                                        nativeScrollbarSize.y * -factor,\r\n                                        -((nativeScrollbarSize.x + 1) * factor)\r\n                                    ]);\r\n\r\n                                    FRAMEWORK(observerElement).css(observerElementCSS);\r\n                                    expandElement.on(_strScroll, onScroll);\r\n                                    shrinkElement.on(_strScroll, onScroll);\r\n                                    targetElement.on(strAnimationStartEvent, function () {\r\n                                        onScroll(false);\r\n                                    });\r\n                                    //lets assume that the divs will never be that large and a constant value is enough\r\n                                    expandChildCSS[_strWidth] = constScroll;\r\n                                    expandChildCSS[_strHeight] = constScroll;\r\n                                    expandElementChild.css(expandChildCSS);\r\n\r\n                                    reset();\r\n                                }\r\n                                else {\r\n                                    var attachEvent = _documentElementNative.attachEvent;\r\n                                    var isIE = _msieVersion !== undefined;\r\n                                    if (attachEvent) {\r\n                                        targetElement.prepend(generateDiv(_classNameResizeObserverElement));\r\n                                        findFirst(targetElement, _strDot + _classNameResizeObserverElement)[0].attachEvent('onresize', callback);\r\n                                    }\r\n                                    else {\r\n                                        var obj = _documentElementNative.createElement(TYPES.o);\r\n                                        obj.setAttribute(LEXICON.ti, '-1');\r\n                                        obj.setAttribute(LEXICON.c, _classNameResizeObserverElement);\r\n                                        obj.onload = function () {\r\n                                            var wnd = this.contentDocument.defaultView;\r\n                                            wnd.addEventListener('resize', callback);\r\n                                            wnd.document.documentElement.style.display = 'none';\r\n                                        };\r\n                                        obj.type = 'text/html';\r\n                                        if (isIE)\r\n                                            targetElement.prepend(obj);\r\n                                        obj.data = 'about:blank';\r\n                                        if (!isIE)\r\n                                            targetElement.prepend(obj);\r\n                                        targetElement.on(strAnimationStartEvent, callback);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (targetElement[0] === _sizeObserverElementNative) {\r\n                                var directionChanged = function () {\r\n                                    var dir = _hostElement.css('direction');\r\n                                    var css = {};\r\n                                    var scrollLeftValue = 0;\r\n                                    var result = false;\r\n                                    if (dir !== _cssDirectionDetectedCache) {\r\n                                        if (dir === 'ltr') {\r\n                                            css[_strLeft] = 0;\r\n                                            css[_strRight] = _strAuto;\r\n                                            scrollLeftValue = constScroll;\r\n                                        }\r\n                                        else {\r\n                                            css[_strLeft] = _strAuto;\r\n                                            css[_strRight] = 0;\r\n                                            scrollLeftValue = _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll;\r\n                                        }\r\n                                        //execution order is important for IE!!!\r\n                                        _sizeObserverElement.children().eq(0).css(css);\r\n                                        _sizeObserverElement[_strScrollLeft](scrollLeftValue)[_strScrollTop](constScroll);\r\n                                        _cssDirectionDetectedCache = dir;\r\n                                        result = true;\r\n                                    }\r\n                                    return result;\r\n                                };\r\n                                directionChanged();\r\n                                addDestroyEventListener(targetElement, _strScroll, function (event) {\r\n                                    if (directionChanged())\r\n                                        update();\r\n                                    COMPATIBILITY.prvD(event);\r\n                                    COMPATIBILITY.stpP(event);\r\n                                    return false;\r\n                                });\r\n                            }\r\n                        }\r\n                        //remove resize observer:\r\n                        else {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.contents()[0];\r\n                                var resizeObserverObj = element[_strResizeObserverProperty];\r\n                                if (resizeObserverObj) {\r\n                                    resizeObserverObj.disconnect();\r\n                                    delete element[_strResizeObserverProperty];\r\n                                }\r\n                            }\r\n                            else {\r\n                                remove(targetElement.children(_strDot + _classNameResizeObserverElement).eq(0));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Freezes or unfreezes the given resize observer.\r\n                 * @param targetElement The element to which the target resize observer is applied.\r\n                 * @param freeze True if the resize observer shall be frozen, false otherwise.\r\n\r\n                 function freezeResizeObserver(targetElement, freeze) {\r\n                    if (targetElement !== undefined) {\r\n                        if(freeze) {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.contents()[0];\r\n                                element[_strResizeObserverProperty].unobserve(element);\r\n                            }\r\n                            else {\r\n                                targetElement = targetElement.children(_strDot + _classNameResizeObserverElement).eq(0);\r\n                                var w = targetElement.css(_strWidth);\r\n                                var h = targetElement.css(_strHeight);\r\n                                var css = {};\r\n                                css[_strWidth] = w;\r\n                                css[_strHeight] = h;\r\n                                targetElement.css(css);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.contents()[0];\r\n                                element[_strResizeObserverProperty].observe(element);\r\n                            }\r\n                            else {\r\n                                var css = { };\r\n                                css[_strHeight] = _strEmpty;\r\n                                css[_strWidth] = _strEmpty;\r\n                                targetElement.children(_strDot + _classNameResizeObserverElement).eq(0).css(css);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                 */\r\n\r\n\r\n                //==== Mutation Observers ====//\r\n\r\n                /**\r\n                 * Creates MutationObservers for the host and content Element if they are supported.\r\n                 */\r\n                function createMutationObservers() {\r\n                    if (_supportMutationObserver) {\r\n                        var mutationObserverContentLag = 11;\r\n                        var mutationObserver = COMPATIBILITY.mO();\r\n                        var contentLastUpdate = COMPATIBILITY.now();\r\n                        var mutationTarget;\r\n                        var mutationAttrName;\r\n                        var mutationIsClass;\r\n                        var oldMutationVal;\r\n                        var newClassVal;\r\n                        var hostClassNameRegex;\r\n                        var contentTimeout;\r\n                        var now;\r\n                        var sizeAuto;\r\n                        var action;\r\n\r\n                        _mutationObserverHostCallback = function (mutations) {\r\n\r\n                            var doUpdate = false;\r\n                            var doUpdateForce = false;\r\n                            var mutation;\r\n                            var mutatedAttrs = [];\r\n\r\n                            if (_initialized && !_sleeping) {\r\n                                each(mutations, function () {\r\n                                    mutation = this;\r\n                                    mutationTarget = mutation.target;\r\n                                    mutationAttrName = mutation.attributeName;\r\n                                    mutationIsClass = mutationAttrName === LEXICON.c;\r\n                                    oldMutationVal = mutation.oldValue;\r\n                                    newClassVal = mutationTarget.className;\r\n\r\n                                    if (_domExists && mutationIsClass && !doUpdateForce) {\r\n                                        // if old class value contains _classNameHostElementForeign and new class value doesn't\r\n                                        if (oldMutationVal.indexOf(_classNameHostElementForeign) > -1 && newClassVal.indexOf(_classNameHostElementForeign) < 0) {\r\n                                            hostClassNameRegex = createHostClassNameRegExp(true);\r\n                                            _hostElementNative.className = newClassVal.split(_strSpace).concat(oldMutationVal.split(_strSpace).filter(function (name) {\r\n                                                return name.match(hostClassNameRegex);\r\n                                            })).join(_strSpace);\r\n                                            doUpdate = doUpdateForce = true;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!doUpdate) {\r\n                                        doUpdate = mutationIsClass\r\n                                            ? hostClassNamesChanged(oldMutationVal, newClassVal)\r\n                                            : mutationAttrName === LEXICON.s\r\n                                                ? oldMutationVal !== mutationTarget[LEXICON.s].cssText\r\n                                                : true;\r\n                                    }\r\n\r\n                                    mutatedAttrs.push(mutationAttrName);\r\n                                });\r\n\r\n                                updateViewportAttrsFromTarget(mutatedAttrs);\r\n\r\n                                if (doUpdate)\r\n                                    _base.update(doUpdateForce || _strAuto);\r\n                            }\r\n                            return doUpdate;\r\n                        };\r\n                        _mutationObserverContentCallback = function (mutations) {\r\n                            var doUpdate = false;\r\n                            var mutation;\r\n\r\n                            if (_initialized && !_sleeping) {\r\n                                each(mutations, function () {\r\n                                    mutation = this;\r\n                                    doUpdate = isUnknownMutation(mutation);\r\n                                    return !doUpdate;\r\n                                });\r\n\r\n                                if (doUpdate) {\r\n                                    now = COMPATIBILITY.now();\r\n                                    sizeAuto = (_heightAutoCache || _widthAutoCache);\r\n                                    action = function () {\r\n                                        if (!_destroyed) {\r\n                                            contentLastUpdate = now;\r\n\r\n                                            //if cols, rows or wrap attr was changed\r\n                                            if (_isTextarea)\r\n                                                textareaUpdate();\r\n\r\n                                            if (sizeAuto)\r\n                                                update();\r\n                                            else\r\n                                                _base.update(_strAuto);\r\n                                        }\r\n                                    };\r\n                                    clearTimeout(contentTimeout);\r\n                                    if (mutationObserverContentLag <= 0 || now - contentLastUpdate > mutationObserverContentLag || !sizeAuto)\r\n                                        action();\r\n                                    else\r\n                                        contentTimeout = setTimeout(action, mutationObserverContentLag);\r\n                                }\r\n                            }\r\n                            return doUpdate;\r\n                        }\r\n\r\n                        _mutationObserverHost = new mutationObserver(_mutationObserverHostCallback);\r\n                        _mutationObserverContent = new mutationObserver(_mutationObserverContentCallback);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Connects the MutationObservers if they are supported.\r\n                 */\r\n                function connectMutationObservers() {\r\n                    if (_supportMutationObserver && !_mutationObserversConnected) {\r\n                        _mutationObserverHost.observe(_hostElementNative, {\r\n                            attributes: true,\r\n                            attributeOldValue: true,\r\n                            attributeFilter: _mutationObserverAttrsHost\r\n                        });\r\n\r\n                        _mutationObserverContent.observe(_isTextarea ? _targetElementNative : _contentElementNative, {\r\n                            attributes: true,\r\n                            attributeOldValue: true,\r\n                            subtree: !_isTextarea,\r\n                            childList: !_isTextarea,\r\n                            characterData: !_isTextarea,\r\n                            attributeFilter: _isTextarea ? _mutationObserverAttrsTextarea : _mutationObserverAttrsHost\r\n                        });\r\n\r\n                        _mutationObserversConnected = true;\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Disconnects the MutationObservers if they are supported.\r\n                 */\r\n                function disconnectMutationObservers() {\r\n                    if (_supportMutationObserver && _mutationObserversConnected) {\r\n                        _mutationObserverHost.disconnect();\r\n                        _mutationObserverContent.disconnect();\r\n\r\n                        _mutationObserversConnected = false;\r\n                    }\r\n                }\r\n\r\n\r\n                //==== Events of elements ====//\r\n\r\n                /**\r\n                 * This method gets called every time the host element gets resized. IMPORTANT: Padding changes are detected too!!\r\n                 * It refreshes the hostResizedEventArgs and the hostSizeResizeCache.\r\n                 * If there are any size changes, the update method gets called.\r\n                 */\r\n                function hostOnResized() {\r\n                    if (!_sleeping) {\r\n                        var changed;\r\n                        var hostSize = {\r\n                            w: _sizeObserverElementNative[LEXICON.sW],\r\n                            h: _sizeObserverElementNative[LEXICON.sH]\r\n                        };\r\n\r\n                        changed = checkCache(hostSize, _hostElementSizeChangeDetectedCache);\r\n                        _hostElementSizeChangeDetectedCache = hostSize;\r\n                        if (changed)\r\n                            update({ _hostSizeChanged: true });\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * The mouse enter event of the host element. This event is only needed for the autoHide feature.\r\n                 */\r\n                function hostOnMouseEnter() {\r\n                    if (_scrollbarsAutoHideLeave)\r\n                        refreshScrollbarsAutoHide(true);\r\n                }\r\n\r\n                /**\r\n                 * The mouse leave event of the host element. This event is only needed for the autoHide feature.\r\n                 */\r\n                function hostOnMouseLeave() {\r\n                    if (_scrollbarsAutoHideLeave && !_bodyElement.hasClass(_classNameDragging))\r\n                        refreshScrollbarsAutoHide(false);\r\n                }\r\n\r\n                /**\r\n                 * The mouse move event of the host element. This event is only needed for the autoHide \"move\" feature.\r\n                 */\r\n                function hostOnMouseMove() {\r\n                    if (_scrollbarsAutoHideMove) {\r\n                        refreshScrollbarsAutoHide(true);\r\n                        clearTimeout(_scrollbarsAutoHideMoveTimeoutId);\r\n                        _scrollbarsAutoHideMoveTimeoutId = setTimeout(function () {\r\n                            if (_scrollbarsAutoHideMove && !_destroyed)\r\n                                refreshScrollbarsAutoHide(false);\r\n                        }, 100);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Prevents text from deselection if attached to the document element on the mousedown event of a DOM element.\r\n                 * @param event The select start event.\r\n                 */\r\n                function documentOnSelectStart(event) {\r\n                    COMPATIBILITY.prvD(event);\r\n                    return false;\r\n                }\r\n\r\n                /**\r\n                 * A callback which will be called after a element has loaded.\r\n                 */\r\n                function updateOnLoadCallback(event) {\r\n                    if (!_destroyed) {\r\n                        var target = event.target;\r\n                        var elm = FRAMEWORK(event.target);\r\n                        var index = FRAMEWORK.inArray(target, _updateOnLoadElms);\r\n                        if (index > -1) {\r\n                            _updateOnLoadElms.splice(index, 1);\r\n                        }\r\n\r\n                        eachUpdateOnLoad(function (i, updateOnLoadSelector) {\r\n                            if (elm.is(updateOnLoadSelector)) {\r\n                                update({ _contentSizeChanged: true });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Adds or removes mouse & touch events of the host element. (for handling auto-hiding of the scrollbars)\r\n                 * @param destroy Indicates whether the events shall be added or removed.\r\n                 */\r\n                function setupHostMouseTouchEvents(destroy) {\r\n                    if (!destroy)\r\n                        setupHostMouseTouchEvents(true);\r\n\r\n                    setupResponsiveEventListener(_hostElement,\r\n                        _strMouseTouchMoveEvent.split(_strSpace)[0],\r\n                        hostOnMouseMove,\r\n                        (!_scrollbarsAutoHideMove || destroy), true);\r\n                    setupResponsiveEventListener(_hostElement,\r\n                        [_strMouseEnter, _strMouseLeave],\r\n                        [hostOnMouseEnter, hostOnMouseLeave],\r\n                        (!_scrollbarsAutoHideLeave || destroy), true);\r\n\r\n                    //if the plugin is initialized and the mouse is over the host element, make the scrollbars visible\r\n                    if (!_initialized && !destroy)\r\n                        _hostElement.one('mouseover', hostOnMouseEnter);\r\n                }\r\n\r\n\r\n                //==== Update Detection ====//\r\n\r\n                /**\r\n                 * Measures the min width and min height of the body element and refreshes the related cache.\r\n                 * @returns {boolean} True if the min width or min height has changed, false otherwise.\r\n                 */\r\n                function bodyMinSizeChanged() {\r\n                    var bodyMinSize = {};\r\n                    if (_isBody && _contentArrangeElement) {\r\n                        bodyMinSize.w = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strWidth));\r\n                        bodyMinSize.h = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strHeight));\r\n                        bodyMinSize.c = checkCache(bodyMinSize, _bodyMinSizeCache);\r\n                        bodyMinSize.f = true; //flag for \"measured at least once\"\r\n                    }\r\n                    _bodyMinSizeCache = bodyMinSize;\r\n                    return !!bodyMinSize.c;\r\n                }\r\n\r\n                /**\r\n                 * Returns true if the class names really changed (new class without plugin host prefix)\r\n                 * @param oldClassNames The old ClassName string or array.\r\n                 * @param newClassNames The new ClassName string or array.\r\n                 * @returns {boolean} True if the class names has really changed, false otherwise.\r\n                 */\r\n                function hostClassNamesChanged(oldClassNames, newClassNames) {\r\n                    var currClasses = typeof newClassNames == TYPES.s ? newClassNames.split(_strSpace) : [];\r\n                    var oldClasses = typeof oldClassNames == TYPES.s ? oldClassNames.split(_strSpace) : [];\r\n                    var diff = getArrayDifferences(oldClasses, currClasses);\r\n\r\n                    // remove none theme from diff list to prevent update\r\n                    var idx = inArray(_classNameThemeNone, diff);\r\n                    var i;\r\n                    var regex;\r\n\r\n                    if (idx > -1)\r\n                        diff.splice(idx, 1);\r\n\r\n                    if (diff[LEXICON.l] > 0) {\r\n                        regex = createHostClassNameRegExp(true, true);\r\n                        for (i = 0; i < diff.length; i++) {\r\n                            if (!diff[i].match(regex)) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                /**\r\n                 * Returns true if the given mutation is not from a from the plugin generated element. If the target element is a textarea the mutation is always unknown.\r\n                 * @param mutation The mutation which shall be checked.\r\n                 * @returns {boolean} True if the mutation is from a unknown element, false otherwise.\r\n                 */\r\n                function isUnknownMutation(mutation) {\r\n                    var attributeName = mutation.attributeName;\r\n                    var mutationTarget = mutation.target;\r\n                    var mutationType = mutation.type;\r\n                    var strClosest = 'closest';\r\n\r\n                    if (mutationTarget === _contentElementNative)\r\n                        return attributeName === null;\r\n                    if (mutationType === 'attributes' && (attributeName === LEXICON.c || attributeName === LEXICON.s) && !_isTextarea) {\r\n                        //ignore className changes by the plugin\r\n                        if (attributeName === LEXICON.c && FRAMEWORK(mutationTarget).hasClass(_classNameHostElement))\r\n                            return hostClassNamesChanged(mutation.oldValue, mutationTarget.className);\r\n\r\n                        //only do it of browser support it natively\r\n                        if (typeof mutationTarget[strClosest] != TYPES.f)\r\n                            return true;\r\n                        if (mutationTarget[strClosest](_strDot + _classNameResizeObserverElement) !== null ||\r\n                            mutationTarget[strClosest](_strDot + _classNameScrollbar) !== null ||\r\n                            mutationTarget[strClosest](_strDot + _classNameScrollbarCorner) !== null)\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                /**\r\n                 * Returns true if the content size was changed since the last time this method was called.\r\n                 * @returns {boolean} True if the content size was changed, false otherwise.\r\n                 */\r\n                function updateAutoContentSizeChanged() {\r\n                    if (_sleeping)\r\n                        return false;\r\n\r\n                    var contentMeasureElement = getContentMeasureElement();\r\n                    var textareaValueLength = _isTextarea && _widthAutoCache && !_textareaAutoWrappingCache ? _targetElement.val().length : 0;\r\n                    var setCSS = !_mutationObserversConnected && _widthAutoCache && !_isTextarea;\r\n                    var css = {};\r\n                    var float;\r\n                    var bodyMinSizeC;\r\n                    var changed;\r\n                    var contentElementScrollSize;\r\n\r\n                    if (setCSS) {\r\n                        float = _contentElement.css(_strFloat);\r\n                        css[_strFloat] = _isRTL ? _strRight : _strLeft;\r\n                        css[_strWidth] = _strAuto;\r\n                        _contentElement.css(css);\r\n                    }\r\n                    contentElementScrollSize = {\r\n                        w: contentMeasureElement[LEXICON.sW] + textareaValueLength,\r\n                        h: contentMeasureElement[LEXICON.sH] + textareaValueLength\r\n                    };\r\n                    if (setCSS) {\r\n                        css[_strFloat] = float;\r\n                        css[_strWidth] = _strHundredPercent;\r\n                        _contentElement.css(css);\r\n                    }\r\n\r\n                    bodyMinSizeC = bodyMinSizeChanged();\r\n                    changed = checkCache(contentElementScrollSize, _contentElementScrollSizeChangeDetectedCache);\r\n\r\n                    _contentElementScrollSizeChangeDetectedCache = contentElementScrollSize;\r\n\r\n                    return changed || bodyMinSizeC;\r\n                }\r\n\r\n                /**\r\n                 * Returns true when a attribute which the MutationObserver would observe has changed.\r\n                 * @returns {boolean} True if one of the attributes which a MutationObserver would observe has changed, false or undefined otherwise.\r\n                 */\r\n                function meaningfulAttrsChanged() {\r\n                    if (_sleeping || _mutationObserversConnected)\r\n                        return;\r\n\r\n                    var elem;\r\n                    var curr;\r\n                    var cache;\r\n                    var changedAttrs = [];\r\n                    var checks = [\r\n                        {\r\n                            _elem: _hostElement,\r\n                            _attrs: _mutationObserverAttrsHost.concat(':visible')\r\n                        },\r\n                        {\r\n                            _elem: _isTextarea ? _targetElement : undefined,\r\n                            _attrs: _mutationObserverAttrsTextarea\r\n                        }\r\n                    ];\r\n\r\n                    each(checks, function (index, check) {\r\n                        elem = check._elem;\r\n                        if (elem) {\r\n                            each(check._attrs, function (index, attr) {\r\n                                curr = attr.charAt(0) === ':' ? elem.is(attr) : elem.attr(attr);\r\n                                cache = _updateAutoCache[attr];\r\n\r\n                                if (checkCache(curr, cache)) {\r\n                                    changedAttrs.push(attr);\r\n                                }\r\n\r\n                                _updateAutoCache[attr] = curr;\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    updateViewportAttrsFromTarget(changedAttrs);\r\n\r\n                    return changedAttrs[LEXICON.l] > 0;\r\n                }\r\n\r\n                /**\r\n                 * Checks is a CSS Property of a child element is affecting the scroll size of the content.\r\n                 * @param propertyName The CSS property name.\r\n                 * @returns {boolean} True if the property is affecting the content scroll size, false otherwise.\r\n                 */\r\n                function isSizeAffectingCSSProperty(propertyName) {\r\n                    if (!_initialized)\r\n                        return true;\r\n                    var flexGrow = 'flex-grow';\r\n                    var flexShrink = 'flex-shrink';\r\n                    var flexBasis = 'flex-basis';\r\n                    var affectingPropsX = [\r\n                        _strWidth,\r\n                        _strMinMinus + _strWidth,\r\n                        _strMaxMinus + _strWidth,\r\n                        _strMarginMinus + _strLeft,\r\n                        _strMarginMinus + _strRight,\r\n                        _strLeft,\r\n                        _strRight,\r\n                        'font-weight',\r\n                        'word-spacing',\r\n                        flexGrow,\r\n                        flexShrink,\r\n                        flexBasis\r\n                    ];\r\n                    var affectingPropsXContentBox = [\r\n                        _strPaddingMinus + _strLeft,\r\n                        _strPaddingMinus + _strRight,\r\n                        _strBorderMinus + _strLeft + _strWidth,\r\n                        _strBorderMinus + _strRight + _strWidth\r\n                    ];\r\n                    var affectingPropsY = [\r\n                        _strHeight,\r\n                        _strMinMinus + _strHeight,\r\n                        _strMaxMinus + _strHeight,\r\n                        _strMarginMinus + _strTop,\r\n                        _strMarginMinus + _strBottom,\r\n                        _strTop,\r\n                        _strBottom,\r\n                        'line-height',\r\n                        flexGrow,\r\n                        flexShrink,\r\n                        flexBasis\r\n                    ];\r\n                    var affectingPropsYContentBox = [\r\n                        _strPaddingMinus + _strTop,\r\n                        _strPaddingMinus + _strBottom,\r\n                        _strBorderMinus + _strTop + _strWidth,\r\n                        _strBorderMinus + _strBottom + _strWidth\r\n                    ];\r\n                    var _strS = 's';\r\n                    var _strVS = 'v-s';\r\n                    var checkX = _overflowBehaviorCache.x === _strS || _overflowBehaviorCache.x === _strVS;\r\n                    var checkY = _overflowBehaviorCache.y === _strS || _overflowBehaviorCache.y === _strVS;\r\n                    var sizeIsAffected = false;\r\n                    var checkPropertyName = function (arr, name) {\r\n                        for (var i = 0; i < arr[LEXICON.l]; i++) {\r\n                            if (arr[i] === name)\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n\r\n                    if (checkY) {\r\n                        sizeIsAffected = checkPropertyName(affectingPropsY, propertyName);\r\n                        if (!sizeIsAffected && !_isBorderBox)\r\n                            sizeIsAffected = checkPropertyName(affectingPropsYContentBox, propertyName);\r\n                    }\r\n                    if (checkX && !sizeIsAffected) {\r\n                        sizeIsAffected = checkPropertyName(affectingPropsX, propertyName);\r\n                        if (!sizeIsAffected && !_isBorderBox)\r\n                            sizeIsAffected = checkPropertyName(affectingPropsXContentBox, propertyName);\r\n                    }\r\n                    return sizeIsAffected;\r\n                }\r\n\r\n\r\n                //==== Update ====//\r\n\r\n                /**\r\n                 * Sets the attribute values of the viewport element to the values from the target element.\r\n                 * The value of a attribute is only set if the attribute is whitelisted.\r\n                 * @attrs attrs The array of attributes which shall be set or undefined if all whitelisted shall be set.\r\n                 */\r\n                function updateViewportAttrsFromTarget(attrs) {\r\n                    attrs = attrs || _viewportAttrsFromTarget;\r\n                    each(attrs, function (index, attr) {\r\n                        if (COMPATIBILITY.inA(attr, _viewportAttrsFromTarget) > -1) {\r\n                            var targetAttr = _targetElement.attr(attr);\r\n                            if (type(targetAttr) == TYPES.s) {\r\n                                _viewportElement.attr(attr, targetAttr);\r\n                            }\r\n                            else {\r\n                                _viewportElement.removeAttr(attr);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                /**\r\n                 * Updates the variables and size of the textarea element, and manages the scroll on new line or new character.\r\n                 */\r\n                function textareaUpdate() {\r\n                    if (!_sleeping) {\r\n                        var wrapAttrOff = !_textareaAutoWrappingCache;\r\n                        var minWidth = _viewportSize.w;\r\n                        var minHeight = _viewportSize.h;\r\n                        var css = {};\r\n                        var doMeasure = _widthAutoCache || wrapAttrOff;\r\n                        var origWidth;\r\n                        var width;\r\n                        var origHeight;\r\n                        var height;\r\n\r\n                        //reset min size\r\n                        css[_strMinMinus + _strWidth] = _strEmpty;\r\n                        css[_strMinMinus + _strHeight] = _strEmpty;\r\n\r\n                        //set width auto\r\n                        css[_strWidth] = _strAuto;\r\n                        _targetElement.css(css);\r\n\r\n                        //measure width\r\n                        origWidth = _targetElementNative[LEXICON.oW];\r\n                        width = doMeasure ? MATH.max(origWidth, _targetElementNative[LEXICON.sW] - 1) : 1;\r\n                        /*width += (_widthAutoCache ? _marginX + (!_isBorderBox ? wrapAttrOff ? 0 : _paddingX + _borderX : 0) : 0);*/\r\n\r\n                        //set measured width\r\n                        css[_strWidth] = _widthAutoCache ? _strAuto /*width*/ : _strHundredPercent;\r\n                        css[_strMinMinus + _strWidth] = _strHundredPercent;\r\n\r\n                        //set height auto\r\n                        css[_strHeight] = _strAuto;\r\n                        _targetElement.css(css);\r\n\r\n                        //measure height\r\n                        origHeight = _targetElementNative[LEXICON.oH];\r\n                        height = MATH.max(origHeight, _targetElementNative[LEXICON.sH] - 1);\r\n\r\n                        //append correct size values\r\n                        css[_strWidth] = width;\r\n                        css[_strHeight] = height;\r\n                        _textareaCoverElement.css(css);\r\n\r\n                        //apply min width / min height to prevent textarea collapsing\r\n                        css[_strMinMinus + _strWidth] = minWidth /*+ (!_isBorderBox && _widthAutoCache ? _paddingX + _borderX : 0)*/;\r\n                        css[_strMinMinus + _strHeight] = minHeight /*+ (!_isBorderBox && _heightAutoCache ? _paddingY + _borderY : 0)*/;\r\n                        _targetElement.css(css);\r\n\r\n                        return {\r\n                            _originalWidth: origWidth,\r\n                            _originalHeight: origHeight,\r\n                            _dynamicWidth: width,\r\n                            _dynamicHeight: height\r\n                        };\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Updates the plugin and DOM to the current options.\r\n                 * This method should only be called if a update is 100% required.\r\n                 * @param updateHints A objects which contains hints for this update:\r\n                 * {\r\n                 *   _hostSizeChanged : boolean,\r\n                 *   _contentSizeChanged : boolean,\r\n                 *   _force : boolean,                             == preventSwallowing\r\n                 *   _changedOptions : { },                        == preventSwallowing && preventSleep\r\n                 *  }\r\n                 */\r\n                function update(updateHints) {\r\n                    clearTimeout(_swallowedUpdateTimeout);\r\n                    updateHints = updateHints || {};\r\n                    _swallowedUpdateHints._hostSizeChanged |= updateHints._hostSizeChanged;\r\n                    _swallowedUpdateHints._contentSizeChanged |= updateHints._contentSizeChanged;\r\n                    _swallowedUpdateHints._force |= updateHints._force;\r\n\r\n                    var now = COMPATIBILITY.now();\r\n                    var hostSizeChanged = !!_swallowedUpdateHints._hostSizeChanged;\r\n                    var contentSizeChanged = !!_swallowedUpdateHints._contentSizeChanged;\r\n                    var force = !!_swallowedUpdateHints._force;\r\n                    var changedOptions = updateHints._changedOptions;\r\n                    var swallow = _swallowUpdateLag > 0 && _initialized && !_destroyed && !force && !changedOptions && (now - _lastUpdateTime) < _swallowUpdateLag && (!_heightAutoCache && !_widthAutoCache);\r\n                    var displayIsHidden;\r\n\r\n                    if (swallow)\r\n                        _swallowedUpdateTimeout = setTimeout(update, _swallowUpdateLag);\r\n\r\n                    //abort update due to:\r\n                    //destroyed\r\n                    //swallowing\r\n                    //sleeping\r\n                    //host is hidden or has false display\r\n                    if (_destroyed || swallow || (_sleeping && !changedOptions) || (_initialized && !force && (displayIsHidden = _hostElement.is(':hidden'))) || _hostElement.css('display') === 'inline')\r\n                        return;\r\n\r\n                    _lastUpdateTime = now;\r\n                    _swallowedUpdateHints = {};\r\n\r\n                    //if scrollbar styling is possible and native scrollbars aren't overlaid the scrollbar styling will be applied which hides the native scrollbars completely.\r\n                    if (_nativeScrollbarStyling && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\r\n                        //native scrollbars are hidden, so change the values to zero\r\n                        _nativeScrollbarSize.x = 0;\r\n                        _nativeScrollbarSize.y = 0;\r\n                    }\r\n                    else {\r\n                        //refresh native scrollbar size (in case of zoom)\r\n                        _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\r\n                    }\r\n\r\n                    // Scrollbar padding is needed for firefox, because firefox hides scrollbar automatically if the size of the div is too small.\r\n                    // The calculation: [scrollbar size +3 *3]\r\n                    // (+3 because of possible decoration e.g. borders, margins etc., but only if native scrollbar is NOT a overlaid scrollbar)\r\n                    // (*3 because (1)increase / (2)decrease -button and (3)resize handle)\r\n                    _nativeScrollbarMinSize = {\r\n                        x: (_nativeScrollbarSize.x + (_nativeScrollbarIsOverlaid.x ? 0 : 3)) * 3,\r\n                        y: (_nativeScrollbarSize.y + (_nativeScrollbarIsOverlaid.y ? 0 : 3)) * 3\r\n                    };\r\n\r\n                    changedOptions = changedOptions || {};\r\n                    //freezeResizeObserver(_sizeObserverElement, true);\r\n                    //freezeResizeObserver(_sizeAutoObserverElement, true);\r\n\r\n                    var checkCacheAutoForce = function () {\r\n                        return checkCache.apply(this, [].slice.call(arguments).concat([force]));\r\n                    };\r\n\r\n                    //save current scroll offset\r\n                    var currScroll = {\r\n                        x: _viewportElement[_strScrollLeft](),\r\n                        y: _viewportElement[_strScrollTop]()\r\n                    };\r\n\r\n                    var currentPreparedOptionsScrollbars = _currentPreparedOptions.scrollbars;\r\n                    var currentPreparedOptionsTextarea = _currentPreparedOptions.textarea;\r\n\r\n                    //scrollbars visibility:\r\n                    var scrollbarsVisibility = currentPreparedOptionsScrollbars.visibility;\r\n                    var scrollbarsVisibilityChanged = checkCacheAutoForce(scrollbarsVisibility, _scrollbarsVisibilityCache);\r\n\r\n                    //scrollbars autoHide:\r\n                    var scrollbarsAutoHide = currentPreparedOptionsScrollbars.autoHide;\r\n                    var scrollbarsAutoHideChanged = checkCacheAutoForce(scrollbarsAutoHide, _scrollbarsAutoHideCache);\r\n\r\n                    //scrollbars click scrolling\r\n                    var scrollbarsClickScrolling = currentPreparedOptionsScrollbars.clickScrolling;\r\n                    var scrollbarsClickScrollingChanged = checkCacheAutoForce(scrollbarsClickScrolling, _scrollbarsClickScrollingCache);\r\n\r\n                    //scrollbars drag scrolling\r\n                    var scrollbarsDragScrolling = currentPreparedOptionsScrollbars.dragScrolling;\r\n                    var scrollbarsDragScrollingChanged = checkCacheAutoForce(scrollbarsDragScrolling, _scrollbarsDragScrollingCache);\r\n\r\n                    //className\r\n                    var className = _currentPreparedOptions.className;\r\n                    var classNameChanged = checkCacheAutoForce(className, _classNameCache);\r\n\r\n                    //resize\r\n                    var resize = _currentPreparedOptions.resize;\r\n                    var resizeChanged = checkCacheAutoForce(resize, _resizeCache) && !_isBody; //body can't be resized since the window itself acts as resize possibility.\r\n\r\n                    //paddingAbsolute\r\n                    var paddingAbsolute = _currentPreparedOptions.paddingAbsolute;\r\n                    var paddingAbsoluteChanged = checkCacheAutoForce(paddingAbsolute, _paddingAbsoluteCache);\r\n\r\n                    //clipAlways\r\n                    var clipAlways = _currentPreparedOptions.clipAlways;\r\n                    var clipAlwaysChanged = checkCacheAutoForce(clipAlways, _clipAlwaysCache);\r\n\r\n                    //sizeAutoCapable\r\n                    var sizeAutoCapable = _currentPreparedOptions.sizeAutoCapable && !_isBody; //body can never be size auto, because it shall be always as big as the viewport.\r\n                    var sizeAutoCapableChanged = checkCacheAutoForce(sizeAutoCapable, _sizeAutoCapableCache);\r\n\r\n                    //showNativeScrollbars\r\n                    var ignoreOverlayScrollbarHiding = _currentPreparedOptions.nativeScrollbarsOverlaid.showNativeScrollbars;\r\n                    var ignoreOverlayScrollbarHidingChanged = checkCacheAutoForce(ignoreOverlayScrollbarHiding, _ignoreOverlayScrollbarHidingCache);\r\n\r\n                    //autoUpdate\r\n                    var autoUpdate = _currentPreparedOptions.autoUpdate;\r\n                    var autoUpdateChanged = checkCacheAutoForce(autoUpdate, _autoUpdateCache);\r\n\r\n                    //overflowBehavior\r\n                    var overflowBehavior = _currentPreparedOptions.overflowBehavior;\r\n                    var overflowBehaviorChanged = checkCacheAutoForce(overflowBehavior, _overflowBehaviorCache, force);\r\n\r\n                    //dynWidth:\r\n                    var textareaDynWidth = currentPreparedOptionsTextarea.dynWidth;\r\n                    var textareaDynWidthChanged = checkCacheAutoForce(_textareaDynWidthCache, textareaDynWidth);\r\n\r\n                    //dynHeight:\r\n                    var textareaDynHeight = currentPreparedOptionsTextarea.dynHeight;\r\n                    var textareaDynHeightChanged = checkCacheAutoForce(_textareaDynHeightCache, textareaDynHeight);\r\n\r\n                    //scrollbars visibility\r\n                    _scrollbarsAutoHideNever = scrollbarsAutoHide === 'n';\r\n                    _scrollbarsAutoHideScroll = scrollbarsAutoHide === 's';\r\n                    _scrollbarsAutoHideMove = scrollbarsAutoHide === 'm';\r\n                    _scrollbarsAutoHideLeave = scrollbarsAutoHide === 'l';\r\n\r\n                    //scrollbars autoHideDelay\r\n                    _scrollbarsAutoHideDelay = currentPreparedOptionsScrollbars.autoHideDelay;\r\n\r\n                    //old className\r\n                    _oldClassName = _classNameCache;\r\n\r\n                    //resize\r\n                    _resizeNone = resize === 'n';\r\n                    _resizeBoth = resize === 'b';\r\n                    _resizeHorizontal = resize === 'h';\r\n                    _resizeVertical = resize === 'v';\r\n\r\n                    //normalizeRTL\r\n                    _normalizeRTLCache = _currentPreparedOptions.normalizeRTL;\r\n\r\n                    //ignore overlay scrollbar hiding\r\n                    ignoreOverlayScrollbarHiding = ignoreOverlayScrollbarHiding && (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y);\r\n\r\n                    //refresh options cache\r\n                    _scrollbarsVisibilityCache = scrollbarsVisibility;\r\n                    _scrollbarsAutoHideCache = scrollbarsAutoHide;\r\n                    _scrollbarsClickScrollingCache = scrollbarsClickScrolling;\r\n                    _scrollbarsDragScrollingCache = scrollbarsDragScrolling;\r\n                    _classNameCache = className;\r\n                    _resizeCache = resize;\r\n                    _paddingAbsoluteCache = paddingAbsolute;\r\n                    _clipAlwaysCache = clipAlways;\r\n                    _sizeAutoCapableCache = sizeAutoCapable;\r\n                    _ignoreOverlayScrollbarHidingCache = ignoreOverlayScrollbarHiding;\r\n                    _autoUpdateCache = autoUpdate;\r\n                    _overflowBehaviorCache = extendDeep({}, overflowBehavior);\r\n                    _textareaDynWidthCache = textareaDynWidth;\r\n                    _textareaDynHeightCache = textareaDynHeight;\r\n                    _hasOverflowCache = _hasOverflowCache || { x: false, y: false };\r\n\r\n                    //set correct class name to the host element\r\n                    if (classNameChanged) {\r\n                        removeClass(_hostElement, _oldClassName + _strSpace + _classNameThemeNone);\r\n                        addClass(_hostElement, className !== undefined && className !== null && className.length > 0 ? className : _classNameThemeNone);\r\n                    }\r\n\r\n                    //set correct auto Update\r\n                    if (autoUpdateChanged) {\r\n                        if (autoUpdate === true || (autoUpdate === null && _autoUpdateRecommended)) {\r\n                            disconnectMutationObservers();\r\n                            autoUpdateLoop.add(_base);\r\n                        }\r\n                        else {\r\n                            autoUpdateLoop.remove(_base);\r\n                            connectMutationObservers();\r\n                        }\r\n                    }\r\n\r\n                    //activate or deactivate size auto capability\r\n                    if (sizeAutoCapableChanged) {\r\n                        if (sizeAutoCapable) {\r\n                            if (_contentGlueElement) {\r\n                                _contentGlueElement.show();\r\n                            }\r\n                            else {\r\n                                _contentGlueElement = FRAMEWORK(generateDiv(_classNameContentGlueElement));\r\n                                _paddingElement.before(_contentGlueElement);\r\n                            }\r\n                            if (_sizeAutoObserverAdded) {\r\n                                _sizeAutoObserverElement.show();\r\n                            }\r\n                            else {\r\n                                _sizeAutoObserverElement = FRAMEWORK(generateDiv(_classNameSizeAutoObserverElement));\r\n                                _sizeAutoObserverElementNative = _sizeAutoObserverElement[0];\r\n\r\n                                _contentGlueElement.before(_sizeAutoObserverElement);\r\n                                var oldSize = { w: -1, h: -1 };\r\n                                setupResizeObserver(_sizeAutoObserverElement, function () {\r\n                                    var newSize = {\r\n                                        w: _sizeAutoObserverElementNative[LEXICON.oW],\r\n                                        h: _sizeAutoObserverElementNative[LEXICON.oH]\r\n                                    };\r\n                                    if (checkCache(newSize, oldSize)) {\r\n                                        if (_initialized && (_heightAutoCache && newSize.h > 0) || (_widthAutoCache && newSize.w > 0)) {\r\n                                            update();\r\n                                        }\r\n                                        else if (_initialized && (!_heightAutoCache && newSize.h === 0) || (!_widthAutoCache && newSize.w === 0)) {\r\n                                            update();\r\n                                        }\r\n                                    }\r\n                                    oldSize = newSize;\r\n                                });\r\n                                _sizeAutoObserverAdded = true;\r\n                                //fix heightAuto detector bug if height is fixed but contentHeight is 0.\r\n                                //the probability this bug will ever happen is very very low, thats why its ok if we use calc which isn't supported in IE8.\r\n                                if (_cssCalc !== null)\r\n                                    _sizeAutoObserverElement.css(_strHeight, _cssCalc + '(100% + 1px)');\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (_sizeAutoObserverAdded)\r\n                                _sizeAutoObserverElement.hide();\r\n                            if (_contentGlueElement)\r\n                                _contentGlueElement.hide();\r\n                        }\r\n                    }\r\n\r\n                    //if force, update all resizeObservers too\r\n                    if (force) {\r\n                        _sizeObserverElement.find('*').trigger(_strScroll);\r\n                        if (_sizeAutoObserverAdded)\r\n                            _sizeAutoObserverElement.find('*').trigger(_strScroll);\r\n                    }\r\n\r\n                    //display hidden:\r\n                    displayIsHidden = displayIsHidden === undefined ? _hostElement.is(':hidden') : displayIsHidden;\r\n\r\n                    //textarea AutoWrapping:\r\n                    var textareaAutoWrapping = _isTextarea ? _targetElement.attr('wrap') !== 'off' : false;\r\n                    var textareaAutoWrappingChanged = checkCacheAutoForce(textareaAutoWrapping, _textareaAutoWrappingCache);\r\n\r\n                    //detect direction:\r\n                    var cssDirection = _hostElement.css('direction');\r\n                    var cssDirectionChanged = checkCacheAutoForce(cssDirection, _cssDirectionCache);\r\n\r\n                    //detect box-sizing:\r\n                    var boxSizing = _hostElement.css('box-sizing');\r\n                    var boxSizingChanged = checkCacheAutoForce(boxSizing, _cssBoxSizingCache);\r\n\r\n                    //detect padding:\r\n                    var padding = getTopRightBottomLeftHost(_strPaddingMinus);\r\n\r\n                    //width + height auto detecting var:\r\n                    var sizeAutoObserverElementBCRect;\r\n                    //exception occurs in IE8 sometimes (unknown exception)\r\n                    try {\r\n                        sizeAutoObserverElementBCRect = _sizeAutoObserverAdded ? _sizeAutoObserverElementNative[LEXICON.bCR]() : null;\r\n                    } catch (ex) {\r\n                        return;\r\n                    }\r\n\r\n                    _isRTL = cssDirection === 'rtl';\r\n                    _isBorderBox = (boxSizing === 'border-box');\r\n                    var isRTLLeft = _isRTL ? _strLeft : _strRight;\r\n                    var isRTLRight = _isRTL ? _strRight : _strLeft;\r\n\r\n                    //detect width auto:\r\n                    var widthAutoResizeDetection = false;\r\n                    var widthAutoObserverDetection = (_sizeAutoObserverAdded && (_hostElement.css(_strFloat) !== 'none' /*|| _isTextarea */)) ? (MATH.round(sizeAutoObserverElementBCRect.right - sizeAutoObserverElementBCRect.left) === 0) && (!paddingAbsolute ? (_hostElementNative[LEXICON.cW] - _paddingX) > 0 : true) : false;\r\n                    if (sizeAutoCapable && !widthAutoObserverDetection) {\r\n                        var tmpCurrHostWidth = _hostElementNative[LEXICON.oW];\r\n                        var tmpCurrContentGlueWidth = _contentGlueElement.css(_strWidth);\r\n                        _contentGlueElement.css(_strWidth, _strAuto);\r\n\r\n                        var tmpNewHostWidth = _hostElementNative[LEXICON.oW];\r\n                        _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\r\n                        widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\r\n                        if (!widthAutoResizeDetection) {\r\n                            _contentGlueElement.css(_strWidth, tmpCurrHostWidth + 1);\r\n                            tmpNewHostWidth = _hostElementNative[LEXICON.oW];\r\n                            _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\r\n                            widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\r\n                        }\r\n                    }\r\n                    var widthAuto = (widthAutoObserverDetection || widthAutoResizeDetection) && sizeAutoCapable && !displayIsHidden;\r\n                    var widthAutoChanged = checkCacheAutoForce(widthAuto, _widthAutoCache);\r\n                    var wasWidthAuto = !widthAuto && _widthAutoCache;\r\n\r\n                    //detect height auto:\r\n                    var heightAuto = _sizeAutoObserverAdded && sizeAutoCapable && !displayIsHidden ? (MATH.round(sizeAutoObserverElementBCRect.bottom - sizeAutoObserverElementBCRect.top) === 0) /* && (!paddingAbsolute && (_msieVersion > 9 || !_msieVersion) ? true : true) */ : false;\r\n                    var heightAutoChanged = checkCacheAutoForce(heightAuto, _heightAutoCache);\r\n                    var wasHeightAuto = !heightAuto && _heightAutoCache;\r\n\r\n                    //detect border:\r\n                    //we need the border only if border box and auto size\r\n                    var updateBorderX = (widthAuto && _isBorderBox) || !_isBorderBox;\r\n                    var updateBorderY = (heightAuto && _isBorderBox) || !_isBorderBox;\r\n                    var border = getTopRightBottomLeftHost(_strBorderMinus, '-' + _strWidth, !updateBorderX, !updateBorderY)\r\n\r\n                    //detect margin:\r\n                    var margin = getTopRightBottomLeftHost(_strMarginMinus);\r\n\r\n                    //vars to apply correct css\r\n                    var contentElementCSS = {};\r\n                    var contentGlueElementCSS = {};\r\n\r\n                    //funcs\r\n                    var getHostSize = function () {\r\n                        //has to be clientSize because offsetSize respect borders\r\n                        return {\r\n                            w: _hostElementNative[LEXICON.cW],\r\n                            h: _hostElementNative[LEXICON.cH]\r\n                        };\r\n                    };\r\n                    var getViewportSize = function () {\r\n                        //viewport size is padding container because it never has padding, margin and a border\r\n                        //determine zoom rounding error -> sometimes scrollWidth/Height is smaller than clientWidth/Height\r\n                        //if this happens add the difference to the viewportSize to compensate the rounding error\r\n                        return {\r\n                            w: _paddingElementNative[LEXICON.oW] + MATH.max(0, _contentElementNative[LEXICON.cW] - _contentElementNative[LEXICON.sW]),\r\n                            h: _paddingElementNative[LEXICON.oH] + MATH.max(0, _contentElementNative[LEXICON.cH] - _contentElementNative[LEXICON.sH])\r\n                        };\r\n                    };\r\n\r\n                    //set info for padding\r\n                    var paddingAbsoluteX = _paddingX = padding.l + padding.r;\r\n                    var paddingAbsoluteY = _paddingY = padding.t + padding.b;\r\n                    paddingAbsoluteX *= paddingAbsolute ? 1 : 0;\r\n                    paddingAbsoluteY *= paddingAbsolute ? 1 : 0;\r\n                    padding.c = checkCacheAutoForce(padding, _cssPaddingCache);\r\n\r\n                    //set info for border\r\n                    _borderX = border.l + border.r;\r\n                    _borderY = border.t + border.b;\r\n                    border.c = checkCacheAutoForce(border, _cssBorderCache);\r\n\r\n                    //set info for margin\r\n                    _marginX = margin.l + margin.r;\r\n                    _marginY = margin.t + margin.b;\r\n                    margin.c = checkCacheAutoForce(margin, _cssMarginCache);\r\n\r\n                    //refresh cache\r\n                    _textareaAutoWrappingCache = textareaAutoWrapping;\r\n                    _cssDirectionCache = cssDirection;\r\n                    _cssBoxSizingCache = boxSizing;\r\n                    _widthAutoCache = widthAuto;\r\n                    _heightAutoCache = heightAuto;\r\n                    _cssPaddingCache = padding;\r\n                    _cssBorderCache = border;\r\n                    _cssMarginCache = margin;\r\n\r\n                    //IEFix direction changed\r\n                    if (cssDirectionChanged && _sizeAutoObserverAdded)\r\n                        _sizeAutoObserverElement.css(_strFloat, isRTLRight);\r\n\r\n                    //apply padding:\r\n                    if (padding.c || cssDirectionChanged || paddingAbsoluteChanged || widthAutoChanged || heightAutoChanged || boxSizingChanged || sizeAutoCapableChanged) {\r\n                        var paddingElementCSS = {};\r\n                        var textareaCSS = {};\r\n                        var paddingValues = [padding.t, padding.r, padding.b, padding.l];\r\n\r\n                        setTopRightBottomLeft(contentGlueElementCSS, _strMarginMinus, [-padding.t, -padding.r, -padding.b, -padding.l]);\r\n                        if (paddingAbsolute) {\r\n                            setTopRightBottomLeft(paddingElementCSS, _strEmpty, paddingValues);\r\n                            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus);\r\n                        }\r\n                        else {\r\n                            setTopRightBottomLeft(paddingElementCSS, _strEmpty);\r\n                            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus, paddingValues);\r\n                        }\r\n\r\n                        _paddingElement.css(paddingElementCSS);\r\n                        _targetElement.css(textareaCSS);\r\n                    }\r\n\r\n                    //viewport size is padding container because it never has padding, margin and a border.\r\n                    _viewportSize = getViewportSize();\r\n\r\n                    //update Textarea\r\n                    var textareaSize = _isTextarea ? textareaUpdate() : false;\r\n                    var textareaSizeChanged = _isTextarea && checkCacheAutoForce(textareaSize, _textareaSizeCache);\r\n                    var textareaDynOrigSize = _isTextarea && textareaSize ? {\r\n                        w: textareaDynWidth ? textareaSize._dynamicWidth : textareaSize._originalWidth,\r\n                        h: textareaDynHeight ? textareaSize._dynamicHeight : textareaSize._originalHeight\r\n                    } : {};\r\n                    _textareaSizeCache = textareaSize;\r\n\r\n                    //fix height auto / width auto in cooperation with current padding & boxSizing behavior:\r\n                    if (heightAuto && (heightAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c)) {\r\n                        contentElementCSS[_strHeight] = _strAuto;\r\n                    }\r\n                    else if (heightAutoChanged || paddingAbsoluteChanged) {\r\n                        contentElementCSS[_strHeight] = _strHundredPercent;\r\n                    }\r\n                    if (widthAuto && (widthAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c || cssDirectionChanged)) {\r\n                        contentElementCSS[_strWidth] = _strAuto;\r\n                        contentGlueElementCSS[_strMaxMinus + _strWidth] = _strHundredPercent; //IE Fix\r\n                    }\r\n                    else if (widthAutoChanged || paddingAbsoluteChanged) {\r\n                        contentElementCSS[_strWidth] = _strHundredPercent;\r\n                        contentElementCSS[_strFloat] = _strEmpty;\r\n                        contentGlueElementCSS[_strMaxMinus + _strWidth] = _strEmpty; //IE Fix\r\n                    }\r\n                    if (widthAuto) {\r\n                        //textareaDynOrigSize.w || _strAuto :: doesnt works because applied margin will shift width\r\n                        contentGlueElementCSS[_strWidth] = _strAuto;\r\n\r\n                        contentElementCSS[_strWidth] = VENDORS._cssPropertyValue(_strWidth, 'max-content intrinsic') || _strAuto;\r\n                        contentElementCSS[_strFloat] = isRTLRight;\r\n                    }\r\n                    else {\r\n                        contentGlueElementCSS[_strWidth] = _strEmpty;\r\n                    }\r\n                    if (heightAuto) {\r\n                        //textareaDynOrigSize.h || _contentElementNative[LEXICON.cH] :: use for anti scroll jumping\r\n                        contentGlueElementCSS[_strHeight] = textareaDynOrigSize.h || _contentElementNative[LEXICON.cH];\r\n                    }\r\n                    else {\r\n                        contentGlueElementCSS[_strHeight] = _strEmpty;\r\n                    }\r\n                    if (sizeAutoCapable)\r\n                        _contentGlueElement.css(contentGlueElementCSS);\r\n                    _contentElement.css(contentElementCSS);\r\n\r\n                    //CHECKPOINT HERE ~\r\n                    contentElementCSS = {};\r\n                    contentGlueElementCSS = {};\r\n\r\n                    //if [content(host) client / scroll size, or target element direction, or content(host) max-sizes] changed, or force is true\r\n                    if (hostSizeChanged || contentSizeChanged || textareaSizeChanged || cssDirectionChanged || boxSizingChanged || paddingAbsoluteChanged || widthAutoChanged || widthAuto || heightAutoChanged || heightAuto || ignoreOverlayScrollbarHidingChanged || overflowBehaviorChanged || clipAlwaysChanged || resizeChanged || scrollbarsVisibilityChanged || scrollbarsAutoHideChanged || scrollbarsDragScrollingChanged || scrollbarsClickScrollingChanged || textareaDynWidthChanged || textareaDynHeightChanged || textareaAutoWrappingChanged) {\r\n                        var strOverflow = 'overflow';\r\n                        var strOverflowX = strOverflow + '-x';\r\n                        var strOverflowY = strOverflow + '-y';\r\n                        var strHidden = 'hidden';\r\n                        var strVisible = 'visible';\r\n\r\n                        //Reset the viewport (very important for natively overlaid scrollbars and zoom change\r\n                        //don't change the overflow prop as it is very expensive and affects performance !A LOT!\r\n                        if (!_nativeScrollbarStyling) {\r\n                            var viewportElementResetCSS = {};\r\n                            var resetXTmp = _hasOverflowCache.y && _hideOverflowCache.ys && !ignoreOverlayScrollbarHiding ? (_nativeScrollbarIsOverlaid.y ? _viewportElement.css(isRTLLeft) : -_nativeScrollbarSize.y) : 0;\r\n                            var resetBottomTmp = _hasOverflowCache.x && _hideOverflowCache.xs && !ignoreOverlayScrollbarHiding ? (_nativeScrollbarIsOverlaid.x ? _viewportElement.css(_strBottom) : -_nativeScrollbarSize.x) : 0;\r\n                            setTopRightBottomLeft(viewportElementResetCSS, _strEmpty);\r\n                            _viewportElement.css(viewportElementResetCSS);\r\n                        }\r\n\r\n                        //measure several sizes:\r\n                        var contentMeasureElement = getContentMeasureElement();\r\n                        //in Firefox content element has to have overflow hidden, else element margins aren't calculated properly, this element prevents this bug, but only if scrollbars aren't overlaid\r\n                        var contentSize = {\r\n                            //use clientSize because natively overlaidScrollbars add borders\r\n                            w: textareaDynOrigSize.w || contentMeasureElement[LEXICON.cW],\r\n                            h: textareaDynOrigSize.h || contentMeasureElement[LEXICON.cH]\r\n                        };\r\n                        var scrollSize = {\r\n                            w: contentMeasureElement[LEXICON.sW],\r\n                            h: contentMeasureElement[LEXICON.sH]\r\n                        };\r\n\r\n                        //apply the correct viewport style and measure viewport size\r\n                        if (!_nativeScrollbarStyling) {\r\n                            viewportElementResetCSS[_strBottom] = wasHeightAuto ? _strEmpty : resetBottomTmp;\r\n                            viewportElementResetCSS[isRTLLeft] = wasWidthAuto ? _strEmpty : resetXTmp;\r\n                            _viewportElement.css(viewportElementResetCSS);\r\n                        }\r\n                        _viewportSize = getViewportSize();\r\n\r\n                        //measure and correct several sizes\r\n                        var hostSize = getHostSize();\r\n                        var hostAbsoluteRectSize = {\r\n                            w: hostSize.w - _marginX - _borderX - (_isBorderBox ? 0 : _paddingX),\r\n                            h: hostSize.h - _marginY - _borderY - (_isBorderBox ? 0 : _paddingY)\r\n                        };\r\n                        var contentGlueSize = {\r\n                            //client/scrollSize + AbsolutePadding -> because padding is only applied to the paddingElement if its absolute, so you have to add it manually\r\n                            //hostSize is clientSize -> so padding should be added manually, right? FALSE! Because content glue is inside hostElement, so we don't have to worry about padding\r\n                            w: MATH.max((widthAuto ? contentSize.w : scrollSize.w) + paddingAbsoluteX, hostAbsoluteRectSize.w),\r\n                            h: MATH.max((heightAuto ? contentSize.h : scrollSize.h) + paddingAbsoluteY, hostAbsoluteRectSize.h)\r\n                        };\r\n                        contentGlueSize.c = checkCacheAutoForce(contentGlueSize, _contentGlueSizeCache);\r\n                        _contentGlueSizeCache = contentGlueSize;\r\n\r\n                        //apply correct contentGlue size\r\n                        if (sizeAutoCapable) {\r\n                            //size contentGlue correctly to make sure the element has correct size if the sizing switches to auto\r\n                            if (contentGlueSize.c || (heightAuto || widthAuto)) {\r\n                                contentGlueElementCSS[_strWidth] = contentGlueSize.w;\r\n                                contentGlueElementCSS[_strHeight] = contentGlueSize.h;\r\n\r\n                                //textarea-sizes are already calculated correctly at this point\r\n                                if (!_isTextarea) {\r\n                                    contentSize = {\r\n                                        //use clientSize because natively overlaidScrollbars add borders\r\n                                        w: contentMeasureElement[LEXICON.cW],\r\n                                        h: contentMeasureElement[LEXICON.cH]\r\n                                    };\r\n                                }\r\n                            }\r\n                            var textareaCoverCSS = {};\r\n                            var setContentGlueElementCSSfunction = function (horizontal) {\r\n                                var scrollbarVars = getScrollbarVars(horizontal);\r\n                                var wh = scrollbarVars._w_h;\r\n                                var strWH = scrollbarVars._width_height;\r\n                                var autoSize = horizontal ? widthAuto : heightAuto;\r\n                                var borderSize = horizontal ? _borderX : _borderY;\r\n                                var paddingSize = horizontal ? _paddingX : _paddingY;\r\n                                var marginSize = horizontal ? _marginX : _marginY;\r\n                                var viewportSize = _viewportSize[wh] - borderSize - marginSize - (_isBorderBox ? 0 : paddingSize);\r\n\r\n                                //make contentGlue size -1 if element is not auto sized, to make sure that a resize event happens when the element shrinks\r\n                                if (!autoSize || (!autoSize && border.c))\r\n                                    contentGlueElementCSS[strWH] = hostAbsoluteRectSize[wh] - 1;\r\n\r\n                                //if size is auto and host is smaller than size as min size, make content glue size -1 to make sure size changes will be detected (this is only needed if padding is 0)\r\n                                if (autoSize && (contentSize[wh] < viewportSize) && (horizontal && _isTextarea ? !textareaAutoWrapping : true)) {\r\n                                    if (_isTextarea)\r\n                                        textareaCoverCSS[strWH] = parseToZeroOrNumber(_textareaCoverElement.css(strWH)) - 1;\r\n                                    contentGlueElementCSS[strWH] -= 1;\r\n                                }\r\n\r\n                                //make sure content glue size is at least 1\r\n                                if (contentSize[wh] > 0)\r\n                                    contentGlueElementCSS[strWH] = MATH.max(1, contentGlueElementCSS[strWH]);\r\n                            };\r\n                            setContentGlueElementCSSfunction(true);\r\n                            setContentGlueElementCSSfunction(false);\r\n\r\n                            if (_isTextarea)\r\n                                _textareaCoverElement.css(textareaCoverCSS);\r\n                            _contentGlueElement.css(contentGlueElementCSS);\r\n                        }\r\n                        if (widthAuto)\r\n                            contentElementCSS[_strWidth] = _strHundredPercent;\r\n                        if (widthAuto && !_isBorderBox && !_mutationObserversConnected)\r\n                            contentElementCSS[_strFloat] = 'none';\r\n\r\n                        //apply and reset content style\r\n                        _contentElement.css(contentElementCSS);\r\n                        contentElementCSS = {};\r\n\r\n                        //measure again, but this time all correct sizes:\r\n                        var contentScrollSize = {\r\n                            w: contentMeasureElement[LEXICON.sW],\r\n                            h: contentMeasureElement[LEXICON.sH],\r\n                        };\r\n                        contentScrollSize.c = contentSizeChanged = checkCacheAutoForce(contentScrollSize, _contentScrollSizeCache);\r\n                        _contentScrollSizeCache = contentScrollSize;\r\n\r\n                        //refresh viewport size after correct measuring\r\n                        _viewportSize = getViewportSize();\r\n\r\n                        hostSize = getHostSize();\r\n                        hostSizeChanged = checkCacheAutoForce(hostSize, _hostSizeCache);\r\n                        _hostSizeCache = hostSize;\r\n\r\n                        var hideOverflowForceTextarea = _isTextarea && (_viewportSize.w === 0 || _viewportSize.h === 0);\r\n                        var previousOverflowAmount = _overflowAmountCache;\r\n                        var overflowBehaviorIsVS = {};\r\n                        var overflowBehaviorIsVH = {};\r\n                        var overflowBehaviorIsS = {};\r\n                        var overflowAmount = {};\r\n                        var hasOverflow = {};\r\n                        var hideOverflow = {};\r\n                        var canScroll = {};\r\n                        var viewportRect = _paddingElementNative[LEXICON.bCR]();\r\n                        var setOverflowVariables = function (horizontal) {\r\n                            var scrollbarVars = getScrollbarVars(horizontal);\r\n                            var scrollbarVarsInverted = getScrollbarVars(!horizontal);\r\n                            var xyI = scrollbarVarsInverted._x_y;\r\n                            var xy = scrollbarVars._x_y;\r\n                            var wh = scrollbarVars._w_h;\r\n                            var widthHeight = scrollbarVars._width_height;\r\n                            var scrollMax = _strScroll + scrollbarVars._Left_Top + 'Max';\r\n                            var fractionalOverflowAmount = viewportRect[widthHeight] ? MATH.abs(viewportRect[widthHeight] - _viewportSize[wh]) : 0;\r\n                            var checkFractionalOverflowAmount = previousOverflowAmount && previousOverflowAmount[xy] > 0 && _viewportElementNative[scrollMax] === 0;\r\n                            overflowBehaviorIsVS[xy] = overflowBehavior[xy] === 'v-s';\r\n                            overflowBehaviorIsVH[xy] = overflowBehavior[xy] === 'v-h';\r\n                            overflowBehaviorIsS[xy] = overflowBehavior[xy] === 's';\r\n                            overflowAmount[xy] = MATH.max(0, MATH.round((contentScrollSize[wh] - _viewportSize[wh]) * 100) / 100);\r\n                            overflowAmount[xy] *= (hideOverflowForceTextarea || (checkFractionalOverflowAmount && fractionalOverflowAmount > 0 && fractionalOverflowAmount < 1)) ? 0 : 1;\r\n                            hasOverflow[xy] = overflowAmount[xy] > 0;\r\n\r\n                            //hideOverflow:\r\n                            //x || y : true === overflow is hidden by \"overflow: scroll\" OR \"overflow: hidden\"\r\n                            //xs || ys : true === overflow is hidden by \"overflow: scroll\"\r\n                            hideOverflow[xy] = overflowBehaviorIsVS[xy] || overflowBehaviorIsVH[xy] ? (hasOverflow[xyI] && !overflowBehaviorIsVS[xyI] && !overflowBehaviorIsVH[xyI]) : hasOverflow[xy];\r\n                            hideOverflow[xy + 's'] = hideOverflow[xy] ? (overflowBehaviorIsS[xy] || overflowBehaviorIsVS[xy]) : false;\r\n\r\n                            canScroll[xy] = hasOverflow[xy] && hideOverflow[xy + 's'];\r\n                        };\r\n                        setOverflowVariables(true);\r\n                        setOverflowVariables(false);\r\n\r\n                        overflowAmount.c = checkCacheAutoForce(overflowAmount, _overflowAmountCache);\r\n                        _overflowAmountCache = overflowAmount;\r\n                        hasOverflow.c = checkCacheAutoForce(hasOverflow, _hasOverflowCache);\r\n                        _hasOverflowCache = hasOverflow;\r\n                        hideOverflow.c = checkCacheAutoForce(hideOverflow, _hideOverflowCache);\r\n                        _hideOverflowCache = hideOverflow;\r\n\r\n                        //if native scrollbar is overlay at x OR y axis, prepare DOM\r\n                        if (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y) {\r\n                            var borderDesign = 'px solid transparent';\r\n                            var contentArrangeElementCSS = {};\r\n                            var arrangeContent = {};\r\n                            var arrangeChanged = force;\r\n                            var setContentElementCSS;\r\n\r\n                            if (hasOverflow.x || hasOverflow.y) {\r\n                                arrangeContent.w = _nativeScrollbarIsOverlaid.y && hasOverflow.y ? contentScrollSize.w + _overlayScrollbarDummySize.y : _strEmpty;\r\n                                arrangeContent.h = _nativeScrollbarIsOverlaid.x && hasOverflow.x ? contentScrollSize.h + _overlayScrollbarDummySize.x : _strEmpty;\r\n                                arrangeChanged = checkCacheAutoForce(arrangeContent, _arrangeContentSizeCache);\r\n                                _arrangeContentSizeCache = arrangeContent;\r\n                            }\r\n\r\n                            if (hasOverflow.c || hideOverflow.c || contentScrollSize.c || cssDirectionChanged || widthAutoChanged || heightAutoChanged || widthAuto || heightAuto || ignoreOverlayScrollbarHidingChanged) {\r\n                                contentElementCSS[_strMarginMinus + isRTLRight] = contentElementCSS[_strBorderMinus + isRTLRight] = _strEmpty;\r\n                                setContentElementCSS = function (horizontal) {\r\n                                    var scrollbarVars = getScrollbarVars(horizontal);\r\n                                    var scrollbarVarsInverted = getScrollbarVars(!horizontal);\r\n                                    var xy = scrollbarVars._x_y;\r\n                                    var strDirection = horizontal ? _strBottom : isRTLLeft;\r\n                                    var invertedAutoSize = horizontal ? heightAuto : widthAuto;\r\n\r\n                                    if (_nativeScrollbarIsOverlaid[xy] && hasOverflow[xy] && hideOverflow[xy + 's']) {\r\n                                        contentElementCSS[_strMarginMinus + strDirection] = invertedAutoSize ? (ignoreOverlayScrollbarHiding ? _strEmpty : _overlayScrollbarDummySize[xy]) : _strEmpty;\r\n                                        contentElementCSS[_strBorderMinus + strDirection] = ((horizontal ? !invertedAutoSize : true) && !ignoreOverlayScrollbarHiding) ? (_overlayScrollbarDummySize[xy] + borderDesign) : _strEmpty;\r\n                                    }\r\n                                    else {\r\n                                        arrangeContent[scrollbarVarsInverted._w_h] =\r\n                                            contentElementCSS[_strMarginMinus + strDirection] =\r\n                                                contentElementCSS[_strBorderMinus + strDirection] = _strEmpty;\r\n                                        arrangeChanged = true;\r\n                                    }\r\n                                };\r\n\r\n                                if (_nativeScrollbarStyling) {\r\n                                    addRemoveClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible, !ignoreOverlayScrollbarHiding)\r\n                                }\r\n                                else {\r\n                                    setContentElementCSS(true);\r\n                                    setContentElementCSS(false);\r\n                                }\r\n                            }\r\n                            if (ignoreOverlayScrollbarHiding) {\r\n                                arrangeContent.w = arrangeContent.h = _strEmpty;\r\n                                arrangeChanged = true;\r\n                            }\r\n                            if (arrangeChanged && !_nativeScrollbarStyling) {\r\n                                contentArrangeElementCSS[_strWidth] = hideOverflow.y ? arrangeContent.w : _strEmpty;\r\n                                contentArrangeElementCSS[_strHeight] = hideOverflow.x ? arrangeContent.h : _strEmpty;\r\n\r\n                                if (!_contentArrangeElement) {\r\n                                    _contentArrangeElement = FRAMEWORK(generateDiv(_classNameContentArrangeElement));\r\n                                    _viewportElement.prepend(_contentArrangeElement);\r\n                                }\r\n                                _contentArrangeElement.css(contentArrangeElementCSS);\r\n                            }\r\n                            _contentElement.css(contentElementCSS);\r\n                        }\r\n\r\n                        var viewportElementCSS = {};\r\n                        var paddingElementCSS = {};\r\n                        var setViewportCSS;\r\n                        if (hostSizeChanged || hasOverflow.c || hideOverflow.c || contentScrollSize.c || overflowBehaviorChanged || boxSizingChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged || clipAlwaysChanged || heightAutoChanged) {\r\n                            viewportElementCSS[isRTLRight] = _strEmpty;\r\n                            setViewportCSS = function (horizontal) {\r\n                                var scrollbarVars = getScrollbarVars(horizontal);\r\n                                var scrollbarVarsInverted = getScrollbarVars(!horizontal);\r\n                                var xy = scrollbarVars._x_y;\r\n                                var XY = scrollbarVars._X_Y;\r\n                                var strDirection = horizontal ? _strBottom : isRTLLeft;\r\n\r\n                                var reset = function () {\r\n                                    viewportElementCSS[strDirection] = _strEmpty;\r\n                                    _contentBorderSize[scrollbarVarsInverted._w_h] = 0;\r\n                                };\r\n                                if (hasOverflow[xy] && hideOverflow[xy + 's']) {\r\n                                    viewportElementCSS[strOverflow + XY] = _strScroll;\r\n                                    if (ignoreOverlayScrollbarHiding || _nativeScrollbarStyling) {\r\n                                        reset();\r\n                                    }\r\n                                    else {\r\n                                        viewportElementCSS[strDirection] = -(_nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[xy] : _nativeScrollbarSize[xy]);\r\n                                        _contentBorderSize[scrollbarVarsInverted._w_h] = _nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[scrollbarVarsInverted._x_y] : 0;\r\n                                    }\r\n                                } else {\r\n                                    viewportElementCSS[strOverflow + XY] = _strEmpty;\r\n                                    reset();\r\n                                }\r\n                            };\r\n                            setViewportCSS(true);\r\n                            setViewportCSS(false);\r\n\r\n                            // if the scroll container is too small and if there is any overflow with no overlay scrollbar (and scrollbar styling isn't possible),\r\n                            // make viewport element greater in size (Firefox hide Scrollbars fix)\r\n                            // because firefox starts hiding scrollbars on too small elements\r\n                            // with this behavior the overflow calculation may be incorrect or the scrollbars would appear suddenly\r\n                            // https://bugzilla.mozilla.org/show_bug.cgi?id=292284\r\n                            if (!_nativeScrollbarStyling\r\n                                && (_viewportSize.h < _nativeScrollbarMinSize.x || _viewportSize.w < _nativeScrollbarMinSize.y)\r\n                                && ((hasOverflow.x && hideOverflow.x && !_nativeScrollbarIsOverlaid.x) || (hasOverflow.y && hideOverflow.y && !_nativeScrollbarIsOverlaid.y))) {\r\n                                viewportElementCSS[_strPaddingMinus + _strTop] = _nativeScrollbarMinSize.x;\r\n                                viewportElementCSS[_strMarginMinus + _strTop] = -_nativeScrollbarMinSize.x;\r\n\r\n                                viewportElementCSS[_strPaddingMinus + isRTLRight] = _nativeScrollbarMinSize.y;\r\n                                viewportElementCSS[_strMarginMinus + isRTLRight] = -_nativeScrollbarMinSize.y;\r\n                            }\r\n                            else {\r\n                                viewportElementCSS[_strPaddingMinus + _strTop] =\r\n                                    viewportElementCSS[_strMarginMinus + _strTop] =\r\n                                        viewportElementCSS[_strPaddingMinus + isRTLRight] =\r\n                                            viewportElementCSS[_strMarginMinus + isRTLRight] = _strEmpty;\r\n                            }\r\n                            viewportElementCSS[_strPaddingMinus + isRTLLeft] =\r\n                                viewportElementCSS[_strMarginMinus + isRTLLeft] = _strEmpty;\r\n\r\n                            //if there is any overflow (x OR y axis) and this overflow shall be hidden, make overflow hidden, else overflow visible\r\n                            if ((hasOverflow.x && hideOverflow.x) || (hasOverflow.y && hideOverflow.y) || hideOverflowForceTextarea) {\r\n                                //only hide if is Textarea\r\n                                if (_isTextarea && hideOverflowForceTextarea) {\r\n                                    paddingElementCSS[strOverflowX] =\r\n                                        paddingElementCSS[strOverflowY] = strHidden;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!clipAlways || (overflowBehaviorIsVH.x || overflowBehaviorIsVS.x || overflowBehaviorIsVH.y || overflowBehaviorIsVS.y)) {\r\n                                    //only un-hide if Textarea\r\n                                    if (_isTextarea) {\r\n                                        paddingElementCSS[strOverflowX] =\r\n                                            paddingElementCSS[strOverflowY] = _strEmpty;\r\n                                    }\r\n                                    viewportElementCSS[strOverflowX] =\r\n                                        viewportElementCSS[strOverflowY] = strVisible;\r\n                                }\r\n                            }\r\n\r\n                            _paddingElement.css(paddingElementCSS);\r\n                            _viewportElement.css(viewportElementCSS);\r\n                            viewportElementCSS = {};\r\n\r\n                            //force soft redraw in webkit because without the scrollbars will may appear because DOM wont be redrawn under special conditions\r\n                            if ((hasOverflow.c || boxSizingChanged || widthAutoChanged || heightAutoChanged) && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\r\n                                var elementStyle = _contentElementNative[LEXICON.s];\r\n                                var dump;\r\n                                elementStyle.webkitTransform = 'scale(1)';\r\n                                elementStyle.display = 'run-in';\r\n                                dump = _contentElementNative[LEXICON.oH];\r\n                                elementStyle.display = _strEmpty; //|| dump; //use dump to prevent it from deletion if minify\r\n                                elementStyle.webkitTransform = _strEmpty;\r\n                            }\r\n                            /*\r\n                            //force hard redraw in webkit if native overlaid scrollbars shall appear\r\n                            if (ignoreOverlayScrollbarHidingChanged && ignoreOverlayScrollbarHiding) {\r\n                                _hostElement.hide();\r\n                                var dump = _hostElementNative[LEXICON.oH];\r\n                                _hostElement.show();\r\n                            }\r\n                            */\r\n                        }\r\n\r\n                        //change to direction RTL and width auto Bugfix in Webkit\r\n                        //without this fix, the DOM still thinks the scrollbar is LTR and thus the content is shifted to the left\r\n                        contentElementCSS = {};\r\n                        if (cssDirectionChanged || widthAutoChanged || heightAutoChanged) {\r\n                            if (_isRTL && widthAuto) {\r\n                                var floatTmp = _contentElement.css(_strFloat);\r\n                                var posLeftWithoutFloat = MATH.round(_contentElement.css(_strFloat, _strEmpty).css(_strLeft, _strEmpty).position().left);\r\n                                _contentElement.css(_strFloat, floatTmp);\r\n                                var posLeftWithFloat = MATH.round(_contentElement.position().left);\r\n\r\n                                if (posLeftWithoutFloat !== posLeftWithFloat)\r\n                                    contentElementCSS[_strLeft] = posLeftWithoutFloat;\r\n                            }\r\n                            else {\r\n                                contentElementCSS[_strLeft] = _strEmpty;\r\n                            }\r\n                        }\r\n                        _contentElement.css(contentElementCSS);\r\n\r\n                        //handle scroll position\r\n                        if (_isTextarea && contentSizeChanged) {\r\n                            var textareaInfo = getTextareaInfo();\r\n                            if (textareaInfo) {\r\n                                var textareaRowsChanged = _textareaInfoCache === undefined ? true : textareaInfo._rows !== _textareaInfoCache._rows;\r\n                                var cursorRow = textareaInfo._cursorRow;\r\n                                var cursorCol = textareaInfo._cursorColumn;\r\n                                var widestRow = textareaInfo._widestRow;\r\n                                var lastRow = textareaInfo._rows;\r\n                                var lastCol = textareaInfo._columns;\r\n                                var cursorPos = textareaInfo._cursorPosition;\r\n                                var cursorMax = textareaInfo._cursorMax;\r\n                                var cursorIsLastPosition = (cursorPos >= cursorMax && _textareaHasFocus);\r\n                                var textareaScrollAmount = {\r\n                                    x: (!textareaAutoWrapping && (cursorCol === lastCol && cursorRow === widestRow)) ? _overflowAmountCache.x : -1,\r\n                                    y: (textareaAutoWrapping ? cursorIsLastPosition || textareaRowsChanged && (previousOverflowAmount ? (currScroll.y === previousOverflowAmount.y) : false) : (cursorIsLastPosition || textareaRowsChanged) && cursorRow === lastRow) ? _overflowAmountCache.y : -1\r\n                                };\r\n                                currScroll.x = textareaScrollAmount.x > -1 ? (_isRTL && _normalizeRTLCache && _rtlScrollBehavior.i ? 0 : textareaScrollAmount.x) : currScroll.x; //if inverted, scroll to 0 -> normalized this means to max scroll offset.\r\n                                currScroll.y = textareaScrollAmount.y > -1 ? textareaScrollAmount.y : currScroll.y;\r\n                            }\r\n                            _textareaInfoCache = textareaInfo;\r\n                        }\r\n                        if (_isRTL && _rtlScrollBehavior.i && _nativeScrollbarIsOverlaid.y && hasOverflow.x && _normalizeRTLCache)\r\n                            currScroll.x += _contentBorderSize.w || 0;\r\n                        if (widthAuto)\r\n                            _hostElement[_strScrollLeft](0);\r\n                        if (heightAuto)\r\n                            _hostElement[_strScrollTop](0);\r\n                        _viewportElement[_strScrollLeft](currScroll.x)[_strScrollTop](currScroll.y);\r\n\r\n                        //scrollbars management:\r\n                        var scrollbarsVisibilityVisible = scrollbarsVisibility === 'v';\r\n                        var scrollbarsVisibilityHidden = scrollbarsVisibility === 'h';\r\n                        var scrollbarsVisibilityAuto = scrollbarsVisibility === 'a';\r\n                        var refreshScrollbarsVisibility = function (showX, showY) {\r\n                            showY = showY === undefined ? showX : showY;\r\n                            refreshScrollbarAppearance(true, showX, canScroll.x)\r\n                            refreshScrollbarAppearance(false, showY, canScroll.y)\r\n                        };\r\n\r\n                        //manage class name which indicates scrollable overflow\r\n                        addRemoveClass(_hostElement, _classNameHostOverflow, hideOverflow.x || hideOverflow.y);\r\n                        addRemoveClass(_hostElement, _classNameHostOverflowX, hideOverflow.x);\r\n                        addRemoveClass(_hostElement, _classNameHostOverflowY, hideOverflow.y);\r\n\r\n                        //add or remove rtl class name for styling purposes except when its body, then the scrollbar stays\r\n                        if (cssDirectionChanged && !_isBody) {\r\n                            addRemoveClass(_hostElement, _classNameHostRTL, _isRTL);\r\n                        }\r\n\r\n                        //manage the resize feature (CSS3 resize \"polyfill\" for this plugin)\r\n                        if (_isBody)\r\n                            addClass(_hostElement, _classNameHostResizeDisabled);\r\n                        if (resizeChanged) {\r\n                            addRemoveClass(_hostElement, _classNameHostResizeDisabled, _resizeNone);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResize, !_resizeNone);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeB, _resizeBoth);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeH, _resizeHorizontal);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeV, _resizeVertical);\r\n                        }\r\n\r\n                        //manage the scrollbars general visibility + the scrollbar interactivity (unusable class name)\r\n                        if (scrollbarsVisibilityChanged || overflowBehaviorChanged || hideOverflow.c || hasOverflow.c || ignoreOverlayScrollbarHidingChanged) {\r\n                            if (ignoreOverlayScrollbarHiding) {\r\n                                if (ignoreOverlayScrollbarHidingChanged) {\r\n                                    removeClass(_hostElement, _classNameHostScrolling);\r\n                                    if (ignoreOverlayScrollbarHiding) {\r\n                                        refreshScrollbarsVisibility(false);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (scrollbarsVisibilityAuto) {\r\n                                refreshScrollbarsVisibility(canScroll.x, canScroll.y);\r\n                            }\r\n                            else if (scrollbarsVisibilityVisible) {\r\n                                refreshScrollbarsVisibility(true);\r\n                            }\r\n                            else if (scrollbarsVisibilityHidden) {\r\n                                refreshScrollbarsVisibility(false);\r\n                            }\r\n                        }\r\n\r\n                        //manage the scrollbars auto hide feature (auto hide them after specific actions)\r\n                        if (scrollbarsAutoHideChanged || ignoreOverlayScrollbarHidingChanged) {\r\n                            setupHostMouseTouchEvents(!_scrollbarsAutoHideLeave && !_scrollbarsAutoHideMove);\r\n                            refreshScrollbarsAutoHide(_scrollbarsAutoHideNever, !_scrollbarsAutoHideNever);\r\n                        }\r\n\r\n                        //manage scrollbars handle length & offset - don't remove!\r\n                        if (hostSizeChanged || overflowAmount.c || heightAutoChanged || widthAutoChanged || resizeChanged || boxSizingChanged || paddingAbsoluteChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged) {\r\n                            refreshScrollbarHandleLength(true);\r\n                            refreshScrollbarHandleOffset(true);\r\n                            refreshScrollbarHandleLength(false);\r\n                            refreshScrollbarHandleOffset(false);\r\n                        }\r\n\r\n                        //manage interactivity\r\n                        if (scrollbarsClickScrollingChanged)\r\n                            refreshScrollbarsInteractive(true, scrollbarsClickScrolling);\r\n                        if (scrollbarsDragScrollingChanged)\r\n                            refreshScrollbarsInteractive(false, scrollbarsDragScrolling);\r\n\r\n                        //callbacks:\r\n                        dispatchCallback('onDirectionChanged', {\r\n                            isRTL: _isRTL,\r\n                            dir: cssDirection\r\n                        }, cssDirectionChanged);\r\n                        dispatchCallback('onHostSizeChanged', {\r\n                            width: _hostSizeCache.w,\r\n                            height: _hostSizeCache.h\r\n                        }, hostSizeChanged);\r\n                        dispatchCallback('onContentSizeChanged', {\r\n                            width: _contentScrollSizeCache.w,\r\n                            height: _contentScrollSizeCache.h\r\n                        }, contentSizeChanged);\r\n                        dispatchCallback('onOverflowChanged', {\r\n                            x: hasOverflow.x,\r\n                            y: hasOverflow.y,\r\n                            xScrollable: hideOverflow.xs,\r\n                            yScrollable: hideOverflow.ys,\r\n                            clipped: hideOverflow.x || hideOverflow.y\r\n                        }, hasOverflow.c || hideOverflow.c);\r\n                        dispatchCallback('onOverflowAmountChanged', {\r\n                            x: overflowAmount.x,\r\n                            y: overflowAmount.y\r\n                        }, overflowAmount.c);\r\n                    }\r\n\r\n                    //fix body min size\r\n                    if (_isBody && _bodyMinSizeCache && (_hasOverflowCache.c || _bodyMinSizeCache.c)) {\r\n                        //its possible that no min size was measured until now, because the content arrange element was just added now, in this case, measure now the min size.\r\n                        if (!_bodyMinSizeCache.f)\r\n                            bodyMinSizeChanged();\r\n                        if (_nativeScrollbarIsOverlaid.y && _hasOverflowCache.x)\r\n                            _contentElement.css(_strMinMinus + _strWidth, _bodyMinSizeCache.w + _overlayScrollbarDummySize.y);\r\n                        if (_nativeScrollbarIsOverlaid.x && _hasOverflowCache.y)\r\n                            _contentElement.css(_strMinMinus + _strHeight, _bodyMinSizeCache.h + _overlayScrollbarDummySize.x);\r\n                        _bodyMinSizeCache.c = false;\r\n                    }\r\n\r\n                    if (_initialized && changedOptions.updateOnLoad) {\r\n                        updateElementsOnLoad();\r\n                    }\r\n\r\n                    //freezeResizeObserver(_sizeObserverElement, false);\r\n                    //freezeResizeObserver(_sizeAutoObserverElement, false);\r\n\r\n                    dispatchCallback('onUpdated', { forced: force });\r\n                }\r\n\r\n                /**\r\n                 * Updates the found elements of which the load event shall be handled.\r\n                 */\r\n                function updateElementsOnLoad() {\r\n                    if (!_isTextarea) {\r\n                        eachUpdateOnLoad(function (i, updateOnLoadSelector) {\r\n                            _contentElement.find(updateOnLoadSelector).each(function (i, el) {\r\n                                // if element doesn't have a updateOnLoadCallback applied\r\n                                if (COMPATIBILITY.inA(el, _updateOnLoadElms) < 0) {\r\n                                    _updateOnLoadElms.push(el);\r\n                                    FRAMEWORK(el)\r\n                                        .off(_updateOnLoadEventName, updateOnLoadCallback)\r\n                                        .on(_updateOnLoadEventName, updateOnLoadCallback);\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //==== Options ====//\r\n\r\n                /**\r\n                 * Sets new options but doesn't call the update method.\r\n                 * @param newOptions The object which contains the new options.\r\n                 * @returns {*} A object which contains the changed options.\r\n                 */\r\n                function setOptions(newOptions) {\r\n                    var validatedOpts = _pluginsOptions._validate(newOptions, _pluginsOptions._template, true, _currentOptions)\r\n\r\n                    _currentOptions = extendDeep({}, _currentOptions, validatedOpts._default);\r\n                    _currentPreparedOptions = extendDeep({}, _currentPreparedOptions, validatedOpts._prepared);\r\n\r\n                    return validatedOpts._prepared;\r\n                }\r\n\r\n\r\n                //==== Structure ====//\r\n\r\n                /**\r\n                 * Builds or destroys the wrapper and helper DOM elements.\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                /**\r\n                 * Builds or destroys the wrapper and helper DOM elements.\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                function setupStructureDOM(destroy) {\r\n                    var strParent = 'parent';\r\n                    var classNameResizeObserverHost = 'os-resize-observer-host';\r\n                    var classNameTextareaElementFull = _classNameTextareaElement + _strSpace + _classNameTextInherit;\r\n                    var textareaClass = _isTextarea ? _strSpace + _classNameTextInherit : _strEmpty;\r\n                    var adoptAttrs = _currentPreparedOptions.textarea.inheritedAttrs;\r\n                    var adoptAttrsMap = {};\r\n                    var applyAdoptedAttrs = function () {\r\n                        var applyAdoptedAttrsElm = destroy ? _targetElement : _hostElement;\r\n                        each(adoptAttrsMap, function (key, value) {\r\n                            if (type(value) == TYPES.s) {\r\n                                if (key == LEXICON.c)\r\n                                    applyAdoptedAttrsElm.addClass(value);\r\n                                else\r\n                                    applyAdoptedAttrsElm.attr(key, value);\r\n                            }\r\n                        });\r\n                    };\r\n                    var hostElementClassNames = [\r\n                        _classNameHostElement,\r\n                        _classNameHostElementForeign,\r\n                        _classNameHostTextareaElement,\r\n                        _classNameHostResizeDisabled,\r\n                        _classNameHostRTL,\r\n                        _classNameHostScrollbarHorizontalHidden,\r\n                        _classNameHostScrollbarVerticalHidden,\r\n                        _classNameHostTransition,\r\n                        _classNameHostScrolling,\r\n                        _classNameHostOverflow,\r\n                        _classNameHostOverflowX,\r\n                        _classNameHostOverflowY,\r\n                        _classNameThemeNone,\r\n                        _classNameTextareaElement,\r\n                        _classNameTextInherit,\r\n                        _classNameCache].join(_strSpace);\r\n                    var hostElementCSS = {};\r\n\r\n                    //get host element as first element, because that's the most upper element and required for the other elements\r\n                    _hostElement = _hostElement || (_isTextarea ? (_domExists ? _targetElement[strParent]()[strParent]()[strParent]()[strParent]() : FRAMEWORK(generateDiv(_classNameHostTextareaElement))) : _targetElement);\r\n                    _contentElement = _contentElement || selectOrGenerateDivByClass(_classNameContentElement + textareaClass);\r\n                    _viewportElement = _viewportElement || selectOrGenerateDivByClass(_classNameViewportElement + textareaClass);\r\n                    _paddingElement = _paddingElement || selectOrGenerateDivByClass(_classNamePaddingElement + textareaClass);\r\n                    _sizeObserverElement = _sizeObserverElement || selectOrGenerateDivByClass(classNameResizeObserverHost);\r\n                    _textareaCoverElement = _textareaCoverElement || (_isTextarea ? selectOrGenerateDivByClass(_classNameTextareaCoverElement) : undefined);\r\n\r\n                    //add this class to workaround class changing issues with UI frameworks especially Vue\r\n                    if (_domExists)\r\n                        addClass(_hostElement, _classNameHostElementForeign);\r\n\r\n                    //on destroy, remove all generated class names from the host element before collecting the adopted attributes\r\n                    //to prevent adopting generated class names\r\n                    if (destroy)\r\n                        removeClass(_hostElement, hostElementClassNames);\r\n\r\n                    //collect all adopted attributes\r\n                    adoptAttrs = type(adoptAttrs) == TYPES.s ? adoptAttrs.split(_strSpace) : adoptAttrs;\r\n                    if (COMPATIBILITY.isA(adoptAttrs) && _isTextarea) {\r\n                        each(adoptAttrs, function (i, v) {\r\n                            if (type(v) == TYPES.s) {\r\n                                adoptAttrsMap[v] = destroy ? _hostElement.attr(v) : _targetElement.attr(v);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (!destroy) {\r\n                        if (_isTextarea) {\r\n                            if (!_currentPreparedOptions.sizeAutoCapable) {\r\n                                hostElementCSS[_strWidth] = _targetElement.css(_strWidth);\r\n                                hostElementCSS[_strHeight] = _targetElement.css(_strHeight);\r\n                            }\r\n\r\n                            if (!_domExists)\r\n                                _targetElement.addClass(_classNameTextInherit).wrap(_hostElement);\r\n\r\n                            //jQuery clones elements in wrap functions, so we have to select them again\r\n                            _hostElement = _targetElement[strParent]().css(hostElementCSS);\r\n                        }\r\n\r\n                        if (!_domExists) {\r\n                            //add the correct class to the target element\r\n                            addClass(_targetElement, _isTextarea ? classNameTextareaElementFull : _classNameHostElement);\r\n\r\n                            //wrap the content into the generated elements to create the required DOM\r\n                            _hostElement.wrapInner(_contentElement)\r\n                                .wrapInner(_viewportElement)\r\n                                .wrapInner(_paddingElement)\r\n                                .prepend(_sizeObserverElement);\r\n\r\n                            //jQuery clones elements in wrap functions, so we have to select them again\r\n                            _contentElement = findFirst(_hostElement, _strDot + _classNameContentElement);\r\n                            _viewportElement = findFirst(_hostElement, _strDot + _classNameViewportElement);\r\n                            _paddingElement = findFirst(_hostElement, _strDot + _classNamePaddingElement);\r\n\r\n                            if (_isTextarea) {\r\n                                _contentElement.prepend(_textareaCoverElement);\r\n                                applyAdoptedAttrs();\r\n                            }\r\n                        }\r\n\r\n                        if (_nativeScrollbarStyling)\r\n                            addClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible);\r\n                        if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)\r\n                            addClass(_viewportElement, _classNameViewportNativeScrollbarsOverlaid);\r\n                        if (_isBody)\r\n                            addClass(_htmlElement, _classNameHTMLElement);\r\n\r\n                        _sizeObserverElementNative = _sizeObserverElement[0];\r\n                        _hostElementNative = _hostElement[0];\r\n                        _paddingElementNative = _paddingElement[0];\r\n                        _viewportElementNative = _viewportElement[0];\r\n                        _contentElementNative = _contentElement[0];\r\n\r\n                        updateViewportAttrsFromTarget();\r\n                    }\r\n                    else {\r\n                        if (_domExists && _initialized) {\r\n                            //clear size observer\r\n                            _sizeObserverElement.children().remove();\r\n\r\n                            //remove the style property and classes from already generated elements\r\n                            each([_paddingElement, _viewportElement, _contentElement, _textareaCoverElement], function (i, elm) {\r\n                                if (elm) {\r\n                                    removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\r\n                                }\r\n                            });\r\n\r\n                            //add classes to the host element which was removed previously to match the expected DOM\r\n                            addClass(_hostElement, _isTextarea ? _classNameHostTextareaElement : _classNameHostElement);\r\n                        }\r\n                        else {\r\n                            //remove size observer\r\n                            remove(_sizeObserverElement);\r\n\r\n                            //unwrap the content to restore DOM\r\n                            _contentElement.contents()\r\n                                .unwrap()\r\n                                .unwrap()\r\n                                .unwrap();\r\n\r\n                            if (_isTextarea) {\r\n                                _targetElement.unwrap();\r\n                                remove(_hostElement);\r\n                                remove(_textareaCoverElement);\r\n                                applyAdoptedAttrs();\r\n                            }\r\n                        }\r\n\r\n                        if (_isTextarea)\r\n                            _targetElement.removeAttr(LEXICON.s);\r\n\r\n                        if (_isBody)\r\n                            removeClass(_htmlElement, _classNameHTMLElement);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Adds or removes all wrapper elements interactivity events.\r\n                 * @param destroy Indicates whether the Events shall be added or removed.\r\n                 */\r\n                function setupStructureEvents() {\r\n                    var textareaKeyDownRestrictedKeyCodes = [\r\n                        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123,    //F1 to F12\r\n                        33, 34,                                                   //page up, page down\r\n                        37, 38, 39, 40,                                           //left, up, right, down arrows\r\n                        16, 17, 18, 19, 20, 144                                   //Shift, Ctrl, Alt, Pause, CapsLock, NumLock\r\n                    ];\r\n                    var textareaKeyDownKeyCodesList = [];\r\n                    var textareaUpdateIntervalID;\r\n                    var scrollStopTimeoutId;\r\n                    var scrollStopDelay = 175;\r\n                    var strFocus = 'focus';\r\n\r\n                    function updateTextarea(doClearInterval) {\r\n                        textareaUpdate();\r\n                        _base.update(_strAuto);\r\n                        if (doClearInterval && _autoUpdateRecommended)\r\n                            clearInterval(textareaUpdateIntervalID);\r\n                    }\r\n                    function textareaOnScroll(event) {\r\n                        _targetElement[_strScrollLeft](_rtlScrollBehavior.i && _normalizeRTLCache ? 9999999 : 0);\r\n                        _targetElement[_strScrollTop](0);\r\n                        COMPATIBILITY.prvD(event);\r\n                        COMPATIBILITY.stpP(event);\r\n                        return false;\r\n                    }\r\n                    function textareaOnDrop(event) {\r\n                        setTimeout(function () {\r\n                            if (!_destroyed)\r\n                                updateTextarea();\r\n                        }, 50);\r\n                    }\r\n                    function textareaOnFocus() {\r\n                        _textareaHasFocus = true;\r\n                        addClass(_hostElement, strFocus);\r\n                    }\r\n                    function textareaOnFocusout() {\r\n                        _textareaHasFocus = false;\r\n                        textareaKeyDownKeyCodesList = [];\r\n                        removeClass(_hostElement, strFocus);\r\n                        updateTextarea(true);\r\n                    }\r\n                    function textareaOnKeyDown(event) {\r\n                        var keyCode = event.keyCode;\r\n\r\n                        if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\r\n                            if (!textareaKeyDownKeyCodesList[LEXICON.l]) {\r\n                                updateTextarea();\r\n                                textareaUpdateIntervalID = setInterval(updateTextarea, 1000 / 60);\r\n                            }\r\n                            if (inArray(keyCode, textareaKeyDownKeyCodesList) < 0)\r\n                                textareaKeyDownKeyCodesList.push(keyCode);\r\n                        }\r\n                    }\r\n                    function textareaOnKeyUp(event) {\r\n                        var keyCode = event.keyCode;\r\n                        var index = inArray(keyCode, textareaKeyDownKeyCodesList);\r\n\r\n                        if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\r\n                            if (index > -1)\r\n                                textareaKeyDownKeyCodesList.splice(index, 1);\r\n                            if (!textareaKeyDownKeyCodesList[LEXICON.l])\r\n                                updateTextarea(true);\r\n                        }\r\n                    }\r\n                    function contentOnTransitionEnd(event) {\r\n                        if (_autoUpdateCache === true)\r\n                            return;\r\n                        event = event.originalEvent || event;\r\n                        if (isSizeAffectingCSSProperty(event.propertyName))\r\n                            _base.update(_strAuto);\r\n                    }\r\n                    function viewportOnScroll(event) {\r\n                        if (!_sleeping) {\r\n                            if (scrollStopTimeoutId !== undefined)\r\n                                clearTimeout(scrollStopTimeoutId);\r\n                            else {\r\n                                if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                                    refreshScrollbarsAutoHide(true);\r\n\r\n                                if (!nativeOverlayScrollbarsAreActive())\r\n                                    addClass(_hostElement, _classNameHostScrolling);\r\n\r\n                                dispatchCallback('onScrollStart', event);\r\n                            }\r\n\r\n                            //if a scrollbars handle gets dragged, the mousemove event is responsible for refreshing the handle offset\r\n                            //because if CSS scroll-snap is used, the handle offset gets only refreshed on every snap point\r\n                            //this looks laggy & clunky, it looks much better if the offset refreshes with the mousemove\r\n                            if (!_scrollbarsHandlesDefineScrollPos) {\r\n                                refreshScrollbarHandleOffset(true);\r\n                                refreshScrollbarHandleOffset(false);\r\n                            }\r\n                            dispatchCallback('onScroll', event);\r\n\r\n                            scrollStopTimeoutId = setTimeout(function () {\r\n                                if (!_destroyed) {\r\n                                    //OnScrollStop:\r\n                                    clearTimeout(scrollStopTimeoutId);\r\n                                    scrollStopTimeoutId = undefined;\r\n\r\n                                    if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                                        refreshScrollbarsAutoHide(false);\r\n\r\n                                    if (!nativeOverlayScrollbarsAreActive())\r\n                                        removeClass(_hostElement, _classNameHostScrolling);\r\n\r\n                                    dispatchCallback('onScrollStop', event);\r\n                                }\r\n                            }, scrollStopDelay);\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (_isTextarea) {\r\n                        if (_msieVersion > 9 || !_autoUpdateRecommended) {\r\n                            addDestroyEventListener(_targetElement, 'input', updateTextarea);\r\n                        }\r\n                        else {\r\n                            addDestroyEventListener(_targetElement,\r\n                                [_strKeyDownEvent, _strKeyUpEvent],\r\n                                [textareaOnKeyDown, textareaOnKeyUp]);\r\n                        }\r\n\r\n                        addDestroyEventListener(_targetElement,\r\n                            [_strScroll, 'drop', strFocus, strFocus + 'out'],\r\n                            [textareaOnScroll, textareaOnDrop, textareaOnFocus, textareaOnFocusout]);\r\n                    }\r\n                    else {\r\n                        addDestroyEventListener(_contentElement, _strTransitionEndEvent, contentOnTransitionEnd);\r\n                    }\r\n                    addDestroyEventListener(_viewportElement, _strScroll, viewportOnScroll, true);\r\n                }\r\n\r\n\r\n                //==== Scrollbars ====//\r\n\r\n                /**\r\n                 * Builds or destroys all scrollbar DOM elements (scrollbar, track, handle)\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                function setupScrollbarsDOM(destroy) {\r\n                    var selectOrGenerateScrollbarDOM = function (isHorizontal) {\r\n                        var scrollbarClassName = isHorizontal ? _classNameScrollbarHorizontal : _classNameScrollbarVertical;\r\n                        var scrollbar = selectOrGenerateDivByClass(_classNameScrollbar + _strSpace + scrollbarClassName, true);\r\n                        var track = selectOrGenerateDivByClass(_classNameScrollbarTrack, scrollbar);\r\n                        var handle = selectOrGenerateDivByClass(_classNameScrollbarHandle, scrollbar);\r\n\r\n                        if (!_domExists && !destroy) {\r\n                            scrollbar.append(track);\r\n                            track.append(handle);\r\n                        }\r\n\r\n                        return {\r\n                            _scrollbar: scrollbar,\r\n                            _track: track,\r\n                            _handle: handle\r\n                        };\r\n                    };\r\n                    function resetScrollbarDOM(isHorizontal) {\r\n                        var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                        var scrollbar = scrollbarVars._scrollbar;\r\n                        var track = scrollbarVars._track;\r\n                        var handle = scrollbarVars._handle;\r\n\r\n                        if (_domExists && _initialized) {\r\n                            each([scrollbar, track, handle], function (i, elm) {\r\n                                removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\r\n                            });\r\n                        }\r\n                        else {\r\n                            remove(scrollbar || selectOrGenerateScrollbarDOM(isHorizontal)._scrollbar);\r\n                        }\r\n                    }\r\n                    var horizontalElements;\r\n                    var verticalElements;\r\n\r\n                    if (!destroy) {\r\n                        horizontalElements = selectOrGenerateScrollbarDOM(true);\r\n                        verticalElements = selectOrGenerateScrollbarDOM();\r\n\r\n                        _scrollbarHorizontalElement = horizontalElements._scrollbar;\r\n                        _scrollbarHorizontalTrackElement = horizontalElements._track;\r\n                        _scrollbarHorizontalHandleElement = horizontalElements._handle;\r\n                        _scrollbarVerticalElement = verticalElements._scrollbar;\r\n                        _scrollbarVerticalTrackElement = verticalElements._track;\r\n                        _scrollbarVerticalHandleElement = verticalElements._handle;\r\n\r\n                        if (!_domExists) {\r\n                            _paddingElement.after(_scrollbarVerticalElement);\r\n                            _paddingElement.after(_scrollbarHorizontalElement);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resetScrollbarDOM(true);\r\n                        resetScrollbarDOM();\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Initializes all scrollbar interactivity events. (track and handle dragging, clicking, scrolling)\r\n                 * @param isHorizontal True if the target scrollbar is the horizontal scrollbar, false if the target scrollbar is the vertical scrollbar.\r\n                 */\r\n                function setupScrollbarEvents(isHorizontal) {\r\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                    var scrollbarVarsInfo = scrollbarVars._info;\r\n                    var insideIFrame = _windowElementNative.top !== _windowElementNative;\r\n                    var xy = scrollbarVars._x_y;\r\n                    var XY = scrollbarVars._X_Y;\r\n                    var scroll = _strScroll + scrollbarVars._Left_Top;\r\n                    var strActive = 'active';\r\n                    var strSnapHandle = 'snapHandle';\r\n                    var strClickEvent = 'click';\r\n                    var scrollDurationFactor = 1;\r\n                    var increaseDecreaseScrollAmountKeyCodes = [16, 17]; //shift, ctrl\r\n                    var trackTimeout;\r\n                    var mouseDownScroll;\r\n                    var mouseDownOffset;\r\n                    var mouseDownInvertedScale;\r\n\r\n                    function getPointerPosition(event) {\r\n                        return _msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]; //use screen coordinates in EDGE & IE because the page values are incorrect in frames.\r\n                    }\r\n                    function getPreparedScrollbarsOption(name) {\r\n                        return _currentPreparedOptions.scrollbars[name];\r\n                    }\r\n                    function increaseTrackScrollAmount() {\r\n                        scrollDurationFactor = 0.5;\r\n                    }\r\n                    function decreaseTrackScrollAmount() {\r\n                        scrollDurationFactor = 1;\r\n                    }\r\n                    function stopClickEventPropagation(event) {\r\n                        COMPATIBILITY.stpP(event);\r\n                    }\r\n                    function documentKeyDown(event) {\r\n                        if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\r\n                            increaseTrackScrollAmount();\r\n                    }\r\n                    function documentKeyUp(event) {\r\n                        if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\r\n                            decreaseTrackScrollAmount();\r\n                    }\r\n                    function onMouseTouchDownContinue(event) {\r\n                        var originalEvent = event.originalEvent || event;\r\n                        var isTouchEvent = originalEvent.touches !== undefined;\r\n                        return _sleeping || _destroyed || nativeOverlayScrollbarsAreActive() || !_scrollbarsDragScrollingCache || (isTouchEvent && !getPreparedScrollbarsOption('touchSupport')) ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\r\n                    }\r\n                    function documentDragMove(event) {\r\n                        if (onMouseTouchDownContinue(event)) {\r\n                            var trackLength = scrollbarVarsInfo._trackLength;\r\n                            var handleLength = scrollbarVarsInfo._handleLength;\r\n                            var scrollRange = scrollbarVarsInfo._maxScroll;\r\n                            var scrollRaw = (getPointerPosition(event) - mouseDownOffset) * mouseDownInvertedScale;\r\n                            var scrollDeltaPercent = scrollRaw / (trackLength - handleLength);\r\n                            var scrollDelta = (scrollRange * scrollDeltaPercent);\r\n                            scrollDelta = isFinite(scrollDelta) ? scrollDelta : 0;\r\n                            if (_isRTL && isHorizontal && !_rtlScrollBehavior.i)\r\n                                scrollDelta *= -1;\r\n\r\n                            _viewportElement[scroll](MATH.round(mouseDownScroll + scrollDelta));\r\n\r\n                            if (_scrollbarsHandlesDefineScrollPos)\r\n                                refreshScrollbarHandleOffset(isHorizontal, mouseDownScroll + scrollDelta);\r\n\r\n                            if (!_supportPassiveEvents)\r\n                                COMPATIBILITY.prvD(event);\r\n                        }\r\n                        else\r\n                            documentMouseTouchUp(event);\r\n                    }\r\n                    function documentMouseTouchUp(event) {\r\n                        event = event || event.originalEvent;\r\n\r\n                        setupResponsiveEventListener(_documentElement,\r\n                            [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent],\r\n                            [documentDragMove, documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart],\r\n                            true);\r\n                        COMPATIBILITY.rAF()(function() {\r\n                            setupResponsiveEventListener(_documentElement, strClickEvent, stopClickEventPropagation, true, { _capture: true });\r\n                        });\r\n\r\n\r\n                        if (_scrollbarsHandlesDefineScrollPos)\r\n                            refreshScrollbarHandleOffset(isHorizontal, true);\r\n\r\n                        _scrollbarsHandlesDefineScrollPos = false;\r\n                        removeClass(_bodyElement, _classNameDragging);\r\n                        removeClass(scrollbarVars._handle, strActive);\r\n                        removeClass(scrollbarVars._track, strActive);\r\n                        removeClass(scrollbarVars._scrollbar, strActive);\r\n\r\n                        mouseDownScroll = undefined;\r\n                        mouseDownOffset = undefined;\r\n                        mouseDownInvertedScale = 1;\r\n\r\n                        decreaseTrackScrollAmount();\r\n\r\n                        if (trackTimeout !== undefined) {\r\n                            _base.scrollStop();\r\n                            clearTimeout(trackTimeout);\r\n                            trackTimeout = undefined;\r\n                        }\r\n\r\n                        if (event) {\r\n                            var rect = _hostElementNative[LEXICON.bCR]();\r\n                            var mouseInsideHost = event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom;\r\n\r\n                            //if mouse is outside host element\r\n                            if (!mouseInsideHost)\r\n                                hostOnMouseLeave();\r\n\r\n                            if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                                refreshScrollbarsAutoHide(false);\r\n                        }\r\n                    }\r\n                    function onHandleMouseTouchDown(event) {\r\n                        if (onMouseTouchDownContinue(event))\r\n                            onHandleMouseTouchDownAction(event);\r\n                    }\r\n                    function onHandleMouseTouchDownAction(event) {\r\n                        mouseDownScroll = _viewportElement[scroll]();\r\n                        mouseDownScroll = isNaN(mouseDownScroll) ? 0 : mouseDownScroll;\r\n                        if (_isRTL && isHorizontal && !_rtlScrollBehavior.n || !_isRTL)\r\n                            mouseDownScroll = mouseDownScroll < 0 ? 0 : mouseDownScroll;\r\n\r\n                        mouseDownInvertedScale = getHostElementInvertedScale()[xy];\r\n                        mouseDownOffset = getPointerPosition(event);\r\n\r\n                        _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\r\n                        addClass(_bodyElement, _classNameDragging);\r\n                        addClass(scrollbarVars._handle, strActive);\r\n                        addClass(scrollbarVars._scrollbar, strActive);\r\n\r\n                        setupResponsiveEventListener(_documentElement,\r\n                            [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strSelectStartEvent],\r\n                            [documentDragMove, documentMouseTouchUp, documentOnSelectStart]);\r\n                        COMPATIBILITY.rAF()(function() {\r\n                            setupResponsiveEventListener(_documentElement, strClickEvent, stopClickEventPropagation, false, { _capture: true });\r\n                        });\r\n\r\n\r\n                        if (_msieVersion || !_documentMixed)\r\n                            COMPATIBILITY.prvD(event);\r\n                        COMPATIBILITY.stpP(event);\r\n                    }\r\n                    function onTrackMouseTouchDown(event) {\r\n                        if (onMouseTouchDownContinue(event)) {\r\n                            var handleToViewportRatio = scrollbarVars._info._handleLength / Math.round(MATH.min(1, _viewportSize[scrollbarVars._w_h] / _contentScrollSizeCache[scrollbarVars._w_h]) * scrollbarVars._info._trackLength);\r\n                            var scrollDistance = MATH.round(_viewportSize[scrollbarVars._w_h] * handleToViewportRatio);\r\n                            var scrollBaseDuration = 270 * handleToViewportRatio;\r\n                            var scrollFirstIterationDelay = 400 * handleToViewportRatio;\r\n                            var trackOffset = scrollbarVars._track.offset()[scrollbarVars._left_top];\r\n                            var ctrlKey = event.ctrlKey;\r\n                            var instantScroll = event.shiftKey;\r\n                            var instantScrollTransition = instantScroll && ctrlKey;\r\n                            var isFirstIteration = true;\r\n                            var easing = 'linear';\r\n                            var decreaseScroll;\r\n                            var finishedCondition;\r\n                            var scrollActionFinsished = function (transition) {\r\n                                if (_scrollbarsHandlesDefineScrollPos)\r\n                                    refreshScrollbarHandleOffset(isHorizontal, transition);\r\n                            };\r\n                            var scrollActionInstantFinished = function () {\r\n                                scrollActionFinsished();\r\n                                onHandleMouseTouchDownAction(event);\r\n                            };\r\n                            var scrollAction = function () {\r\n                                if (!_destroyed) {\r\n                                    var mouseOffset = (mouseDownOffset - trackOffset) * mouseDownInvertedScale;\r\n                                    var handleOffset = scrollbarVarsInfo._handleOffset;\r\n                                    var trackLength = scrollbarVarsInfo._trackLength;\r\n                                    var handleLength = scrollbarVarsInfo._handleLength;\r\n                                    var scrollRange = scrollbarVarsInfo._maxScroll;\r\n                                    var currScroll = scrollbarVarsInfo._currentScroll;\r\n                                    var scrollDuration = scrollBaseDuration * scrollDurationFactor;\r\n                                    var timeoutDelay = isFirstIteration ? MATH.max(scrollFirstIterationDelay, scrollDuration) : scrollDuration;\r\n                                    var instantScrollPosition = scrollRange * ((mouseOffset - (handleLength / 2)) / (trackLength - handleLength)); // 100% * positionPercent\r\n                                    var rtlIsNormal = _isRTL && isHorizontal && ((!_rtlScrollBehavior.i && !_rtlScrollBehavior.n) || _normalizeRTLCache);\r\n                                    var decreaseScrollCondition = rtlIsNormal ? handleOffset < mouseOffset : handleOffset > mouseOffset;\r\n                                    var scrollObj = {};\r\n                                    var animationObj = {\r\n                                        easing: easing,\r\n                                        step: function (now) {\r\n                                            if (_scrollbarsHandlesDefineScrollPos) {\r\n                                                _viewportElement[scroll](now); //https://github.com/jquery/jquery/issues/4340\r\n                                                refreshScrollbarHandleOffset(isHorizontal, now);\r\n                                            }\r\n                                        }\r\n                                    };\r\n                                    instantScrollPosition = isFinite(instantScrollPosition) ? instantScrollPosition : 0;\r\n                                    instantScrollPosition = _isRTL && isHorizontal && !_rtlScrollBehavior.i ? (scrollRange - instantScrollPosition) : instantScrollPosition;\r\n\r\n                                    //_base.scrollStop();\r\n\r\n                                    if (instantScroll) {\r\n                                        _viewportElement[scroll](instantScrollPosition); //scroll instantly to new position\r\n                                        if (instantScrollTransition) {\r\n                                            //get the scroll position after instant scroll (in case CSS Snap Points are used) to get the correct snapped scroll position\r\n                                            //and the animation stops at the correct point\r\n                                            instantScrollPosition = _viewportElement[scroll]();\r\n                                            //scroll back to the position before instant scrolling so animation can be performed\r\n                                            _viewportElement[scroll](currScroll);\r\n\r\n                                            instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.i ? (scrollRange - instantScrollPosition) : instantScrollPosition;\r\n                                            instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.n ? -instantScrollPosition : instantScrollPosition;\r\n\r\n                                            scrollObj[xy] = instantScrollPosition;\r\n                                            _base.scroll(scrollObj, extendDeep(animationObj, {\r\n                                                duration: 130,\r\n                                                complete: scrollActionInstantFinished\r\n                                            }));\r\n                                        }\r\n                                        else\r\n                                            scrollActionInstantFinished();\r\n                                    }\r\n                                    else {\r\n                                        decreaseScroll = isFirstIteration ? decreaseScrollCondition : decreaseScroll;\r\n                                        finishedCondition = rtlIsNormal\r\n                                            ? (decreaseScroll ? handleOffset + handleLength >= mouseOffset : handleOffset <= mouseOffset)\r\n                                            : (decreaseScroll ? handleOffset <= mouseOffset : handleOffset + handleLength >= mouseOffset);\r\n\r\n                                        if (finishedCondition) {\r\n                                            clearTimeout(trackTimeout);\r\n                                            _base.scrollStop();\r\n                                            trackTimeout = undefined;\r\n                                            scrollActionFinsished(true);\r\n                                        }\r\n                                        else {\r\n                                            trackTimeout = setTimeout(scrollAction, timeoutDelay);\r\n\r\n                                            scrollObj[xy] = (decreaseScroll ? '-=' : '+=') + scrollDistance;\r\n                                            _base.scroll(scrollObj, extendDeep(animationObj, {\r\n                                                duration: scrollDuration\r\n                                            }));\r\n                                        }\r\n                                        isFirstIteration = false;\r\n                                    }\r\n                                }\r\n                            };\r\n                            if (ctrlKey)\r\n                                increaseTrackScrollAmount();\r\n\r\n                            mouseDownInvertedScale = getHostElementInvertedScale()[xy];\r\n                            mouseDownOffset = COMPATIBILITY.page(event)[xy];\r\n\r\n                            _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\r\n                            addClass(_bodyElement, _classNameDragging);\r\n                            addClass(scrollbarVars._track, strActive);\r\n                            addClass(scrollbarVars._scrollbar, strActive);\r\n\r\n                            setupResponsiveEventListener(_documentElement,\r\n                                [_strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent],\r\n                                [documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart]);\r\n\r\n                            scrollAction();\r\n                            COMPATIBILITY.prvD(event);\r\n                            COMPATIBILITY.stpP(event);\r\n                        }\r\n                    }\r\n                    function onTrackMouseTouchEnter(event) {\r\n                        //make sure both scrollbars will stay visible if one scrollbar is hovered if autoHide is \"scroll\" or \"move\".\r\n                        _scrollbarsHandleHovered = true;\r\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                            refreshScrollbarsAutoHide(true);\r\n                    }\r\n                    function onTrackMouseTouchLeave(event) {\r\n                        _scrollbarsHandleHovered = false;\r\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                            refreshScrollbarsAutoHide(false);\r\n                    }\r\n                    function onScrollbarMouseTouchDown(event) {\r\n                        COMPATIBILITY.stpP(event);\r\n                    }\r\n\r\n                    addDestroyEventListener(scrollbarVars._handle,\r\n                        _strMouseTouchDownEvent,\r\n                        onHandleMouseTouchDown);\r\n                    addDestroyEventListener(scrollbarVars._track,\r\n                        [_strMouseTouchDownEvent, _strMouseEnter, _strMouseLeave],\r\n                        [onTrackMouseTouchDown, onTrackMouseTouchEnter, onTrackMouseTouchLeave]);\r\n                    addDestroyEventListener(scrollbarVars._scrollbar,\r\n                        _strMouseTouchDownEvent,\r\n                        onScrollbarMouseTouchDown);\r\n\r\n                    if (_supportTransition) {\r\n                        addDestroyEventListener(scrollbarVars._scrollbar, _strTransitionEndEvent, function (event) {\r\n                            if (event.target !== scrollbarVars._scrollbar[0])\r\n                                return;\r\n                            refreshScrollbarHandleLength(isHorizontal);\r\n                            refreshScrollbarHandleOffset(isHorizontal);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Shows or hides the given scrollbar and applied a class name which indicates if the scrollbar is scrollable or not.\r\n                 * @param isHorizontal True if the horizontal scrollbar is the target, false if the vertical scrollbar is the target.\r\n                 * @param shallBeVisible True if the scrollbar shall be shown, false if hidden.\r\n                 * @param canScroll True if the scrollbar is scrollable, false otherwise.\r\n                 */\r\n                function refreshScrollbarAppearance(isHorizontal, shallBeVisible, canScroll) {\r\n                    var scrollbarHiddenClassName = isHorizontal ? _classNameHostScrollbarHorizontalHidden : _classNameHostScrollbarVerticalHidden;\r\n                    var scrollbarElement = isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement;\r\n\r\n                    addRemoveClass(_hostElement, scrollbarHiddenClassName, !shallBeVisible);\r\n                    addRemoveClass(scrollbarElement, _classNameScrollbarUnusable, !canScroll);\r\n                }\r\n\r\n                /**\r\n                 * Autoshows / autohides both scrollbars with.\r\n                 * @param shallBeVisible True if the scrollbars shall be autoshown (only the case if they are hidden by a autohide), false if the shall be auto hidden.\r\n                 * @param delayfree True if the scrollbars shall be hidden without a delay, false or undefined otherwise.\r\n                 */\r\n                function refreshScrollbarsAutoHide(shallBeVisible, delayfree) {\r\n                    clearTimeout(_scrollbarsAutoHideTimeoutId);\r\n                    if (shallBeVisible) {\r\n                        //if(_hasOverflowCache.x && _hideOverflowCache.xs)\r\n                        removeClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\r\n                        //if(_hasOverflowCache.y && _hideOverflowCache.ys)\r\n                        removeClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\r\n                    }\r\n                    else {\r\n                        var anyActive;\r\n                        var strActive = 'active';\r\n                        var hide = function () {\r\n                            if (!_scrollbarsHandleHovered && !_destroyed) {\r\n                                anyActive = _scrollbarHorizontalHandleElement.hasClass(strActive) || _scrollbarVerticalHandleElement.hasClass(strActive);\r\n                                if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave))\r\n                                    addClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\r\n                                if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave))\r\n                                    addClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\r\n                            }\r\n                        };\r\n                        if (_scrollbarsAutoHideDelay > 0 && delayfree !== true)\r\n                            _scrollbarsAutoHideTimeoutId = setTimeout(hide, _scrollbarsAutoHideDelay);\r\n                        else\r\n                            hide();\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Refreshes the handle length of the given scrollbar.\r\n                 * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n                 */\r\n                function refreshScrollbarHandleLength(isHorizontal) {\r\n                    var handleCSS = {};\r\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                    var scrollbarVarsInfo = scrollbarVars._info;\r\n                    var digit = 1000000;\r\n                    //get and apply intended handle length\r\n                    var handleRatio = MATH.min(1, _viewportSize[scrollbarVars._w_h] / _contentScrollSizeCache[scrollbarVars._w_h]);\r\n                    handleCSS[scrollbarVars._width_height] = (MATH.floor(handleRatio * 100 * digit) / digit) + '%'; //the last * digit / digit is for flooring to the 4th digit\r\n\r\n                    if (!nativeOverlayScrollbarsAreActive())\r\n                        scrollbarVars._handle.css(handleCSS);\r\n\r\n                    //measure the handle length to respect min & max length\r\n                    scrollbarVarsInfo._handleLength = scrollbarVars._handle[0]['offset' + scrollbarVars._Width_Height];\r\n                    scrollbarVarsInfo._handleLengthRatio = handleRatio;\r\n                }\r\n\r\n                /**\r\n                 * Refreshes the handle offset of the given scrollbar.\r\n                 * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n                 * @param scrollOrTransition The scroll position of the given scrollbar axis to which the handle shall be moved or a boolean which indicates whether a transition shall be applied. If undefined or boolean if the current scroll-offset is taken. (if isHorizontal ? scrollLeft : scrollTop)\r\n                 */\r\n                function refreshScrollbarHandleOffset(isHorizontal, scrollOrTransition) {\r\n                    var transition = type(scrollOrTransition) == TYPES.b;\r\n                    var transitionDuration = 250;\r\n                    var isRTLisHorizontal = _isRTL && isHorizontal;\r\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                    var scrollbarVarsInfo = scrollbarVars._info;\r\n                    var strTranslateBrace = 'translate(';\r\n                    var strTransform = VENDORS._cssProperty('transform');\r\n                    var strTransition = VENDORS._cssProperty('transition');\r\n                    var nativeScroll = isHorizontal ? _viewportElement[_strScrollLeft]() : _viewportElement[_strScrollTop]();\r\n                    var currentScroll = scrollOrTransition === undefined || transition ? nativeScroll : scrollOrTransition;\r\n\r\n                    //measure the handle length to respect min & max length\r\n                    var handleLength = scrollbarVarsInfo._handleLength;\r\n                    var trackLength = scrollbarVars._track[0]['offset' + scrollbarVars._Width_Height];\r\n                    var handleTrackDiff = trackLength - handleLength;\r\n                    var handleCSS = {};\r\n                    var transformOffset;\r\n                    var translateValue;\r\n\r\n                    //DONT use the variable '_contentScrollSizeCache[scrollbarVars._w_h]' instead of '_viewportElement[0]['scroll' + scrollbarVars._Width_Height]'\r\n                    // because its a bit behind during the small delay when content size updates\r\n                    //(delay = mutationObserverContentLag, if its 0 then this var could be used)\r\n                    var maxScroll = (_viewportElementNative[_strScroll + scrollbarVars._Width_Height] - _viewportElementNative['client' + scrollbarVars._Width_Height]) * (_rtlScrollBehavior.n && isRTLisHorizontal ? -1 : 1); //* -1 if rtl scroll max is negative\r\n                    var getScrollRatio = function (base) {\r\n                        return isNaN(base / maxScroll) ? 0 : MATH.max(0, MATH.min(1, base / maxScroll));\r\n                    };\r\n                    var getHandleOffset = function (scrollRatio) {\r\n                        var offset = handleTrackDiff * scrollRatio;\r\n                        offset = isNaN(offset) ? 0 : offset;\r\n                        offset = (isRTLisHorizontal && !_rtlScrollBehavior.i) ? (trackLength - handleLength - offset) : offset;\r\n                        offset = MATH.max(0, offset);\r\n                        return offset;\r\n                    };\r\n                    var scrollRatio = getScrollRatio(nativeScroll);\r\n                    var unsnappedScrollRatio = getScrollRatio(currentScroll);\r\n                    var handleOffset = getHandleOffset(unsnappedScrollRatio);\r\n                    var snappedHandleOffset = getHandleOffset(scrollRatio);\r\n\r\n                    scrollbarVarsInfo._maxScroll = maxScroll;\r\n                    scrollbarVarsInfo._currentScroll = nativeScroll;\r\n                    scrollbarVarsInfo._currentScrollRatio = scrollRatio;\r\n\r\n                    if (_supportTransform) {\r\n                        transformOffset = isRTLisHorizontal ? -(trackLength - handleLength - handleOffset) : handleOffset; //in px\r\n                        //transformOffset = (transformOffset / trackLength * 100) * (trackLength / handleLength); //in %\r\n                        translateValue = isHorizontal ? strTranslateBrace + transformOffset + 'px, 0)' : strTranslateBrace + '0, ' + transformOffset + 'px)';\r\n\r\n                        handleCSS[strTransform] = translateValue;\r\n\r\n                        //apply or clear up transition\r\n                        if (_supportTransition)\r\n                            handleCSS[strTransition] = transition && MATH.abs(handleOffset - scrollbarVarsInfo._handleOffset) > 1 ? getCSSTransitionString(scrollbarVars._handle) + ', ' + (strTransform + _strSpace + transitionDuration + 'ms') : _strEmpty;\r\n                    }\r\n                    else\r\n                        handleCSS[scrollbarVars._left_top] = handleOffset;\r\n\r\n\r\n                    //only apply css if offset has changed and overflow exists.\r\n                    if (!nativeOverlayScrollbarsAreActive()) {\r\n                        scrollbarVars._handle.css(handleCSS);\r\n\r\n                        //clear up transition\r\n                        if (_supportTransform && _supportTransition && transition) {\r\n                            scrollbarVars._handle.one(_strTransitionEndEvent, function () {\r\n                                if (!_destroyed)\r\n                                    scrollbarVars._handle.css(strTransition, _strEmpty);\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    scrollbarVarsInfo._handleOffset = handleOffset;\r\n                    scrollbarVarsInfo._snappedHandleOffset = snappedHandleOffset;\r\n                    scrollbarVarsInfo._trackLength = trackLength;\r\n                }\r\n\r\n                /**\r\n                 * Refreshes the interactivity of the given scrollbar element.\r\n                 * @param isTrack True if the track element is the target, false if the handle element is the target.\r\n                 * @param value True for interactivity false for no interactivity.\r\n                 */\r\n                function refreshScrollbarsInteractive(isTrack, value) {\r\n                    var action = value ? 'removeClass' : 'addClass';\r\n                    var element1 = isTrack ? _scrollbarHorizontalTrackElement : _scrollbarHorizontalHandleElement;\r\n                    var element2 = isTrack ? _scrollbarVerticalTrackElement : _scrollbarVerticalHandleElement;\r\n                    var className = isTrack ? _classNameScrollbarTrackOff : _classNameScrollbarHandleOff;\r\n\r\n                    element1[action](className);\r\n                    element2[action](className);\r\n                }\r\n\r\n                /**\r\n                 * Returns a object which is used for fast access for specific variables.\r\n                 * @param isHorizontal True if the horizontal scrollbar vars shall be accessed, false if the vertical scrollbar vars shall be accessed.\r\n                 * @returns {{wh: string, WH: string, lt: string, _wh: string, _lt: string, t: *, h: *, c: {}, s: *}}\r\n                 */\r\n                function getScrollbarVars(isHorizontal) {\r\n                    return {\r\n                        _width_height: isHorizontal ? _strWidth : _strHeight,\r\n                        _Width_Height: isHorizontal ? 'Width' : 'Height',\r\n                        _left_top: isHorizontal ? _strLeft : _strTop,\r\n                        _Left_Top: isHorizontal ? 'Left' : 'Top',\r\n                        _x_y: isHorizontal ? _strX : _strY,\r\n                        _X_Y: isHorizontal ? 'X' : 'Y',\r\n                        _w_h: isHorizontal ? 'w' : 'h',\r\n                        _l_t: isHorizontal ? 'l' : 't',\r\n                        _track: isHorizontal ? _scrollbarHorizontalTrackElement : _scrollbarVerticalTrackElement,\r\n                        _handle: isHorizontal ? _scrollbarHorizontalHandleElement : _scrollbarVerticalHandleElement,\r\n                        _scrollbar: isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement,\r\n                        _info: isHorizontal ? _scrollHorizontalInfo : _scrollVerticalInfo\r\n                    };\r\n                }\r\n\r\n\r\n                //==== Scrollbar Corner ====//\r\n\r\n                /**\r\n                 * Builds or destroys the scrollbar corner DOM element.\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                function setupScrollbarCornerDOM(destroy) {\r\n                    _scrollbarCornerElement = _scrollbarCornerElement || selectOrGenerateDivByClass(_classNameScrollbarCorner, true);\r\n\r\n                    if (!destroy) {\r\n                        if (!_domExists) {\r\n                            _hostElement.append(_scrollbarCornerElement);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (_domExists && _initialized) {\r\n                            removeClass(_scrollbarCornerElement.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\r\n                        }\r\n                        else {\r\n                            remove(_scrollbarCornerElement);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Initializes all scrollbar corner interactivity events.\r\n                 */\r\n                function setupScrollbarCornerEvents() {\r\n                    var insideIFrame = _windowElementNative.top !== _windowElementNative;\r\n                    var mouseDownPosition = {};\r\n                    var mouseDownSize = {};\r\n                    var mouseDownInvertedScale = {};\r\n                    var reconnectMutationObserver;\r\n\r\n                    function documentDragMove(event) {\r\n                        if (onMouseTouchDownContinue(event)) {\r\n                            var pageOffset = getCoordinates(event);\r\n                            var hostElementCSS = {};\r\n                            if (_resizeHorizontal || _resizeBoth)\r\n                                hostElementCSS[_strWidth] = (mouseDownSize.w + (pageOffset.x - mouseDownPosition.x) * mouseDownInvertedScale.x);\r\n                            if (_resizeVertical || _resizeBoth)\r\n                                hostElementCSS[_strHeight] = (mouseDownSize.h + (pageOffset.y - mouseDownPosition.y) * mouseDownInvertedScale.y);\r\n                            _hostElement.css(hostElementCSS);\r\n                            COMPATIBILITY.stpP(event);\r\n                        }\r\n                        else {\r\n                            documentMouseTouchUp(event);\r\n                        }\r\n                    }\r\n                    function documentMouseTouchUp(event) {\r\n                        var eventIsTrusted = event !== undefined;\r\n\r\n                        setupResponsiveEventListener(_documentElement,\r\n                            [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent],\r\n                            [documentOnSelectStart, documentDragMove, documentMouseTouchUp],\r\n                            true);\r\n\r\n                        removeClass(_bodyElement, _classNameDragging);\r\n                        if (_scrollbarCornerElement.releaseCapture)\r\n                            _scrollbarCornerElement.releaseCapture();\r\n\r\n                        if (eventIsTrusted) {\r\n                            if (reconnectMutationObserver)\r\n                                connectMutationObservers();\r\n                            _base.update(_strAuto);\r\n                        }\r\n                        reconnectMutationObserver = false;\r\n                    }\r\n                    function onMouseTouchDownContinue(event) {\r\n                        var originalEvent = event.originalEvent || event;\r\n                        var isTouchEvent = originalEvent.touches !== undefined;\r\n                        return _sleeping || _destroyed ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\r\n                    }\r\n                    function getCoordinates(event) {\r\n                        return _msieVersion && insideIFrame ? { x: event.screenX, y: event.screenY } : COMPATIBILITY.page(event);\r\n                    }\r\n\r\n                    addDestroyEventListener(_scrollbarCornerElement, _strMouseTouchDownEvent, function (event) {\r\n                        if (onMouseTouchDownContinue(event) && !_resizeNone) {\r\n                            if (_mutationObserversConnected) {\r\n                                reconnectMutationObserver = true;\r\n                                disconnectMutationObservers();\r\n                            }\r\n\r\n                            mouseDownPosition = getCoordinates(event);\r\n\r\n                            mouseDownSize.w = _hostElementNative[LEXICON.oW] - (!_isBorderBox ? _paddingX : 0);\r\n                            mouseDownSize.h = _hostElementNative[LEXICON.oH] - (!_isBorderBox ? _paddingY : 0);\r\n                            mouseDownInvertedScale = getHostElementInvertedScale();\r\n\r\n                            setupResponsiveEventListener(_documentElement,\r\n                                [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent],\r\n                                [documentOnSelectStart, documentDragMove, documentMouseTouchUp]);\r\n\r\n                            addClass(_bodyElement, _classNameDragging);\r\n                            if (_scrollbarCornerElement.setCapture)\r\n                                _scrollbarCornerElement.setCapture();\r\n\r\n                            COMPATIBILITY.prvD(event);\r\n                            COMPATIBILITY.stpP(event);\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n                //==== Utils ====//\r\n\r\n                /**\r\n                 * Calls the callback with the given name. The Context of this callback is always _base (this).\r\n                 * @param name The name of the target which shall be called.\r\n                 * @param args The args with which the callback shall be called.\r\n                 * @param dependent Boolean which decides whether the callback shall be fired, undefined is like a \"true\" value.\r\n                 */\r\n                function dispatchCallback(name, args, dependent) {\r\n                    if (dependent === false)\r\n                        return;\r\n                    if (_initialized) {\r\n                        var callback = _currentPreparedOptions.callbacks[name];\r\n                        var extensionOnName = name;\r\n                        var ext;\r\n\r\n                        if (extensionOnName.substr(0, 2) === 'on')\r\n                            extensionOnName = extensionOnName.substr(2, 1).toLowerCase() + extensionOnName.substr(3);\r\n\r\n                        if (type(callback) == TYPES.f)\r\n                            callback.call(_base, args);\r\n\r\n                        each(_extensions, function () {\r\n                            ext = this;\r\n                            if (type(ext.on) == TYPES.f)\r\n                                ext.on(extensionOnName, args);\r\n                        });\r\n                    }\r\n                    else if (!_destroyed)\r\n                        _callbacksInitQeueue.push({ n: name, a: args });\r\n                }\r\n\r\n                /**\r\n                 * Sets the \"top, right, bottom, left\" properties, with a given prefix, of the given css object.\r\n                 * @param targetCSSObject The css object to which the values shall be applied.\r\n                 * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n                 * @param values A array of values which shall be applied to the \"top, right, bottom, left\" -properties. The array order is [top, right, bottom, left].\r\n                 * If this argument is undefined the value '' (empty string) will be applied to all properties.\r\n                 */\r\n                function setTopRightBottomLeft(targetCSSObject, prefix, values) {\r\n                    prefix = prefix || _strEmpty;\r\n                    values = values || [_strEmpty, _strEmpty, _strEmpty, _strEmpty];\r\n\r\n                    targetCSSObject[prefix + _strTop] = values[0];\r\n                    targetCSSObject[prefix + _strRight] = values[1];\r\n                    targetCSSObject[prefix + _strBottom] = values[2];\r\n                    targetCSSObject[prefix + _strLeft] = values[3];\r\n                }\r\n\r\n                /**\r\n                 * Gets the \"top, right, bottom, left\" CSS properties of the CSS property with the given prefix from the host element.\r\n                 * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n                 * @param suffix The suffix of the \"top, right, bottom, left\" css properties. (example: 'border-' is a valid prefix with '-width' is a valid suffix)\r\n                 * @param zeroX True if the x axis shall be 0.\r\n                 * @param zeroY True if the y axis shall be 0.\r\n                 * @returns {{}} The object which contains the numbers of the read CSS properties.\r\n                 */\r\n                function getTopRightBottomLeftHost(prefix, suffix, zeroX, zeroY) {\r\n                    suffix = suffix || _strEmpty;\r\n                    prefix = prefix || _strEmpty;\r\n                    return {\r\n                        t: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strTop + suffix)),\r\n                        r: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strRight + suffix)),\r\n                        b: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strBottom + suffix)),\r\n                        l: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strLeft + suffix))\r\n                    };\r\n                }\r\n\r\n                /**\r\n                 * Returns the computed CSS transition string from the given element.\r\n                 * @param element The element from which the transition string shall be returned.\r\n                 * @returns {string} The CSS transition string from the given element.\r\n                 */\r\n                function getCSSTransitionString(element) {\r\n                    var transitionStr = VENDORS._cssProperty('transition');\r\n                    var assembledValue = element.css(transitionStr);\r\n                    if (assembledValue)\r\n                        return assembledValue;\r\n                    var regExpString = '\\\\s*(' + '([^,(]+(\\\\(.+?\\\\))?)+' + ')[\\\\s,]*';\r\n                    var regExpMain = new RegExp(regExpString);\r\n                    var regExpValidate = new RegExp('^(' + regExpString + ')+$');\r\n                    var properties = 'property duration timing-function delay'.split(' ');\r\n                    var result = [];\r\n                    var strResult;\r\n                    var valueArray;\r\n                    var i = 0;\r\n                    var j;\r\n                    var splitCssStyleByComma = function (str) {\r\n                        strResult = [];\r\n                        if (!str.match(regExpValidate))\r\n                            return str;\r\n                        while (str.match(regExpMain)) {\r\n                            strResult.push(RegExp.$1);\r\n                            str = str.replace(regExpMain, _strEmpty);\r\n                        }\r\n\r\n                        return strResult;\r\n                    };\r\n                    for (; i < properties[LEXICON.l]; i++) {\r\n                        valueArray = splitCssStyleByComma(element.css(transitionStr + '-' + properties[i]));\r\n                        for (j = 0; j < valueArray[LEXICON.l]; j++)\r\n                            result[j] = (result[j] ? result[j] + _strSpace : _strEmpty) + valueArray[j];\r\n                    }\r\n                    return result.join(', ');\r\n                }\r\n\r\n                /**\r\n                 * Generates a Regular Expression which matches with a string which starts with 'os-host'.\r\n                 * @param {boolean} withCurrClassNameOption The Regular Expression also matches if the string is the current ClassName option (multiple values splitted by space possible).\r\n                 * @param {boolean} withOldClassNameOption The Regular Expression also matches if the string is the old ClassName option (multiple values splitted by space possible).\r\n                 */\r\n                function createHostClassNameRegExp(withCurrClassNameOption, withOldClassNameOption) {\r\n                    var i;\r\n                    var split;\r\n                    var appendix;\r\n                    var appendClasses = function (classes, condition) {\r\n                        appendix = '';\r\n                        if (condition && typeof classes == TYPES.s) {\r\n                            split = classes.split(_strSpace);\r\n                            for (i = 0; i < split[LEXICON.l]; i++)\r\n                                appendix += '|' + split[i] + '$';\r\n                            // split[i].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') for escaping regex characters\r\n                        }\r\n                        return appendix;\r\n                    };\r\n\r\n                    return new RegExp(\r\n                        '(^' + _classNameHostElement + '([-_].+|)$)' +\r\n                        appendClasses(_classNameCache, withCurrClassNameOption) +\r\n                        appendClasses(_oldClassName, withOldClassNameOption), 'g');\r\n                }\r\n\r\n                /**\r\n                 * Calculates the host-elements inverted scale. (invertedScale = 1 / scale)\r\n                 * @returns {{x: number, y: number}} The scale of the host-element.\r\n                 */\r\n                function getHostElementInvertedScale() {\r\n                    var rect = _paddingElementNative[LEXICON.bCR]();\r\n                    return {\r\n                        x: _supportTransform ? 1 / (MATH.round(rect.width) / _paddingElementNative[LEXICON.oW]) || 1 : 1,\r\n                        y: _supportTransform ? 1 / (MATH.round(rect.height) / _paddingElementNative[LEXICON.oH]) || 1 : 1\r\n                    };\r\n                }\r\n\r\n                /**\r\n                 * Checks whether the given object is a HTMLElement.\r\n                 * @param o The object which shall be checked.\r\n                 * @returns {boolean} True the given object is a HTMLElement, false otherwise.\r\n                 */\r\n                function isHTMLElement(o) {\r\n                    var strOwnerDocument = 'ownerDocument';\r\n                    var strHTMLElement = 'HTMLElement';\r\n                    var wnd = o && o[strOwnerDocument] ? (o[strOwnerDocument].parentWindow || window) : window;\r\n                    return (\r\n                        typeof wnd[strHTMLElement] == TYPES.o ? o instanceof wnd[strHTMLElement] : //DOM2\r\n                            o && typeof o == TYPES.o && o !== null && o.nodeType === 1 && typeof o.nodeName == TYPES.s\r\n                    );\r\n                }\r\n\r\n                /**\r\n                 * Compares 2 arrays and returns the differences between them as a array.\r\n                 * @param a1 The first array which shall be compared.\r\n                 * @param a2 The second array which shall be compared.\r\n                 * @returns {Array} The differences between the two arrays.\r\n                 */\r\n                function getArrayDifferences(a1, a2) {\r\n                    var a = [];\r\n                    var diff = [];\r\n                    var i;\r\n                    var k;\r\n                    for (i = 0; i < a1.length; i++)\r\n                        a[a1[i]] = true;\r\n                    for (i = 0; i < a2.length; i++) {\r\n                        if (a[a2[i]])\r\n                            delete a[a2[i]];\r\n                        else\r\n                            a[a2[i]] = true;\r\n                    }\r\n                    for (k in a)\r\n                        diff.push(k);\r\n                    return diff;\r\n                }\r\n\r\n                /**\r\n                 * Returns Zero or the number to which the value can be parsed.\r\n                 * @param value The value which shall be parsed.\r\n                 * @param toFloat Indicates whether the number shall be parsed to a float.\r\n                 */\r\n                function parseToZeroOrNumber(value, toFloat) {\r\n                    var num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n                    return isNaN(num) ? 0 : num;\r\n                }\r\n\r\n                /**\r\n                 * Gets several information of the textarea and returns them as a object or undefined if the browser doesn't support it.\r\n                 * @returns {{cursorRow: Number, cursorCol, rows: Number, cols: number, wRow: number, pos: number, max : number}} or undefined if not supported.\r\n                 */\r\n                function getTextareaInfo() {\r\n                    //read needed values\r\n                    var textareaCursorPosition = _targetElementNative.selectionStart;\r\n                    if (textareaCursorPosition === undefined)\r\n                        return;\r\n\r\n                    var textareaValue = _targetElement.val();\r\n                    var textareaLength = textareaValue[LEXICON.l];\r\n                    var textareaRowSplit = textareaValue.split('\\n');\r\n                    var textareaLastRow = textareaRowSplit[LEXICON.l];\r\n                    var textareaCurrentCursorRowSplit = textareaValue.substr(0, textareaCursorPosition).split('\\n');\r\n                    var widestRow = 0;\r\n                    var textareaLastCol = 0;\r\n                    var cursorRow = textareaCurrentCursorRowSplit[LEXICON.l];\r\n                    var cursorCol = textareaCurrentCursorRowSplit[textareaCurrentCursorRowSplit[LEXICON.l] - 1][LEXICON.l];\r\n                    var rowCols;\r\n                    var i;\r\n\r\n                    //get widest Row and the last column of the textarea\r\n                    for (i = 0; i < textareaRowSplit[LEXICON.l]; i++) {\r\n                        rowCols = textareaRowSplit[i][LEXICON.l];\r\n                        if (rowCols > textareaLastCol) {\r\n                            widestRow = i + 1;\r\n                            textareaLastCol = rowCols;\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        _cursorRow: cursorRow, //cursorRow\r\n                        _cursorColumn: cursorCol, //cursorCol\r\n                        _rows: textareaLastRow, //rows\r\n                        _columns: textareaLastCol, //cols\r\n                        _widestRow: widestRow, //wRow\r\n                        _cursorPosition: textareaCursorPosition, //pos\r\n                        _cursorMax: textareaLength //max\r\n                    };\r\n                }\r\n\r\n                /**\r\n                 * Determines whether native overlay scrollbars are active.\r\n                 * @returns {boolean} True if native overlay scrollbars are active, false otherwise.\r\n                 */\r\n                function nativeOverlayScrollbarsAreActive() {\r\n                    return (_ignoreOverlayScrollbarHidingCache && (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y));\r\n                }\r\n\r\n                /**\r\n                 * Gets the element which is used to measure the content size.\r\n                 * @returns {*} TextareaCover if target element is textarea else the ContentElement.\r\n                 */\r\n                function getContentMeasureElement() {\r\n                    return _isTextarea ? _textareaCoverElement[0] : _contentElementNative;\r\n                }\r\n\r\n                /**\r\n                 * Generates a string which represents a HTML div with the given classes or attributes.\r\n                 * @param classesOrAttrs The class of the div as string or a object which represents the attributes of the div. (The class attribute can also be written as \"className\".)\r\n                 * @param content The content of the div as string.\r\n                 * @returns {string} The concated string which represents a HTML div and its content.\r\n                 */\r\n                function generateDiv(classesOrAttrs, content) {\r\n                    return '<div ' + (classesOrAttrs ? type(classesOrAttrs) == TYPES.s ?\r\n                                'class=\"' + classesOrAttrs + '\"' :\r\n                                (function () {\r\n                                    var key;\r\n                                    var attrs = _strEmpty;\r\n                                    if (FRAMEWORK.isPlainObject(classesOrAttrs)) {\r\n                                        for (key in classesOrAttrs)\r\n                                            attrs += (key === 'c' ? 'class' : key) + '=\"' + classesOrAttrs[key] + '\" ';\r\n                                    }\r\n                                    return attrs;\r\n                                })() :\r\n                            _strEmpty) +\r\n                        '>' +\r\n                        (content || _strEmpty) +\r\n                        '</div>';\r\n                }\r\n\r\n                /**\r\n                 * Selects or generates a div with the given class attribute.\r\n                 * @param className The class names (divided by spaces) of the div which shall be selected or generated.\r\n                 * @param selectParentOrOnlyChildren The parent element from which of the element shall be selected. (if undefined or boolean its hostElement)\r\n                 * If its a boolean it decides whether only the children of the host element shall be selected.\r\n                 * @returns {*} The generated or selected element.\r\n                 */\r\n                function selectOrGenerateDivByClass(className, selectParentOrOnlyChildren) {\r\n                    var onlyChildren = type(selectParentOrOnlyChildren) == TYPES.b;\r\n                    var selectParent = onlyChildren ? _hostElement : (selectParentOrOnlyChildren || _hostElement);\r\n\r\n                    return (_domExists && !selectParent[LEXICON.l])\r\n                        ? null\r\n                        : _domExists\r\n                            ? selectParent[onlyChildren ? 'children' : 'find'](_strDot + className.replace(/\\s/g, _strDot)).eq(0)\r\n                            : FRAMEWORK(generateDiv(className))\r\n                }\r\n\r\n                /**\r\n                 * Gets the value of the given property from the given object.\r\n                 * @param obj The object from which the property value shall be got.\r\n                 * @param path The property of which the value shall be got.\r\n                 * @returns {*} Returns the value of the searched property or undefined of the property wasn't found.\r\n                 */\r\n                function getObjectPropVal(obj, path) {\r\n                    var splits = path.split(_strDot);\r\n                    var i = 0;\r\n                    var val;\r\n                    for (; i < splits.length; i++) {\r\n                        if (!obj[LEXICON.hOP](splits[i]))\r\n                            return;\r\n                        val = obj[splits[i]];\r\n                        if (i < splits.length && type(val) == TYPES.o)\r\n                            obj = val;\r\n                    }\r\n                    return val;\r\n                }\r\n\r\n                /**\r\n                 * Sets the value of the given property from the given object.\r\n                 * @param obj The object from which the property value shall be set.\r\n                 * @param path The property of which the value shall be set.\r\n                 * @param val The value of the property which shall be set.\r\n                 */\r\n                function setObjectPropVal(obj, path, val) {\r\n                    var splits = path.split(_strDot);\r\n                    var splitsLength = splits.length;\r\n                    var i = 0;\r\n                    var extendObj = {};\r\n                    var extendObjRoot = extendObj;\r\n                    for (; i < splitsLength; i++)\r\n                        extendObj = extendObj[splits[i]] = i + 1 < splitsLength ? {} : val;\r\n                    FRAMEWORK.extend(obj, extendObjRoot, true);\r\n                }\r\n\r\n                /**\r\n                 * Runs a action for each selector inside the updateOnLoad option.\r\n                 * @param {Function} action The action for each updateOnLoad selector, the arguments the function takes is the index and the value (the selector).\r\n                 */\r\n                function eachUpdateOnLoad(action) {\r\n                    var updateOnLoad = _currentPreparedOptions.updateOnLoad;\r\n                    updateOnLoad = type(updateOnLoad) == TYPES.s ? updateOnLoad.split(_strSpace) : updateOnLoad;\r\n\r\n                    if (COMPATIBILITY.isA(updateOnLoad) && !_destroyed) {\r\n                        each(updateOnLoad, action);\r\n                    }\r\n                }\r\n\r\n\r\n                //==== Utils Cache ====//\r\n\r\n                /**\r\n                 * Compares two values or objects and returns true if they aren't equal.\r\n                 * @param current The first value or object which shall be compared.\r\n                 * @param cache The second value or object which shall be compared.\r\n                 * @param force If true the returned value is always true.\r\n                 * @returns {boolean} True if both values or objects aren't equal or force is true, false otherwise.\r\n                 */\r\n                function checkCache(current, cache, force) {\r\n                    if (force)\r\n                        return force;\r\n                    if (type(current) == TYPES.o && type(cache) == TYPES.o) {\r\n                        for (var prop in current) {\r\n                            if (prop !== 'c') {\r\n                                if (current[LEXICON.hOP](prop) && cache[LEXICON.hOP](prop)) {\r\n                                    if (checkCache(current[prop], cache[prop]))\r\n                                        return true;\r\n                                }\r\n                                else {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        return current !== cache;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n\r\n                //==== Shortcuts ====//\r\n\r\n                /**\r\n                 * jQuery extend method shortcut with a appended \"true\" as first argument.\r\n                 */\r\n                function extendDeep() {\r\n                    return FRAMEWORK.extend.apply(this, [true].concat([].slice.call(arguments)));\r\n                }\r\n\r\n                /**\r\n                 * jQuery addClass method shortcut.\r\n                 */\r\n                function addClass(el, classes) {\r\n                    return _frameworkProto.addClass.call(el, classes);\r\n                }\r\n\r\n                /**\r\n                 * jQuery removeClass method shortcut.\r\n                 */\r\n                function removeClass(el, classes) {\r\n                    return _frameworkProto.removeClass.call(el, classes);\r\n                }\r\n\r\n                /**\r\n                 * Adds or removes the given classes dependent on the boolean value. True for add, false for remove.\r\n                 */\r\n                function addRemoveClass(el, classes, doAdd) {\r\n                    return doAdd ? addClass(el, classes) : removeClass(el, classes);\r\n                }\r\n\r\n                /**\r\n                 * jQuery remove method shortcut.\r\n                 */\r\n                function remove(el) {\r\n                    return _frameworkProto.remove.call(el);\r\n                }\r\n\r\n                /**\r\n                 * Finds the first child element with the given selector of the given element.\r\n                 * @param el The root element from which the selector shall be valid.\r\n                 * @param selector The selector of the searched element.\r\n                 * @returns {*} The first element which is a child of the given element and matches the givens selector.\r\n                 */\r\n                function findFirst(el, selector) {\r\n                    return _frameworkProto.find.call(el, selector).eq(0);\r\n                }\r\n\r\n\r\n                //==== API ====//\r\n\r\n                /**\r\n                 * Puts the instance to sleep. It wont respond to any changes in the DOM and won't update. Scrollbar Interactivity is also disabled as well as the resize handle.\r\n                 * This behavior can be reset by calling the update method.\r\n                 */\r\n                _base.sleep = function () {\r\n                    _sleeping = true;\r\n                };\r\n\r\n                /**\r\n                 * Updates the plugin and DOM to the current options.\r\n                 * This method should only be called if a update is 100% required.\r\n                 * @param force True if every property shall be updated and the cache shall be ignored.\r\n                 * !INTERNAL USAGE! : force can be a string \"auto\", \"sync\" or \"zoom\" too\r\n                 * if \"auto\" then before a real update the content size and host element attributes gets checked, and if they changed only then the update method will be called.\r\n                 * if \"sync\" then the async update process (MutationObserver or UpdateLoop) gets synchronized and a corresponding update takes place if one was needed due to pending changes.\r\n                 * if \"zoom\" then a update takes place where it's assumed that content and host size changed\r\n                 * @returns {boolean|undefined}\r\n                 * If force is \"sync\" then a boolean is returned which indicates whether a update was needed due to pending changes.\r\n                 * If force is \"auto\" then a boolean is returned whether a update was needed due to attribute or size changes.\r\n                 * undefined otherwise.\r\n                 */\r\n                _base.update = function (force) {\r\n                    if (_destroyed)\r\n                        return;\r\n\r\n                    var attrsChanged;\r\n                    var contentSizeC;\r\n                    var isString = type(force) == TYPES.s;\r\n                    var doUpdateAuto;\r\n                    var mutHost;\r\n                    var mutContent;\r\n\r\n                    if (isString) {\r\n                        if (force === _strAuto) {\r\n                            attrsChanged = meaningfulAttrsChanged();\r\n                            contentSizeC = updateAutoContentSizeChanged();\r\n                            doUpdateAuto = attrsChanged || contentSizeC;\r\n                            if (doUpdateAuto) {\r\n                                update({\r\n                                    _contentSizeChanged: contentSizeC,\r\n                                    _changedOptions: _initialized ? undefined : _currentPreparedOptions\r\n                                });\r\n                            }\r\n                        }\r\n                        else if (force === _strSync) {\r\n                            if (_mutationObserversConnected) {\r\n                                mutHost = _mutationObserverHostCallback(_mutationObserverHost.takeRecords());\r\n                                mutContent = _mutationObserverContentCallback(_mutationObserverContent.takeRecords());\r\n                            }\r\n                            else {\r\n                                mutHost = _base.update(_strAuto);\r\n                            }\r\n                        }\r\n                        else if (force === 'zoom') {\r\n                            update({\r\n                                _hostSizeChanged: true,\r\n                                _contentSizeChanged: true\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        force = _sleeping || force;\r\n                        _sleeping = false;\r\n                        if (!_base.update(_strSync) || force)\r\n                            update({ _force: force });\r\n                    }\r\n\r\n                    updateElementsOnLoad();\r\n\r\n                    return doUpdateAuto || mutHost || mutContent;\r\n                };\r\n\r\n                /**\r\n                 Gets or sets the current options. The update method will be called automatically if new options were set.\r\n                 * @param newOptions If new options are given, then the new options will be set, if new options aren't given (undefined or a not a plain object) then the current options will be returned.\r\n                 * @param value If new options is a property path string, then this value will be used to set the option to which the property path string leads.\r\n                 * @returns {*}\r\n                 */\r\n                _base.options = function (newOptions, value) {\r\n                    var option = {};\r\n                    var changedOps;\r\n\r\n                    //return current options if newOptions are undefined or empty\r\n                    if (FRAMEWORK.isEmptyObject(newOptions) || !FRAMEWORK.isPlainObject(newOptions)) {\r\n                        if (type(newOptions) == TYPES.s) {\r\n                            if (arguments.length > 1) {\r\n                                setObjectPropVal(option, newOptions, value);\r\n                                changedOps = setOptions(option);\r\n                            }\r\n                            else\r\n                                return getObjectPropVal(_currentOptions, newOptions);\r\n                        }\r\n                        else\r\n                            return _currentOptions;\r\n                    }\r\n                    else {\r\n                        changedOps = setOptions(newOptions);\r\n                    }\r\n\r\n                    if (!FRAMEWORK.isEmptyObject(changedOps)) {\r\n                        update({ _changedOptions: changedOps });\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Restore the DOM, disconnects all observers, remove all resize observers and put the instance to sleep.\r\n                 */\r\n                _base.destroy = function () {\r\n                    if (_destroyed)\r\n                        return;\r\n\r\n                    //remove this instance from auto update loop\r\n                    autoUpdateLoop.remove(_base);\r\n\r\n                    //disconnect all mutation observers\r\n                    disconnectMutationObservers();\r\n\r\n                    //remove all resize observers\r\n                    setupResizeObserver(_sizeObserverElement);\r\n                    setupResizeObserver(_sizeAutoObserverElement);\r\n\r\n                    //remove all extensions\r\n                    for (var extName in _extensions)\r\n                        _base.removeExt(extName);\r\n\r\n                    //remove all 'destroy' events\r\n                    while (_destroyEvents[LEXICON.l] > 0)\r\n                        _destroyEvents.pop()();\r\n\r\n                    //remove all events from host element\r\n                    setupHostMouseTouchEvents(true);\r\n\r\n                    //remove all helper / detection elements\r\n                    if (_contentGlueElement)\r\n                        remove(_contentGlueElement);\r\n                    if (_contentArrangeElement)\r\n                        remove(_contentArrangeElement);\r\n                    if (_sizeAutoObserverAdded)\r\n                        remove(_sizeAutoObserverElement);\r\n\r\n                    //remove all generated DOM\r\n                    setupScrollbarsDOM(true);\r\n                    setupScrollbarCornerDOM(true);\r\n                    setupStructureDOM(true);\r\n\r\n                    //remove all generated image load events\r\n                    for (var i = 0; i < _updateOnLoadElms[LEXICON.l]; i++)\r\n                        FRAMEWORK(_updateOnLoadElms[i]).off(_updateOnLoadEventName, updateOnLoadCallback);\r\n                    _updateOnLoadElms = undefined;\r\n\r\n                    _destroyed = true;\r\n                    _sleeping = true;\r\n\r\n                    //remove this instance from the instances list\r\n                    INSTANCES(pluginTargetElement, 0);\r\n                    dispatchCallback('onDestroyed');\r\n\r\n                    //remove all properties and methods\r\n                    //for (var property in _base)\r\n                    //    delete _base[property];\r\n                    //_base = undefined;\r\n                };\r\n\r\n                /**\r\n                 * Scrolls to a given position or element.\r\n                 * @param coordinates\r\n                 * 1. Can be \"coordinates\" which looks like:\r\n                 *    { x : ?, y : ? } OR          Object with x and y properties\r\n                 *    { left : ?, top : ? } OR     Object with left and top properties\r\n                 *    { l : ?, t : ? } OR          Object with l and t properties\r\n                 *    [ ?, ? ] OR                  Array where the first two element are the coordinates (first is x, second is y)\r\n                 *    ?                            A single value which stays for both axis\r\n                 *    A value can be a number, a string or a calculation.\r\n                 *\r\n                 *    Operators:\r\n                 *    [NONE]  The current scroll will be overwritten by the value.\r\n                 *    '+='    The value will be added to the current scroll offset\r\n                 *    '-='    The value will be subtracted from the current scroll offset\r\n                 *    '*='    The current scroll wil be multiplicated by the value.\r\n                 *    '/='    The current scroll wil be divided by the value.\r\n                 *\r\n                 *    Units:\r\n                 *    [NONE]  The value is the final scroll amount.                   final = (value * 1)\r\n                 *    'px'    Same as none\r\n                 *    '%'     The value is dependent on the current scroll value.     final = ((currentScrollValue / 100) * value)\r\n                 *    'vw'    The value is multiplicated by the viewport width.       final = (value * viewportWidth)\r\n                 *    'vh'    The value is multiplicated by the viewport height.      final = (value * viewportHeight)\r\n                 *\r\n                 *    example final values:\r\n                 *    200, '200px', '50%', '1vw', '1vh', '+=200', '/=1vw', '*=2px', '-=5vh', '+=33%', '+= 50% - 2px', '-= 1vw - 50%'\r\n                 *\r\n                 * 2. Can be a HTML or jQuery element:\r\n                 *    The final scroll offset is the offset (without margin) of the given HTML / jQuery element.\r\n                 *\r\n                 * 3. Can be a object with a HTML or jQuery element with additional settings:\r\n                 *    {\r\n                 *      el : [HTMLElement, jQuery element],             MUST be specified, else this object isn't valid.\r\n                 *      scroll : [string, array, object],               Default value is 'always'.\r\n                 *      block : [string, array, object],                Default value is 'begin'.\r\n                 *      margin : [number, boolean, array, object]       Default value is false.\r\n                 *    }\r\n                 *\r\n                 *    Possible scroll settings are:\r\n                 *    'always'      Scrolls always.\r\n                 *    'ifneeded'    Scrolls only if the element isnt fully in view.\r\n                 *    'never'       Scrolls never.\r\n                 *\r\n                 *    Possible block settings are:\r\n                 *    'begin'   Both axis shall be docked to the \"begin\" edge. - The element will be docked to the top and left edge of the viewport.\r\n                 *    'end'     Both axis shall be docked to the \"end\" edge. - The element will be docked to the bottom and right edge of the viewport. (If direction is RTL to the bottom and left edge.)\r\n                 *    'center'  Both axis shall be docked to \"center\". - The element will be centered in the viewport.\r\n                 *    'nearest' The element will be docked to the nearest edge(s).\r\n                 *\r\n                 *    Possible margin settings are: -- The actual margin of the element wont be affect, this option affects only the final scroll offset.\r\n                 *    [BOOLEAN]                                         If true the css margin of the element will be used, if false no margin will be used.\r\n                 *    [NUMBER]                                          The margin will be used for all edges.\r\n                 *\r\n                 * @param duration The duration of the scroll animation, OR a jQuery animation configuration object.\r\n                 * @param easing The animation easing.\r\n                 * @param complete The animation complete callback.\r\n                 * @returns {{\r\n                 *   position: {x: number, y: number},\r\n                 *   ratio: {x: number, y: number},\r\n                 *   max: {x: number, y: number},\r\n                 *   handleOffset: {x: number, y: number},\r\n                 *   handleLength: {x: number, y: number},\r\n                 *   handleLengthRatio: {x: number, y: number}, t\r\n                 *   rackLength: {x: number, y: number},\r\n                 *   isRTL: boolean,\r\n                 *   isRTLNormalized: boolean\r\n                 *  }}\r\n                 */\r\n                _base.scroll = function (coordinates, duration, easing, complete) {\r\n                    if (arguments.length === 0 || coordinates === undefined) {\r\n                        var infoX = _scrollHorizontalInfo;\r\n                        var infoY = _scrollVerticalInfo;\r\n                        var normalizeInvert = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.i;\r\n                        var normalizeNegate = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.n;\r\n                        var scrollX = infoX._currentScroll;\r\n                        var scrollXRatio = infoX._currentScrollRatio;\r\n                        var maxScrollX = infoX._maxScroll;\r\n                        scrollXRatio = normalizeInvert ? 1 - scrollXRatio : scrollXRatio;\r\n                        scrollX = normalizeInvert ? maxScrollX - scrollX : scrollX;\r\n                        scrollX *= normalizeNegate ? -1 : 1;\r\n                        maxScrollX *= normalizeNegate ? -1 : 1;\r\n\r\n                        return {\r\n                            position: {\r\n                                x: scrollX,\r\n                                y: infoY._currentScroll\r\n                            },\r\n                            ratio: {\r\n                                x: scrollXRatio,\r\n                                y: infoY._currentScrollRatio\r\n                            },\r\n                            max: {\r\n                                x: maxScrollX,\r\n                                y: infoY._maxScroll\r\n                            },\r\n                            handleOffset: {\r\n                                x: infoX._handleOffset,\r\n                                y: infoY._handleOffset\r\n                            },\r\n                            handleLength: {\r\n                                x: infoX._handleLength,\r\n                                y: infoY._handleLength\r\n                            },\r\n                            handleLengthRatio: {\r\n                                x: infoX._handleLengthRatio,\r\n                                y: infoY._handleLengthRatio\r\n                            },\r\n                            trackLength: {\r\n                                x: infoX._trackLength,\r\n                                y: infoY._trackLength\r\n                            },\r\n                            snappedHandleOffset: {\r\n                                x: infoX._snappedHandleOffset,\r\n                                y: infoY._snappedHandleOffset\r\n                            },\r\n                            isRTL: _isRTL,\r\n                            isRTLNormalized: _normalizeRTLCache\r\n                        };\r\n                    }\r\n\r\n                    _base.update(_strSync);\r\n\r\n                    var normalizeRTL = _normalizeRTLCache;\r\n                    var coordinatesXAxisProps = [_strX, _strLeft, 'l'];\r\n                    var coordinatesYAxisProps = [_strY, _strTop, 't'];\r\n                    var coordinatesOperators = ['+=', '-=', '*=', '/='];\r\n                    var durationIsObject = type(duration) == TYPES.o;\r\n                    var completeCallback = durationIsObject ? duration.complete : complete;\r\n                    var i;\r\n                    var finalScroll = {};\r\n                    var specialEasing = {};\r\n                    var doScrollLeft;\r\n                    var doScrollTop;\r\n                    var animationOptions;\r\n                    var strEnd = 'end';\r\n                    var strBegin = 'begin';\r\n                    var strCenter = 'center';\r\n                    var strNearest = 'nearest';\r\n                    var strAlways = 'always';\r\n                    var strNever = 'never';\r\n                    var strIfNeeded = 'ifneeded';\r\n                    var strLength = LEXICON.l;\r\n                    var settingsAxis;\r\n                    var settingsScroll;\r\n                    var settingsBlock;\r\n                    var settingsMargin;\r\n                    var finalElement;\r\n                    var elementObjSettingsAxisValues = [_strX, _strY, 'xy', 'yx'];\r\n                    var elementObjSettingsBlockValues = [strBegin, strEnd, strCenter, strNearest];\r\n                    var elementObjSettingsScrollValues = [strAlways, strNever, strIfNeeded];\r\n                    var coordinatesIsElementObj = coordinates[LEXICON.hOP]('el');\r\n                    var possibleElement = coordinatesIsElementObj ? coordinates.el : coordinates;\r\n                    var possibleElementIsJQuery = possibleElement instanceof FRAMEWORK || JQUERY ? possibleElement instanceof JQUERY : false;\r\n                    var possibleElementIsHTMLElement = possibleElementIsJQuery ? false : isHTMLElement(possibleElement);\r\n                    var updateScrollbarInfos = function () {\r\n                        if (doScrollLeft)\r\n                            refreshScrollbarHandleOffset(true);\r\n                        if (doScrollTop)\r\n                            refreshScrollbarHandleOffset(false);\r\n                    };\r\n                    var proxyCompleteCallback = type(completeCallback) != TYPES.f ? undefined : function () {\r\n                        updateScrollbarInfos();\r\n                        completeCallback();\r\n                    };\r\n                    function checkSettingsStringValue(currValue, allowedValues) {\r\n                        for (i = 0; i < allowedValues[strLength]; i++) {\r\n                            if (currValue === allowedValues[i])\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    function getRawScroll(isX, coordinates) {\r\n                        var coordinateProps = isX ? coordinatesXAxisProps : coordinatesYAxisProps;\r\n                        coordinates = type(coordinates) == TYPES.s || type(coordinates) == TYPES.n ? [coordinates, coordinates] : coordinates;\r\n\r\n                        if (COMPATIBILITY.isA(coordinates))\r\n                            return isX ? coordinates[0] : coordinates[1];\r\n                        else if (type(coordinates) == TYPES.o) {\r\n                            //decides RTL normalization \"hack\" with .n\r\n                            //normalizeRTL = type(coordinates.n) == TYPES.b ? coordinates.n : normalizeRTL;\r\n                            for (i = 0; i < coordinateProps[strLength]; i++)\r\n                                if (coordinateProps[i] in coordinates)\r\n                                    return coordinates[coordinateProps[i]];\r\n                        }\r\n                    }\r\n                    function getFinalScroll(isX, rawScroll) {\r\n                        var isString = type(rawScroll) == TYPES.s;\r\n                        var operator;\r\n                        var amount;\r\n                        var scrollInfo = isX ? _scrollHorizontalInfo : _scrollVerticalInfo;\r\n                        var currScroll = scrollInfo._currentScroll;\r\n                        var maxScroll = scrollInfo._maxScroll;\r\n                        var mult = ' * ';\r\n                        var finalValue;\r\n                        var isRTLisX = _isRTL && isX;\r\n                        var normalizeShortcuts = isRTLisX && _rtlScrollBehavior.n && !normalizeRTL;\r\n                        var strReplace = 'replace';\r\n                        var evalFunc = eval;\r\n                        var possibleOperator;\r\n                        if (isString) {\r\n                            //check operator\r\n                            if (rawScroll[strLength] > 2) {\r\n                                possibleOperator = rawScroll.substr(0, 2);\r\n                                if (inArray(possibleOperator, coordinatesOperators) > -1)\r\n                                    operator = possibleOperator;\r\n                            }\r\n\r\n                            //calculate units and shortcuts\r\n                            rawScroll = operator ? rawScroll.substr(2) : rawScroll;\r\n                            rawScroll = rawScroll\r\n                                [strReplace](/min/g, 0) //'min' = 0%\r\n                                [strReplace](/</g, 0)   //'<'   = 0%\r\n                                [strReplace](/max/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent)    //'max' = 100%\r\n                                [strReplace](/>/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent)      //'>'   = 100%\r\n                                [strReplace](/px/g, _strEmpty)\r\n                                [strReplace](/%/g, mult + (maxScroll * (isRTLisX && _rtlScrollBehavior.n ? -1 : 1) / 100.0))\r\n                                [strReplace](/vw/g, mult + _viewportSize.w)\r\n                                [strReplace](/vh/g, mult + _viewportSize.h);\r\n                            amount = parseToZeroOrNumber(isNaN(rawScroll) ? parseToZeroOrNumber(evalFunc(rawScroll), true).toFixed() : rawScroll);\r\n                        }\r\n                        else {\r\n                            amount = rawScroll;\r\n                        }\r\n\r\n                        if (amount !== undefined && !isNaN(amount) && type(amount) == TYPES.n) {\r\n                            var normalizeIsRTLisX = normalizeRTL && isRTLisX;\r\n                            var operatorCurrScroll = currScroll * (normalizeIsRTLisX && _rtlScrollBehavior.n ? -1 : 1);\r\n                            var invert = normalizeIsRTLisX && _rtlScrollBehavior.i;\r\n                            var negate = normalizeIsRTLisX && _rtlScrollBehavior.n;\r\n                            operatorCurrScroll = invert ? (maxScroll - operatorCurrScroll) : operatorCurrScroll;\r\n                            switch (operator) {\r\n                                case '+=':\r\n                                    finalValue = operatorCurrScroll + amount;\r\n                                    break;\r\n                                case '-=':\r\n                                    finalValue = operatorCurrScroll - amount;\r\n                                    break;\r\n                                case '*=':\r\n                                    finalValue = operatorCurrScroll * amount;\r\n                                    break;\r\n                                case '/=':\r\n                                    finalValue = operatorCurrScroll / amount;\r\n                                    break;\r\n                                default:\r\n                                    finalValue = amount;\r\n                                    break;\r\n                            }\r\n                            finalValue = invert ? maxScroll - finalValue : finalValue;\r\n                            finalValue *= negate ? -1 : 1;\r\n                            finalValue = isRTLisX && _rtlScrollBehavior.n ? MATH.min(0, MATH.max(maxScroll, finalValue)) : MATH.max(0, MATH.min(maxScroll, finalValue));\r\n                        }\r\n                        return finalValue === currScroll ? undefined : finalValue;\r\n                    }\r\n                    function getPerAxisValue(value, valueInternalType, defaultValue, allowedValues) {\r\n                        var resultDefault = [defaultValue, defaultValue];\r\n                        var valueType = type(value);\r\n                        var valueArrLength;\r\n                        var valueArrItem;\r\n\r\n                        //value can be [ string, or array of two strings ]\r\n                        if (valueType == valueInternalType) {\r\n                            value = [value, value];\r\n                        }\r\n                        else if (valueType == TYPES.a) {\r\n                            valueArrLength = value[strLength];\r\n                            if (valueArrLength > 2 || valueArrLength < 1)\r\n                                value = resultDefault;\r\n                            else {\r\n                                if (valueArrLength === 1)\r\n                                    value[1] = defaultValue;\r\n                                for (i = 0; i < valueArrLength; i++) {\r\n                                    valueArrItem = value[i];\r\n                                    if (type(valueArrItem) != valueInternalType || !checkSettingsStringValue(valueArrItem, allowedValues)) {\r\n                                        value = resultDefault;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (valueType == TYPES.o)\r\n                            value = [value[_strX] || defaultValue, value[_strY] || defaultValue];\r\n                        else\r\n                            value = resultDefault;\r\n                        return { x: value[0], y: value[1] };\r\n                    }\r\n                    function generateMargin(marginTopRightBottomLeftArray) {\r\n                        var result = [];\r\n                        var currValue;\r\n                        var currValueType;\r\n                        var valueDirections = [_strTop, _strRight, _strBottom, _strLeft];\r\n                        for (i = 0; i < marginTopRightBottomLeftArray[strLength]; i++) {\r\n                            if (i === valueDirections[strLength])\r\n                                break;\r\n                            currValue = marginTopRightBottomLeftArray[i];\r\n                            currValueType = type(currValue);\r\n                            if (currValueType == TYPES.b)\r\n                                result.push(currValue ? parseToZeroOrNumber(finalElement.css(_strMarginMinus + valueDirections[i])) : 0);\r\n                            else\r\n                                result.push(currValueType == TYPES.n ? currValue : 0);\r\n                        }\r\n                        return result;\r\n                    }\r\n\r\n                    if (possibleElementIsJQuery || possibleElementIsHTMLElement) {\r\n                        //get settings\r\n                        var margin = coordinatesIsElementObj ? coordinates.margin : 0;\r\n                        var axis = coordinatesIsElementObj ? coordinates.axis : 0;\r\n                        var scroll = coordinatesIsElementObj ? coordinates.scroll : 0;\r\n                        var block = coordinatesIsElementObj ? coordinates.block : 0;\r\n                        var marginDefault = [0, 0, 0, 0];\r\n                        var marginType = type(margin);\r\n                        var marginLength;\r\n                        finalElement = possibleElementIsJQuery ? possibleElement : FRAMEWORK(possibleElement);\r\n\r\n                        if (finalElement[strLength] > 0) {\r\n                            //margin can be [ boolean, number, array of 2, array of 4, object ]\r\n                            if (marginType == TYPES.n || marginType == TYPES.b)\r\n                                margin = generateMargin([margin, margin, margin, margin]);\r\n                            else if (marginType == TYPES.a) {\r\n                                marginLength = margin[strLength];\r\n                                if (marginLength === 2)\r\n                                    margin = generateMargin([margin[0], margin[1], margin[0], margin[1]]);\r\n                                else if (marginLength >= 4)\r\n                                    margin = generateMargin(margin);\r\n                                else\r\n                                    margin = marginDefault;\r\n                            }\r\n                            else if (marginType == TYPES.o)\r\n                                margin = generateMargin([margin[_strTop], margin[_strRight], margin[_strBottom], margin[_strLeft]]);\r\n                            else\r\n                                margin = marginDefault;\r\n\r\n                            //block = type(block) === TYPES.b ? block ? [ strNearest, strBegin ] : [ strNearest, strEnd ] : block;\r\n                            settingsAxis = checkSettingsStringValue(axis, elementObjSettingsAxisValues) ? axis : 'xy';\r\n                            settingsScroll = getPerAxisValue(scroll, TYPES.s, strAlways, elementObjSettingsScrollValues);\r\n                            settingsBlock = getPerAxisValue(block, TYPES.s, strBegin, elementObjSettingsBlockValues);\r\n                            settingsMargin = margin;\r\n\r\n                            var viewportScroll = {\r\n                                l: _scrollHorizontalInfo._currentScroll,\r\n                                t: _scrollVerticalInfo._currentScroll\r\n                            };\r\n                            // use padding element instead of viewport element because padding element has never padding, margin or position applied.\r\n                            var viewportOffset = _paddingElement.offset();\r\n\r\n                            //get coordinates\r\n                            var elementOffset = finalElement.offset();\r\n                            var doNotScroll = {\r\n                                x: settingsScroll.x == strNever || settingsAxis == _strY,\r\n                                y: settingsScroll.y == strNever || settingsAxis == _strX\r\n                            };\r\n                            elementOffset[_strTop] -= settingsMargin[0];\r\n                            elementOffset[_strLeft] -= settingsMargin[3];\r\n                            var elementScrollCoordinates = {\r\n                                x: MATH.round(elementOffset[_strLeft] - viewportOffset[_strLeft] + viewportScroll.l),\r\n                                y: MATH.round(elementOffset[_strTop] - viewportOffset[_strTop] + viewportScroll.t)\r\n                            };\r\n                            if (_isRTL) {\r\n                                if (!_rtlScrollBehavior.n && !_rtlScrollBehavior.i)\r\n                                    elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + viewportScroll.l);\r\n                                if (_rtlScrollBehavior.n && normalizeRTL)\r\n                                    elementScrollCoordinates.x *= -1;\r\n                                if (_rtlScrollBehavior.i && normalizeRTL)\r\n                                    elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + (_scrollHorizontalInfo._maxScroll - viewportScroll.l));\r\n                            }\r\n\r\n                            //measuring is required\r\n                            if (settingsBlock.x != strBegin || settingsBlock.y != strBegin || settingsScroll.x == strIfNeeded || settingsScroll.y == strIfNeeded || _isRTL) {\r\n                                var measuringElm = finalElement[0];\r\n                                var rawElementSize = _supportTransform ? measuringElm[LEXICON.bCR]() : {\r\n                                    width: measuringElm[LEXICON.oW],\r\n                                    height: measuringElm[LEXICON.oH]\r\n                                };\r\n                                var elementSize = {\r\n                                    w: rawElementSize[_strWidth] + settingsMargin[3] + settingsMargin[1],\r\n                                    h: rawElementSize[_strHeight] + settingsMargin[0] + settingsMargin[2]\r\n                                };\r\n                                var finalizeBlock = function (isX) {\r\n                                    var vars = getScrollbarVars(isX);\r\n                                    var wh = vars._w_h;\r\n                                    var lt = vars._left_top;\r\n                                    var xy = vars._x_y;\r\n                                    var blockIsEnd = settingsBlock[xy] == (isX ? _isRTL ? strBegin : strEnd : strEnd);\r\n                                    var blockIsCenter = settingsBlock[xy] == strCenter;\r\n                                    var blockIsNearest = settingsBlock[xy] == strNearest;\r\n                                    var scrollNever = settingsScroll[xy] == strNever;\r\n                                    var scrollIfNeeded = settingsScroll[xy] == strIfNeeded;\r\n                                    var vpSize = _viewportSize[wh];\r\n                                    var vpOffset = viewportOffset[lt];\r\n                                    var elSize = elementSize[wh];\r\n                                    var elOffset = elementOffset[lt];\r\n                                    var divide = blockIsCenter ? 2 : 1;\r\n                                    var elementCenterOffset = elOffset + (elSize / 2);\r\n                                    var viewportCenterOffset = vpOffset + (vpSize / 2);\r\n                                    var isInView =\r\n                                        elSize <= vpSize\r\n                                        && elOffset >= vpOffset\r\n                                        && elOffset + elSize <= vpOffset + vpSize;\r\n\r\n                                    if (scrollNever)\r\n                                        doNotScroll[xy] = true;\r\n                                    else if (!doNotScroll[xy]) {\r\n                                        if (blockIsNearest || scrollIfNeeded) {\r\n                                            doNotScroll[xy] = scrollIfNeeded ? isInView : false;\r\n                                            blockIsEnd = elSize < vpSize ? elementCenterOffset > viewportCenterOffset : elementCenterOffset < viewportCenterOffset;\r\n                                        }\r\n                                        elementScrollCoordinates[xy] -= blockIsEnd || blockIsCenter ? ((vpSize / divide) - (elSize / divide)) * (isX && _isRTL && normalizeRTL ? -1 : 1) : 0;\r\n                                    }\r\n                                };\r\n                                finalizeBlock(true);\r\n                                finalizeBlock(false);\r\n                            }\r\n\r\n                            if (doNotScroll.y)\r\n                                delete elementScrollCoordinates.y;\r\n                            if (doNotScroll.x)\r\n                                delete elementScrollCoordinates.x;\r\n\r\n                            coordinates = elementScrollCoordinates;\r\n                        }\r\n                    }\r\n\r\n                    finalScroll[_strScrollLeft] = getFinalScroll(true, getRawScroll(true, coordinates));\r\n                    finalScroll[_strScrollTop] = getFinalScroll(false, getRawScroll(false, coordinates));\r\n                    doScrollLeft = finalScroll[_strScrollLeft] !== undefined;\r\n                    doScrollTop = finalScroll[_strScrollTop] !== undefined;\r\n\r\n                    if ((doScrollLeft || doScrollTop) && (duration > 0 || durationIsObject)) {\r\n                        if (durationIsObject) {\r\n                            duration.complete = proxyCompleteCallback;\r\n                            _viewportElement.animate(finalScroll, duration);\r\n                        }\r\n                        else {\r\n                            animationOptions = {\r\n                                duration: duration,\r\n                                complete: proxyCompleteCallback\r\n                            };\r\n                            if (COMPATIBILITY.isA(easing) || FRAMEWORK.isPlainObject(easing)) {\r\n                                specialEasing[_strScrollLeft] = easing[0] || easing.x;\r\n                                specialEasing[_strScrollTop] = easing[1] || easing.y;\r\n                                animationOptions.specialEasing = specialEasing;\r\n                            }\r\n                            else {\r\n                                animationOptions.easing = easing;\r\n                            }\r\n                            _viewportElement.animate(finalScroll, animationOptions);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (doScrollLeft)\r\n                            _viewportElement[_strScrollLeft](finalScroll[_strScrollLeft]);\r\n                        if (doScrollTop)\r\n                            _viewportElement[_strScrollTop](finalScroll[_strScrollTop]);\r\n                        updateScrollbarInfos();\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Stops all scroll animations.\r\n                 * @returns {*} The current OverlayScrollbars instance (for chaining).\r\n                 */\r\n                _base.scrollStop = function (param1, param2, param3) {\r\n                    _viewportElement.stop(param1, param2, param3);\r\n                    return _base;\r\n                };\r\n\r\n                /**\r\n                 * Returns all relevant elements.\r\n                 * @param elementName The name of the element which shall be returned.\r\n                 * @returns {{target: *, host: *, padding: *, viewport: *, content: *, scrollbarHorizontal: {scrollbar: *, track: *, handle: *}, scrollbarVertical: {scrollbar: *, track: *, handle: *}, scrollbarCorner: *} | *}\r\n                 */\r\n                _base.getElements = function (elementName) {\r\n                    var obj = {\r\n                        target: _targetElementNative,\r\n                        host: _hostElementNative,\r\n                        padding: _paddingElementNative,\r\n                        viewport: _viewportElementNative,\r\n                        content: _contentElementNative,\r\n                        scrollbarHorizontal: {\r\n                            scrollbar: _scrollbarHorizontalElement[0],\r\n                            track: _scrollbarHorizontalTrackElement[0],\r\n                            handle: _scrollbarHorizontalHandleElement[0]\r\n                        },\r\n                        scrollbarVertical: {\r\n                            scrollbar: _scrollbarVerticalElement[0],\r\n                            track: _scrollbarVerticalTrackElement[0],\r\n                            handle: _scrollbarVerticalHandleElement[0]\r\n                        },\r\n                        scrollbarCorner: _scrollbarCornerElement[0]\r\n                    };\r\n                    return type(elementName) == TYPES.s ? getObjectPropVal(obj, elementName) : obj;\r\n                };\r\n\r\n                /**\r\n                 * Returns a object which describes the current state of this instance.\r\n                 * @param stateProperty A specific property from the state object which shall be returned.\r\n                 * @returns {{widthAuto, heightAuto, overflowAmount, hideOverflow, hasOverflow, contentScrollSize, viewportSize, hostSize, autoUpdate} | *}\r\n                 */\r\n                _base.getState = function (stateProperty) {\r\n                    function prepare(obj) {\r\n                        if (!FRAMEWORK.isPlainObject(obj))\r\n                            return obj;\r\n                        var extended = extendDeep({}, obj);\r\n                        var changePropertyName = function (from, to) {\r\n                            if (extended[LEXICON.hOP](from)) {\r\n                                extended[to] = extended[from];\r\n                                delete extended[from];\r\n                            }\r\n                        };\r\n                        changePropertyName('w', _strWidth); //change w to width\r\n                        changePropertyName('h', _strHeight); //change h to height\r\n                        delete extended.c; //delete c (the 'changed' prop)\r\n                        return extended;\r\n                    };\r\n                    var obj = {\r\n                        destroyed: !!prepare(_destroyed),\r\n                        sleeping: !!prepare(_sleeping),\r\n                        autoUpdate: prepare(!_mutationObserversConnected),\r\n                        widthAuto: prepare(_widthAutoCache),\r\n                        heightAuto: prepare(_heightAutoCache),\r\n                        padding: prepare(_cssPaddingCache),\r\n                        overflowAmount: prepare(_overflowAmountCache),\r\n                        hideOverflow: prepare(_hideOverflowCache),\r\n                        hasOverflow: prepare(_hasOverflowCache),\r\n                        contentScrollSize: prepare(_contentScrollSizeCache),\r\n                        viewportSize: prepare(_viewportSize),\r\n                        hostSize: prepare(_hostSizeCache),\r\n                        documentMixed: prepare(_documentMixed)\r\n                    };\r\n                    return type(stateProperty) == TYPES.s ? getObjectPropVal(obj, stateProperty) : obj;\r\n                };\r\n\r\n                /**\r\n                 * Gets all or specific extension instance.\r\n                 * @param extName The name of the extension from which the instance shall be got.\r\n                 * @returns {{}} The instance of the extension with the given name or undefined if the instance couldn't be found.\r\n                 */\r\n                _base.ext = function (extName) {\r\n                    var result;\r\n                    var privateMethods = _extensionsPrivateMethods.split(' ');\r\n                    var i = 0;\r\n                    if (type(extName) == TYPES.s) {\r\n                        if (_extensions[LEXICON.hOP](extName)) {\r\n                            result = extendDeep({}, _extensions[extName]);\r\n                            for (; i < privateMethods.length; i++)\r\n                                delete result[privateMethods[i]];\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = {};\r\n                        for (i in _extensions)\r\n                            result[i] = extendDeep({}, _base.ext(i));\r\n                    }\r\n                    return result;\r\n                };\r\n\r\n                /**\r\n                 * Adds a extension to this instance.\r\n                 * @param extName The name of the extension which shall be added.\r\n                 * @param extensionOptions The extension options which shall be used.\r\n                 * @returns {{}} The instance of the added extension or undefined if the extension couldn't be added properly.\r\n                 */\r\n                _base.addExt = function (extName, extensionOptions) {\r\n                    var registeredExtensionObj = _plugin.extension(extName);\r\n                    var instance;\r\n                    var instanceAdded;\r\n                    var instanceContract;\r\n                    var contractResult;\r\n                    var contractFulfilled = true;\r\n                    if (registeredExtensionObj) {\r\n                        if (!_extensions[LEXICON.hOP](extName)) {\r\n                            instance = registeredExtensionObj.extensionFactory.call(_base,\r\n                                extendDeep({}, registeredExtensionObj.defaultOptions),\r\n                                FRAMEWORK,\r\n                                COMPATIBILITY);\r\n\r\n                            if (instance) {\r\n                                instanceContract = instance.contract;\r\n                                if (type(instanceContract) == TYPES.f) {\r\n                                    contractResult = instanceContract(window);\r\n                                    contractFulfilled = type(contractResult) == TYPES.b ? contractResult : contractFulfilled;\r\n                                }\r\n                                if (contractFulfilled) {\r\n                                    _extensions[extName] = instance;\r\n                                    instanceAdded = instance.added;\r\n                                    if (type(instanceAdded) == TYPES.f)\r\n                                        instanceAdded(extensionOptions);\r\n\r\n                                    return _base.ext(extName);\r\n                                }\r\n                            }\r\n                        }\r\n                        else\r\n                            return _base.ext(extName);\r\n                    }\r\n                    else\r\n                        console.warn(\"A extension with the name \\\"\" + extName + \"\\\" isn't registered.\");\r\n                };\r\n\r\n                /**\r\n                 * Removes a extension from this instance.\r\n                 * @param extName The name of the extension which shall be removed.\r\n                 * @returns {boolean} True if the extension was removed, false otherwise e.g. if the extension wasn't added before.\r\n                 */\r\n                _base.removeExt = function (extName) {\r\n                    var instance = _extensions[extName];\r\n                    var instanceRemoved;\r\n                    if (instance) {\r\n                        delete _extensions[extName];\r\n\r\n                        instanceRemoved = instance.removed;\r\n                        if (type(instanceRemoved) == TYPES.f)\r\n                            instanceRemoved();\r\n\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                /**\r\n                 * Constructs the plugin.\r\n                 * @param targetElement The element to which the plugin shall be applied.\r\n                 * @param options The initial options of the plugin.\r\n                 * @param extensions The extension(s) which shall be added right after the initialization.\r\n                 * @returns {boolean} True if the plugin was successfully initialized, false otherwise.\r\n                 */\r\n                function construct(targetElement, options, extensions) {\r\n                    _defaultOptions = globals.defaultOptions;\r\n                    _nativeScrollbarStyling = globals.nativeScrollbarStyling;\r\n                    _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\r\n                    _nativeScrollbarIsOverlaid = extendDeep({}, globals.nativeScrollbarIsOverlaid);\r\n                    _overlayScrollbarDummySize = extendDeep({}, globals.overlayScrollbarDummySize);\r\n                    _rtlScrollBehavior = extendDeep({}, globals.rtlScrollBehavior);\r\n\r\n                    //parse & set options but don't update\r\n                    setOptions(extendDeep({}, _defaultOptions, options));\r\n\r\n                    _cssCalc = globals.cssCalc;\r\n                    _msieVersion = globals.msie;\r\n                    _autoUpdateRecommended = globals.autoUpdateRecommended;\r\n                    _supportTransition = globals.supportTransition;\r\n                    _supportTransform = globals.supportTransform;\r\n                    _supportPassiveEvents = globals.supportPassiveEvents;\r\n                    _supportResizeObserver = globals.supportResizeObserver;\r\n                    _supportMutationObserver = globals.supportMutationObserver;\r\n                    _restrictedMeasuring = globals.restrictedMeasuring;\r\n                    _documentElement = FRAMEWORK(targetElement.ownerDocument);\r\n                    _documentElementNative = _documentElement[0];\r\n                    _windowElement = FRAMEWORK(_documentElementNative.defaultView || _documentElementNative.parentWindow);\r\n                    _windowElementNative = _windowElement[0];\r\n                    _htmlElement = findFirst(_documentElement, 'html');\r\n                    _bodyElement = findFirst(_htmlElement, 'body');\r\n                    _targetElement = FRAMEWORK(targetElement);\r\n                    _targetElementNative = _targetElement[0];\r\n                    _isTextarea = _targetElement.is('textarea');\r\n                    _isBody = _targetElement.is('body');\r\n                    _documentMixed = _documentElementNative !== document;\r\n\r\n                    /* On a div Element The if checks only whether:\r\n                     * - the targetElement has the class \"os-host\"\r\n                     * - the targetElement has a a child with the class \"os-padding\"\r\n                     *\r\n                     * If that's the case, its assumed the DOM has already the following structure:\r\n                     * (The \".os-host\" element is the targetElement)\r\n                     *\r\n                     *  <div class=\"os-host\">\r\n                     *      <div class=\"os-resize-observer-host\"></div>\r\n                     *      <div class=\"os-padding\">\r\n                     *          <div class=\"os-viewport\">\r\n                     *              <div class=\"os-content\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar-corner\"></div>\r\n                     *  </div>\r\n                     *\r\n                     * =====================================================================================\r\n                     *\r\n                     * On a Textarea Element The if checks only whether:\r\n                     * - the targetElement has the class \"os-textarea\"\r\n                     * - the targetElement is inside a element with the class \"os-content\"\r\n                     *\r\n                     * If that's the case, its assumed the DOM has already the following structure:\r\n                     * (The \".os-textarea\" (textarea) element is the targetElement)\r\n                     *\r\n                     *  <div class=\"os-host-textarea\">\r\n                     *      <div class=\"os-resize-observer-host\"></div>\r\n                     *      <div class=\"os-padding os-text-inherit\">\r\n                     *          <div class=\"os-viewport os-text-inherit\">\r\n                     *              <div class=\"os-content os-text-inherit\">\r\n                     *                  <div class=\"os-textarea-cover\"></div>\r\n                     *                  <textarea class=\"os-textarea os-text-inherit\"></textarea>\r\n                     *              </div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar-corner\"></div>\r\n                     *  </div>\r\n                     */\r\n                    _domExists = _isTextarea\r\n                        ? _targetElement.hasClass(_classNameTextareaElement) && _targetElement.parent().hasClass(_classNameContentElement)\r\n                        : _targetElement.hasClass(_classNameHostElement) && _targetElement.children(_strDot + _classNamePaddingElement)[LEXICON.l];\r\n\r\n                    var initBodyScroll;\r\n                    var bodyMouseTouchDownListener;\r\n\r\n                    //check if the plugin hasn't to be initialized\r\n                    if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y && !_currentPreparedOptions.nativeScrollbarsOverlaid.initialize) {\r\n                        _initialized = true; // workaround so the onInitializationWithdrawn callback below is fired\r\n                        dispatchCallback('onInitializationWithdrawn');\r\n                        if (_domExists) {\r\n                            setupStructureDOM(true);\r\n                            setupScrollbarsDOM(true);\r\n                            setupScrollbarCornerDOM(true);\r\n                        }\r\n\r\n                        _initialized = false;\r\n                        _destroyed = true;\r\n                        _sleeping = true;\r\n\r\n                        return _base;\r\n                    }\r\n\r\n                    if (_isBody) {\r\n                        initBodyScroll = {};\r\n                        initBodyScroll.l = MATH.max(_targetElement[_strScrollLeft](), _htmlElement[_strScrollLeft](), _windowElement[_strScrollLeft]());\r\n                        initBodyScroll.t = MATH.max(_targetElement[_strScrollTop](), _htmlElement[_strScrollTop](), _windowElement[_strScrollTop]());\r\n\r\n                        bodyMouseTouchDownListener = function () {\r\n                            _viewportElement.removeAttr(LEXICON.ti);\r\n                            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, true, true);\r\n                        }\r\n                    }\r\n\r\n                    //build OverlayScrollbars DOM\r\n                    setupStructureDOM();\r\n                    setupScrollbarsDOM();\r\n                    setupScrollbarCornerDOM();\r\n\r\n                    //create OverlayScrollbars events\r\n                    setupStructureEvents();\r\n                    setupScrollbarEvents(true);\r\n                    setupScrollbarEvents(false);\r\n                    setupScrollbarCornerEvents();\r\n\r\n                    //create mutation observers\r\n                    createMutationObservers();\r\n\r\n                    //build resize observer for the host element\r\n                    setupResizeObserver(_sizeObserverElement, hostOnResized);\r\n\r\n                    if (_isBody) {\r\n                        //apply the body scroll to handle it right in the update method\r\n                        _viewportElement[_strScrollLeft](initBodyScroll.l)[_strScrollTop](initBodyScroll.t);\r\n\r\n                        //set the focus on the viewport element so you dont have to click on the page to use keyboard keys (up / down / space) for scrolling\r\n                        if (document.activeElement == targetElement && _viewportElementNative.focus) {\r\n                            //set a tabindex to make the viewportElement focusable\r\n                            _viewportElement.attr(LEXICON.ti, '-1');\r\n                            _viewportElementNative.focus();\r\n\r\n                            /* the tabindex has to be removed due to;\r\n                             * If you set the tabindex attribute on an <div>, then its child content cannot be scrolled with the arrow keys unless you set tabindex on the content, too\r\n                             * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\r\n                             */\r\n                            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, false, true);\r\n                        }\r\n                    }\r\n\r\n                    //update for the first time & initialize cache\r\n                    _base.update(_strAuto);\r\n\r\n                    //the plugin is initialized now!\r\n                    _initialized = true;\r\n                    dispatchCallback('onInitialized');\r\n\r\n                    //call all callbacks which would fire before the initialized was complete\r\n                    each(_callbacksInitQeueue, function (index, value) { dispatchCallback(value.n, value.a); });\r\n                    _callbacksInitQeueue = [];\r\n\r\n                    //add extensions\r\n                    if (type(extensions) == TYPES.s)\r\n                        extensions = [extensions];\r\n                    if (COMPATIBILITY.isA(extensions))\r\n                        each(extensions, function (index, value) { _base.addExt(value); });\r\n                    else if (FRAMEWORK.isPlainObject(extensions))\r\n                        each(extensions, function (key, value) { _base.addExt(key, value); });\r\n\r\n                    //add the transition class for transitions AFTER the first update & AFTER the applied extensions (for preventing unwanted transitions)\r\n                    setTimeout(function () {\r\n                        if (_supportTransition && !_destroyed)\r\n                            addClass(_hostElement, _classNameHostTransition);\r\n                    }, 333);\r\n\r\n                    return _base;\r\n                }\r\n\r\n                if (_plugin.valid(construct(pluginTargetElement, options, extensions))) {\r\n                    INSTANCES(pluginTargetElement, _base);\r\n                }\r\n\r\n                return _base;\r\n            }\r\n\r\n            /**\r\n             * Initializes a new OverlayScrollbarsInstance object or changes options if already initialized or returns the current instance.\r\n             * @param pluginTargetElements The elements to which the Plugin shall be initialized.\r\n             * @param options The custom options with which the plugin shall be initialized.\r\n             * @param extensions The extension(s) which shall be added right after initialization.\r\n             * @returns {*}\r\n             */\r\n            _plugin = window[PLUGINNAME] = function (pluginTargetElements, options, extensions) {\r\n                if (arguments[LEXICON.l] === 0)\r\n                    return this;\r\n\r\n                var arr = [];\r\n                var optsIsPlainObj = FRAMEWORK.isPlainObject(options);\r\n                var inst;\r\n                var result;\r\n\r\n                //pluginTargetElements is null or undefined\r\n                if (!pluginTargetElements)\r\n                    return optsIsPlainObj || !options ? result : arr;\r\n\r\n                /*\r\n                   pluginTargetElements will be converted to:\r\n                   1. A jQueryElement Array\r\n                   2. A HTMLElement Array\r\n                   3. A Array with a single HTML Element\r\n                   so pluginTargetElements is always a array.\r\n                */\r\n                pluginTargetElements = pluginTargetElements[LEXICON.l] != undefined ? pluginTargetElements : [pluginTargetElements[0] || pluginTargetElements];\r\n                initOverlayScrollbarsStatics();\r\n\r\n                if (pluginTargetElements[LEXICON.l] > 0) {\r\n                    if (optsIsPlainObj) {\r\n                        FRAMEWORK.each(pluginTargetElements, function (i, v) {\r\n                            inst = v;\r\n                            if (inst !== undefined)\r\n                                arr.push(OverlayScrollbarsInstance(inst, options, extensions, _pluginsGlobals, _pluginsAutoUpdateLoop));\r\n                        });\r\n                    }\r\n                    else {\r\n                        FRAMEWORK.each(pluginTargetElements, function (i, v) {\r\n                            inst = INSTANCES(v);\r\n                            if ((options === '!' && _plugin.valid(inst)) || (COMPATIBILITY.type(options) == TYPES.f && options(v, inst)))\r\n                                arr.push(inst);\r\n                            else if (options === undefined)\r\n                                arr.push(inst);\r\n                        });\r\n                    }\r\n                    result = arr[LEXICON.l] === 1 ? arr[0] : arr;\r\n                }\r\n                return result;\r\n            };\r\n\r\n            /**\r\n             * Returns a object which contains global information about the plugin and each instance of it.\r\n             * The returned object is just a copy, that means that changes to the returned object won't have any effect to the original object.\r\n             */\r\n            _plugin.globals = function () {\r\n                initOverlayScrollbarsStatics();\r\n                var globals = FRAMEWORK.extend(true, {}, _pluginsGlobals);\r\n                delete globals['msie'];\r\n                return globals;\r\n            };\r\n\r\n            /**\r\n             * Gets or Sets the default options for each new plugin initialization.\r\n             * @param newDefaultOptions The object with which the default options shall be extended.\r\n             */\r\n            _plugin.defaultOptions = function (newDefaultOptions) {\r\n                initOverlayScrollbarsStatics();\r\n                var currDefaultOptions = _pluginsGlobals.defaultOptions;\r\n                if (newDefaultOptions === undefined)\r\n                    return FRAMEWORK.extend(true, {}, currDefaultOptions);\r\n\r\n                //set the new default options\r\n                _pluginsGlobals.defaultOptions = FRAMEWORK.extend(true, {}, currDefaultOptions, _pluginsOptions._validate(newDefaultOptions, _pluginsOptions._template, true, currDefaultOptions)._default);\r\n            };\r\n\r\n            /**\r\n             * Checks whether the passed instance is a non-destroyed OverlayScrollbars instance.\r\n             * @param osInstance The potential OverlayScrollbars instance which shall be checked.\r\n             * @returns {boolean} True if the passed value is a non-destroyed OverlayScrollbars instance, false otherwise.\r\n             */\r\n            _plugin.valid = function (osInstance) {\r\n                return osInstance instanceof _plugin && !osInstance.getState().destroyed;\r\n            };\r\n\r\n            /**\r\n             * Registers, Unregisters or returns a extension.\r\n             * Register: Pass the name and the extension. (defaultOptions is optional)\r\n             * Unregister: Pass the name and anything except a function as extension parameter.\r\n             * Get extension: Pass the name of the extension which shall be got.\r\n             * Get all extensions: Pass no arguments.\r\n             * @param extensionName The name of the extension which shall be registered, unregistered or returned.\r\n             * @param extension A function which generates the instance of the extension or anything other to remove a already registered extension.\r\n             * @param defaultOptions The default options which shall be used for the registered extension.\r\n             */\r\n            _plugin.extension = function (extensionName, extension, defaultOptions) {\r\n                var extNameTypeString = COMPATIBILITY.type(extensionName) == TYPES.s;\r\n                var argLen = arguments[LEXICON.l];\r\n                var i = 0;\r\n                if (argLen < 1 || !extNameTypeString) {\r\n                    //return a copy of all extension objects\r\n                    return FRAMEWORK.extend(true, { length: _pluginsExtensions[LEXICON.l] }, _pluginsExtensions);\r\n                }\r\n                else if (extNameTypeString) {\r\n                    if (COMPATIBILITY.type(extension) == TYPES.f) {\r\n                        //register extension\r\n                        _pluginsExtensions.push({\r\n                            name: extensionName,\r\n                            extensionFactory: extension,\r\n                            defaultOptions: defaultOptions\r\n                        });\r\n                    }\r\n                    else {\r\n                        for (; i < _pluginsExtensions[LEXICON.l]; i++) {\r\n                            if (_pluginsExtensions[i].name === extensionName) {\r\n                                if (argLen > 1)\r\n                                    _pluginsExtensions.splice(i, 1); //remove extension\r\n                                else\r\n                                    return FRAMEWORK.extend(true, {}, _pluginsExtensions[i]); //return extension with the given name\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            return _plugin;\r\n        })();\r\n\r\n        if (JQUERY && JQUERY.fn) {\r\n            /**\r\n             * The jQuery initialization interface.\r\n             * @param options The initial options for the construction of the plugin. To initialize the plugin, this option has to be a object! If it isn't a object, the instance(s) are returned and the plugin wont be initialized.\r\n             * @param extensions The extension(s) which shall be added right after initialization.\r\n             * @returns {*} After initialization it returns the jQuery element array, else it returns the instance(s) of the elements which are selected.\r\n             */\r\n            JQUERY.fn.overlayScrollbars = function (options, extensions) {\r\n                var _elements = this;\r\n                if (JQUERY.isPlainObject(options)) {\r\n                    JQUERY.each(_elements, function () { PLUGIN(this, options, extensions); });\r\n                    return _elements;\r\n                }\r\n                else\r\n                    return PLUGIN(_elements, options);\r\n            };\r\n        }\r\n        return PLUGIN;\r\n    }\r\n));","\r\nclass Shomoy {\r\n\r\n    #datetime;\r\n\r\n    /**\r\n     * Create a shomoy object.\r\n     *\r\n     * @param {number|string|Date|Shomoy} datetime The value can a valid value that JS accepts\r\n     * for Date object. Moreover, another date or shomoy object can passed-in as value.\r\n     * By default, it creates from the current datetime.\r\n     * */\r\n    constructor(datetime = new Date()) {\r\n        if (datetime instanceof Date) this.#datetime = new Date(datetime.toISOString());\r\n        else if (datetime instanceof Shomoy) this.#datetime = new Date(datetime.iso());\r\n        else if (jQuery.type(datetime) === 'string') this.#datetime =  new Date(datetime);\r\n        else if (jQuery.type(datetime) === 'number') this.#datetime =  new Date(datetime);\r\n        else new Error('Invalid time value was passed');\r\n    }\r\n\r\n    /**\r\n     * Using this method, the starting millisecond of the shomoy can be calculated.\r\n     *\r\n     * @return {number} the starting millisecond of the shomoy object.\r\n     */\r\n    shomoyStart() { return new Date(this.iso()).setHours(0, 0, 0, 0); }\r\n\r\n    /**\r\n     * Using this method, the ending millisecond of the shomoy can be calculated.\r\n     *\r\n     * @return {number} the ending milliseconds of the shomoy object.\r\n     */\r\n    shomoyEnd() { return this.shomoyStart() - 1 + Shomoy.msInDay(1); }\r\n\r\n    /**\r\n     * A shomoy object can compare itself with other shomoy object. Internally it\r\n     * uses the valueOf() method of date object to calculate the difference in\r\n     * timestamp and returns either 0, 1, or -1 based on the calculation.\r\n     *\r\n     * @param {Shomoy} shomoy The Shomoy object to calculate against\r\n     *\r\n     * @return {number} int the difference between two shomoy objects. Returns 0 if both\r\n     * shomoy are equal, -1 if the comparing shomoy is bigger, otherwise 1.\r\n     * */\r\n    compare (shomoy) {\r\n        if (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\r\n        let shomoyA = this.datetime.valueOf();\r\n        let shomoyB = shomoy.dateTime.valueOf();\r\n\r\n        if (shomoyA < shomoyB) return -1;\r\n        else if (shomoyA > shomoyB) return 1;\r\n        else return 0;\r\n    }\r\n\r\n    /**\r\n     * The difference between two shomoy objects can be calculated either in\r\n     * milliseconds(which is default) or microseconds(timestamp) value. It always\r\n     * finds the difference from $this object to passed one.\r\n     *\r\n     * @param {Shomoy} shomoy the Shomoy object to calculate the difference against\r\n     * @param {boolean} inMilli indicates whether to calculate in milliseconds or microseconds\r\n     * @return {number} the difference between two Shomoy objects.\r\n     * */\r\n    diff(shomoy, inMilli = true) {\r\n        if (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\r\n        if (inMilli) return this.getMilliseconds() - shomoy.getMilliseconds();\r\n        else return this.getTimestamp() - shomoy.getTimestamp();\r\n    }\r\n\r\n    /**\r\n     * Difference in hour with another shomoy object can be calculated. It internally\r\n     * uses Shomoy.diff() method.\r\n     *\r\n     * @param {Shomoy} shomoy A shomoy to calculate against\r\n     * @return {number} The difference from the passed-in shomoy\r\n     * */\r\n    diffHour(shomoy) {\r\n        if (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n        let diff = this.diff(shomoy, false);\r\n        return diff / 3600;\r\n    }\r\n\r\n    /**\r\n     * Difference with another shomoy object can be calculated and returned as an array of components\r\n     * of time in order: sec, min, hour, day.\r\n     *\r\n     * @param {Shomoy} shomoy The shomoy object to calculate against\r\n     * @return {array} Containing time components\r\n     * */\r\n    diffCompo(shomoy) {\r\n        if (!(shomoy instanceof Shomoy)) throw new Error('Argument must be an instance of shomoy.');\r\n\r\n        let time = this.diff(shomoy, false);\r\n\r\n        let secInDay = 60 * 60 * 24;\r\n\r\n        // day\r\n        let day = time / secInDay;\r\n        let dayLeft = ~~day;\r\n\r\n        // hour\r\n        let hour = (day % 1) * 24;\r\n        let hourLeft = ~~hour;\r\n\r\n        // min\r\n        let min = (hour % 1) * 60;\r\n        let minLeft = ~~min;\r\n\r\n        // sec\r\n        let secLeft = (min % 1) * 60;\r\n\r\n        // fix the round up second problem\r\n        if (Math.round(secLeft) === 60) {\r\n            secLeft = 0;\r\n            minLeft += 1;\r\n        }\r\n\r\n        return [secLeft, minLeft, hourLeft, dayLeft];\r\n    }\r\n\r\n    /**\r\n     * Any number of milliseconds can be added to the Shomoy object using this method.\r\n     * Negative value can be added too.\r\n     *\r\n     * @param {number} ms number of milliseconds to be added.\r\n     * */\r\n    addMs(ms) {\r\n        ms = this.datetime.getMilliseconds() + ms;\r\n        this.datetime.setMilliseconds(ms);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any number of seconds can be added to the Shomoy object using this method.\r\n     * Negative value can be added too.\r\n     *\r\n     * @param {number} sec number of seconds to be added.\r\n     * */\r\n    addSec(sec) {\r\n        sec = this.datetime.getSeconds() + sec;\r\n        this.datetime.setSeconds(sec);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any number of minutes can be added to the Shomoy object using this method.\r\n     * Negative value can be added too.\r\n     *\r\n     * @param {number} min number of minutes to be added.\r\n     * */\r\n    addMin(min) {\r\n        min = this.datetime.getMinutes() + min;\r\n        this.datetime.setMinutes(min);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any number of hours can be added to the Shomoy object using this method.\r\n     * It also takes negative hours which subtracts the hours from the shomoy,\r\n     *\r\n     * @param {number} hour number of hours to be added.\r\n     * */\r\n    addHour(hour) {\r\n        hour = this.datetime.getHours() + hour;\r\n        this.datetime.setHours(hour);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any number of days can be added to the Shomoy object using this method.\r\n     * It also takes negative day which subtracts the days from the shomoy,\r\n     *\r\n     * @param {number} day number of days to be added.\r\n     * */\r\n    addDay(day) {\r\n        day = this.datetime.getDate() + day;\r\n        this.datetime.setDate(day);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any number of months can be added to the Shomoy object using this method.\r\n     * Negative value can be added too.\r\n     *\r\n     * @param {number} month number of months to be added.\r\n     * */\r\n    addMonth(month) {\r\n        month = this.datetime.getMonth() + month;\r\n        this.datetime.setMonth(month);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Any number of years can be added to the Shomoy object using this method.\r\n     * Negative value can be added too.\r\n     *\r\n     * @param {number} year number of years to be added.\r\n     * */\r\n    addYear(year) {\r\n        year = this.year() + year;\r\n        this.datetime.setFullYear(year);\r\n        return this;\r\n    }\r\n\r\n    iso() { return `${this.year()}-${this.month()}-${this.date()} ${this.hour()}:${this.min()}:${this.sec()}`; }\r\n\r\n    toString() { return this.iso(); }\r\n\r\n    isoDate () { return this.iso().slice(0, 10); }\r\n\r\n    isoTime() { return `${this.hour()}:${this.min()}:${this.sec()}`; }\r\n\r\n    getMilliseconds () { return this.datetime.getTime(); }\r\n\r\n    getTimestamp () { return this.getMilliseconds() / 1000; }\r\n\r\n    getDate = () => this.#datetime.getDate();\r\n\r\n    getMonth = () => this.#datetime.getMonth();\r\n\r\n    getYear = () => this.#datetime.getFullYear();\r\n\r\n    getDay = () => this.#datetime.getDay();\r\n\r\n    getHours = () => this.#datetime.getHours();\r\n\r\n    getMinutes = () => this.#datetime.getMinutes();\r\n\r\n    getSeconds = () => this.#datetime.getSeconds();\r\n\r\n    setYear = (year) => {\r\n        this.#datetime.setYear(year);\r\n        return this;\r\n    }\r\n\r\n    setMonth = (month) => {\r\n        this.#datetime.setMonth(month);\r\n        return this;\r\n    }\r\n\r\n    setDate = (date) => {\r\n        this.#datetime.setDate(date);\r\n        return this;\r\n    }\r\n\r\n    setHour = (hour) => {\r\n        this.#datetime.setHours(hour);\r\n        return this;\r\n    }\r\n\r\n    setMin = (min) => {\r\n        this.#datetime.setMinutes(min);\r\n        return this;\r\n    }\r\n\r\n    setSec = (sec) => {\r\n        this.#datetime.setSeconds(sec);\r\n        return this;\r\n    }\r\n\r\n    setMilli = (milli) => {\r\n        this.#datetime.setMilliseconds(milli);\r\n        return this;\r\n    }\r\n\r\n    valueOf = () => this.#datetime.valueOf();\r\n\r\n    hour (twenty_four = true, lead0 = true) {\r\n        let hour = this.datetime.getHours();\r\n        if (!twenty_four) {\r\n            hour = hour % 12;\r\n            hour = hour === 0 ? 12 : hour;\r\n        }\r\n        return lead0 ? Num.lead0(hour) : hour;\r\n    }\r\n\r\n    min (lead0 = true) {\r\n        let min = this.datetime.getMinutes();\r\n        return lead0 ? Num.lead0(min) : min;\r\n    }\r\n\r\n    sec (lead0 = true) {\r\n        let sec = this.datetime.getSeconds();\r\n        return lead0 ? Num.lead0(sec) : sec;\r\n    }\r\n\r\n    year () { return this.datetime.getFullYear(); }\r\n\r\n    month (lead0 = true) {\r\n        let month = this.datetime.getMonth() + 1;\r\n        return lead0 ? Num.lead0(month) : month;\r\n    }\r\n\r\n    date (lead0 = true) {\r\n        let date = this.datetime.getDate();\r\n        return lead0 ? Num.lead0(date) : date;\r\n    }\r\n\r\n    day(short = true) {\r\n        let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        let day = days[this.datetime.getDay()];\r\n        return short ? day.slice(0, 3) : day;\r\n    }\r\n\r\n    monthStr(short = true) {\r\n        let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        let month = months[this.month() - 1];\r\n        return short ? month.slice(0, 3) : month;\r\n    }\r\n\r\n    ampm(uppercase = true) {\r\n        let hour = this.datetime.getHours() + 1;\r\n        if (hour >= 12 && hour <= 23) {\r\n            return uppercase ? 'PM' : 'pm';\r\n        } else { return uppercase ? 'AM' : 'am'; }\r\n    }\r\n\r\n    strTime24(sec = true) {\r\n        if (sec) return `${this.hour()}:${this.min()}:${this.sec()}`;\r\n        else return `${this.hour()}:${this.min()}`;\r\n    }\r\n\r\n    strTime(sec = true, ampm = true, uppercase = true) {\r\n        if (sec) {\r\n            if (ampm)\r\n                return `${this.hour(false)}:${this.min()}:${this.sec()} ${this.ampm(uppercase)}`;\r\n            else\r\n                return `${this.hour(false)}:${this.min()}:${this.sec()}`;\r\n        } else {\r\n            if (ampm)\r\n                return `${this.hour(false)}:${this.min()} ${this.ampm(uppercase)}`;\r\n            else\r\n                return `${this.hour(false)}:${this.min()}`;\r\n        }\r\n    }\r\n\r\n    strDate(separated = false) {\r\n        if (separated) return `${this.date()}-${this.month()}-${this.year()}`;\r\n        else return `${this.date()} ${this.monthStr(true)}, ${this.year()}`;\r\n    }\r\n\r\n    strDateTime() {\r\n        return `${this.date()} ${this.monthStr()} ${this.year()}, ${this.hour()}:${this.min()}`;\r\n    }\r\n\r\n    get datetime () { return this.#datetime; }\r\n\r\n    static isoNow = () => { return new Shomoy().iso(); };\r\n\r\n    static secInMin(of) { return 60 * of; }\r\n\r\n    static secInHour(of) { return 60 * 60 * of; }\r\n\r\n    static secInDay(of) { return 60 * 60 * 24 * of; }\r\n\r\n    static msInDay(of) { return 1000 * 60 * 60 * 24 * of; }\r\n\r\n    static clone(shomoy) {\r\n        if (!shomoy instanceof Shomoy) throw new Error('Argument must be instance of Shomoy.');\r\n        return new Shomoy(shomoy);\r\n    }\r\n\r\n    /**\r\n     * For a specified month and year, it returns Date for the first of day of the month.\r\n     * <b>Month is not zero based. January is at 1.</b> If no month & year specified, it\r\n     * returns for the current month.\r\n     *\r\n     * @param {number} month Month\r\n     * @param {number} year Year\r\n     * @return {Date} Date object for the first of the month as specified\r\n     * */\r\n    static firstDayOfMonth(month, year) {\r\n        let now = new Shomoy();\r\n\r\n        if (!Number.isSafeInteger(year)) year = now.getYear();\r\n        month = !Number.isSafeInteger(month) ? now.getMonth() : month-1;\r\n\r\n        now.setYear(year).setMonth(month).setDate(1).setHour(0).setMin(0).setSec(0).setMilli(0);\r\n        return now.datetime;\r\n    }\r\n\r\n    /**\r\n     * For a specified month and year, it returns Date for the last of day of the month.\r\n     * <b>Month is not zero based. January is at 1.</b> If no month & year specified, it\r\n     * returns for the current month.\r\n     *\r\n     * @param {number} month Month\r\n     * @param {number} year Year\r\n     * @return {Date} Date object for the last of the month as specified\r\n     * */\r\n    static lastDayOfMonth(month, year) {\r\n        let shomoy = new Shomoy();\r\n\r\n        if (!Number.isSafeInteger(year)) year = shomoy.getYear();\r\n        month = !Number.isSafeInteger(month) ? shomoy.getMonth() : month-1;\r\n\r\n        shomoy.setYear(year).setMonth(month+1).setDate(0).setHour(0).setMin(0).setSec(0).setMilli(0);\r\n        return shomoy.datetime;\r\n    }\r\n\r\n    /**\r\n     * For a time range, specified by month & year pair in two arrays (since & to), it calculates\r\n     * start & end times in Shomoy for each week found within the range specified.\r\n     *\r\n     * End range it not inclusive.\r\n     *\r\n     * For each week, it composes objects containing array of time range. Both key & value can be\r\n     * derived using decorator functions. Decorator functions take on from and to shomoy objects\r\n     * in order. <b>End range is not inclusive.</b>\r\n     *\r\n     * If no range is specified, then the current month & year is calculated only.\r\n     *\r\n     * Months are not zero. January is always 1 in this case. The week start from Monday.\r\n     *\r\n     * @param {Array} since Containing the month and year in order.\r\n     * @param {Array} to Containing the month and year in order.\r\n     * @param {function(Shomoy, Shomoy)} keyDecFn Decorator function for keys.\r\n     * @param {function(Shomoy, Shomoy)} valDecFn Decorator function for values.\r\n     * @return {Array} Containing objects of time range values under keys as specified by decorator functions.\r\n     * */\r\n    static listWeek(since = [], to = [], keyDecFn = null, valDecFn = null) {\r\n        const WEEK_START = 1;\r\n\r\n        let valDecorator = valDecFn || Shomoy.#valDecorator;\r\n        let keyDecorator = keyDecFn || Shomoy.#weekKeyDecorator;\r\n\r\n        let weeks = [];\r\n\r\n        // get the limit parameters\r\n        let now = new Date();\r\n\r\n        let monthTo = Number.isSafeInteger(to[0]) ? (to[0] - 1) : (now.getMonth() + 1) ;\r\n        let yearTo = to[1] || now.getFullYear();\r\n\r\n        let monthFrom = Number.isSafeInteger(since[0]) ? (since[0] - 1) : now.getMonth();\r\n        let yearFrom = since[1] || now.getFullYear();\r\n\r\n        // build up shomoy objects for getting start and end limit\r\n        let end = new Shomoy(Shomoy.firstDayOfMonth(monthTo, yearTo)).addSec(-1).valueOf();\r\n\r\n        // construct a shomoy with given month and year\r\n        let shomoy  = new Shomoy(Shomoy.firstDayOfMonth(monthFrom, yearFrom));\r\n\r\n        // start with the 'from' month, where we may find broken week and discard that week\r\n        let momStartDay = shomoy.getDay();\r\n        if (momStartDay !== WEEK_START) {\r\n            // find out how far the next week start day is\r\n            // if it is sunday(0) which is one day to monday.\r\n            let daysTo = (momStartDay === 0) ? 1 : 8 - momStartDay;\r\n            shomoy.addDay(daysTo);\r\n        }\r\n\r\n        let makeStop = false;\r\n\r\n        while (true) {\r\n            if (makeStop) break;\r\n\r\n            let currentMilli = shomoy.valueOf();\r\n\r\n            // are we exceeding the limit?\r\n            if (currentMilli >= end) {\r\n                break;\r\n            }\r\n\r\n            let to = Shomoy.clone(shomoy);\r\n            to.addDay(7).addSec(-1);\r\n\r\n            let obj = {};\r\n            let key1 = keyDecorator(shomoy, to);\r\n            obj[key1] = valDecorator(shomoy, to);\r\n            weeks.push(obj);\r\n\r\n            shomoy.addDay(7);\r\n        }\r\n\r\n        return weeks;\r\n    }\r\n\r\n    /**\r\n     * For a time range, specified by month & year pair in two arrays (since & to), it calculates\r\n     * start & end times in Shomoy for each month found within the range specified. <b>End range\r\n     * is not inclusive.</b>\r\n     *\r\n     * If no range is specified, then the current month & year is calculated only.\r\n     *\r\n     * For each month, it composes objects containing array of time range. Both key & value can be\r\n     * derived using decorator functions. Decorator functions take on from and to shomoy objects\r\n     * in order.\r\n     *\r\n     * Months are not zero. January is always 1 in this case. The week start from Monday.\r\n     *\r\n     * @param {Array} since Containing the month and year in order.\r\n     * @param {Array} to Containing the month and year in order.\r\n     * @param {function(Shomoy)} keyDecFn Decorator function for keys.\r\n     * @param {function(Shomoy, Shomoy)} valDecFn Decorator function for values.\r\n     * @return {Array} Containing objects of time range values under keys as specified by decorator functions.\r\n     * */\r\n    static listMonth(since = [], to = [], keyDecFn = null, valDecFn = null) {\r\n\r\n        // get the limit parameters\r\n        let now = new Date();\r\n\r\n        let monthFrom = Number.isSafeInteger(since[0]) ? (since[0] - 1) : now.getMonth();\r\n        let yearFrom = since[1] || now.getFullYear();\r\n\r\n        let monthTo = Number.isSafeInteger(to[0]) ? (to[0] - 1) : (now.getMonth()) ;\r\n        let yearTo = to[1] || now.getFullYear();\r\n\r\n        let end = new Shomoy(Shomoy.lastDayOfMonth(monthTo, yearTo)).addHour(24).addSec(-1).valueOf();\r\n\r\n        let shomoy = new Shomoy();\r\n        shomoy.setMonth(monthFrom);\r\n        shomoy.setYear(yearFrom);\r\n\r\n        let valDecorator = valDecFn || Shomoy.#valDecorator;\r\n        let keyDecorator = keyDecFn || Shomoy.#dayKeyDecorator;\r\n        let result = [];\r\n\r\n        while(true) {\r\n            let shoA = new Shomoy(Shomoy.firstDayOfMonth(shomoy.getMonth(), shomoy.getYear()));\r\n            let shoB = new Shomoy(Shomoy.lastDayOfMonth(shomoy.getMonth(), shomoy.getYear())).addHour(24).addSec(-1);\r\n            shoA.valueOf();\r\n            let b = shoB.valueOf();\r\n            if (b > end) break;\r\n\r\n            let obj = {};\r\n            obj[keyDecorator(shomoy)] = valDecorator(shoA, shoB);\r\n            result.push(obj);\r\n\r\n            // keep going until break\r\n            shomoy.addMonth(1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * This method adds given seconds, minutes, hours and day as seconds to current time. When no\r\n     * argument is set, then it returns current in milliseconds. All the argument's value will be\r\n     * converted into seconds before they get added to the current time in second except the sec\r\n     * argument.\r\n     *\r\n     * All the arguments values have to be of type number. If not, then an exception is thrown.\r\n     *\r\n     * This method can come in handy in situations like setting cookie value with expiration,\r\n     * calculating future date time etc.\r\n     *\r\n     * @param {number} sec Number of seconds is to be added to the current time in second.\r\n     * @param {number} min Number of minutes is to be added to the current time in second.\r\n     * @param {number} hour Number of hours is to be added to the current time in second.\r\n     * @param {number} day Number of days is to be added to the current time in second.\r\n     *\r\n     * @return {number} Seconds added to the current time as defined by the arguments.\r\n     *\r\n     * @throws {Error} If all the arguments are not of type integer\r\n     * */\r\n    addToNow(sec = 0, min = 0, hour = 0, day = 0) {\r\n        if (Number.isNaN(day) || Number.isNaN(hour) || Number.isNaN(min) || Number.isNaN(sec))\r\n            throw new Error('Make sure day, hour and minute are of type number.');\r\n\r\n        let now = new Date().valueOf();\r\n\r\n        if (sec !== 0) now += sec;\r\n        if (min !== 0) now += min * 60;\r\n        if (hour !== 0) now += hour * 60 * 60;\r\n        if (day !== 0) now += day * 24 * 60 * 60;\r\n\r\n        return now;\r\n    }\r\n\r\n    /**\r\n     * Default value decorator\r\n     *\r\n     * @param {Shomoy} from\r\n     * @param {Shomoy} to\r\n     * */\r\n    static #valDecorator(from, to) {\r\n        let start = from.getTimestamp();\r\n        let end = to.getTimestamp();\r\n        return [start, end];\r\n    };\r\n\r\n    /**\r\n     * Default week key decorator\r\n     *\r\n     * @param {Shomoy} from\r\n     * @param {Shomoy} to\r\n     * */\r\n    static #weekKeyDecorator(from, to) {\r\n        let month = from.getMonth() !== to.getMonth() ? `${from.monthStr()}-${to.monthStr()}` : `${from.monthStr()}`;\r\n        let year = from.getYear() !== to.getYear() ? `${from.year()}-${to.year()}` : `${from.year()}`;\r\n        return `${from.date()}-${to.date()} ${month}, ${year}`;\r\n    };\r\n\r\n    /**\r\n     * Default day key decorator\r\n     *\r\n     * @param {Shomoy} month\r\n     * */\r\n    static #dayKeyDecorator(month) {\r\n        return `${month.monthStr()} ${month.year()}`;\r\n    };\r\n\r\n}","/*\r\n*\t(C) COPRYRIGHT RESERVED BY THE AUTHOR OF THIS SCRIPT\r\n*\r\n*-------------------------------------------------------------------------------------------\r\n*\t\t\t\t\t\t\t\t\t\tSimPro                                             *\r\n*-------------------------------------------------------------------------------------------\r\n*\r\n*\tA Simple JavaScript library for Canvas based Circular Progress Bar. You can dynamically\r\n*\tcreate & manage circular progress bars with variety simple methods & properties.\r\n*\r\n*\t@author Abdul Ahad\r\n*\t@version 1.8\r\n*\t@date Wednesday, August 2, 2017 03:40 AM\r\n*\r\n*\tExample :\r\n*\t\tvar simPro = new SimPro(\"containerDivID\", \"canvasID\", canvasSize);\r\n*\t\tsimPro.setProgress(49.4);\r\n*\r\n*\t\tcontainerDivID - where you want your progressBar/canvas to be\r\n*\t\tcanvasID       - Id for the canvas for later manipulation\r\n*\t\tcanvasSize\t   - size of the progressBar/canvas. Minimum size is 100px\r\n*\r\n*\tFor complete licence and documentation, please refer to the given links below\r\n*\t\tLicence \t  :: http://abdulahad.tk/simPro/licence\r\n*\t\tDocumentation :: http://abdulahad.tk/simPro/documentation\r\n*\r\n*/\r\n\r\nvar SimPro = function(containerId, canvasId, size = 300) {\r\n\r\n    this.developerMode = false;\r\n    if (this.developerMode) console.log(\"initializing()\");\r\n\r\n    if (typeof(containerId) != \"string\") throw \"SimPro() : IllegalArgument - containerId must be string\";\r\n    if (typeof(canvasId) != \"string\") throw \"SimPro() : IllegalArgument - canvasId must be string\";\r\n    if (typeof(size) != \"number\") throw \"SimPro() : IllegalArgument - size must be number\";\r\n    if (size < 100) throw \"SimPro() : IllegalArgument - size must be greater than 99\";\r\n\r\n    var container = document.getElementById(containerId);\r\n    if (container == null) throw \"SimPro() : NullArgument - progress bar container can't be null\";\r\n\r\n    SimPro.STYLE_LINE_BUTT \t= 0;\r\n    SimPro.STYLE_LINE_ROUND = 1;\r\n\r\n    //\tcreate canvas with provided arguments and appeand to the container/holder div\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.id = canvasId;\r\n    canvas.width = canvas.height = size;\r\n    container.appendChild(canvas);\r\n\r\n    this.canvasId = canvasId;\r\n    this.context = canvas.getContext(\"2d\");\r\n\r\n    this.smallGuide = false;\r\n\r\n    // the original width & height of the canvas\r\n    this.size = size;\r\n\r\n    // the half size of the canvas\r\n    this.halfSize;\r\n\r\n    /*\r\n    *\tline width for circular progress bar.\r\n    *\tFor small guide it should be 6% of the size. For big guide be it would be 3% of the size\r\n    */\r\n    this.lineWidth;\r\n\r\n    /*\r\n    *\tline width for guide.\r\n    *\tFor small guide it should be 3% of the size. For big guide be it would be 6% of the size\r\n    */\r\n    this.guideLineWidth;\r\n\r\n    // font size for percentage. This should be half of the halfSize meaning quater to the sizes\r\n    this.fontSize;\r\n\r\n    /*\r\n    *\tthe radius of the circular progress bar. This should be half of the the canvas\r\n    * \twe need to calculate this in such a way that, with lineWidth of the arc for the progress\r\n    *\tdoesn't get cut off by the size of the canvas\r\n    */\r\n    this.radius;\r\n\r\n    // with all those critical properties decleared above, let's calculate them correctly\r\n    this.calculateCanvasDimension();\r\n\r\n    this.progress = 0;\r\n    this.formattedProgress = \"00\";\r\n    this.counterClock = true;\r\n\r\n    this.startPoint = 1.5 * Math.PI;\r\n    this.fullPoint = 2 * Math.PI;\r\n    this.calculateProgress();\r\n\r\n    //\tdefault styles of the progress bar\r\n    this.lineCap = SimPro.STYLE_LINE_BUTT;\r\n    this.fontColor = \"rgba(0,0,0,1)\";\r\n    this.color = \"rgba(0,99,177, 1)\";\r\n    this.guideColor = \"rgba(0,99,177, 0.5)\";\r\n\r\n    this.guideVisibility = true;\r\n    this.floatMode = false;\r\n    this.percentageSignVisibility = true;\r\n\r\n    // after initializing all the properties, let's paint the progressBar with 0 progress\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.calculateCanvasDimension = function() {\r\n\r\n    if (this.developerMode) console.log(\"calculateCanvasDimension()\");\r\n\r\n    this.halfSize = this.size / 2;\r\n\r\n    this.fontSize = this.halfSize / 2;\r\n    this.context.font = this.fontSize + \"px Calibri\";\r\n\r\n    this.calculateArcDimension();\r\n}\r\n\r\nSimPro.prototype.calculateArcDimension = function() {\r\n\r\n    if (this.developerMode) console.log(\"calculateArcDimension()\");\r\n\r\n    var unitSize = this.size / 100;\r\n\r\n    var lineWidthScale = (this.smallGuide) ? 6 : 3;\r\n    var guideScale = (this.smallGuide) ? 3 : 6;\r\n\r\n    this.guideLineWidth = unitSize * guideScale;\r\n    this.lineWidth = unitSize * lineWidthScale;\r\n\r\n    // we calculate radius such a way, so the arc does not get cut off by the dimensions\r\n    var radiusScale = (this.smallGuide) ? this.lineWidth : this.guideLineWidth;\r\n    this.radius = this.halfSize - (radiusScale / 2);\r\n};\r\n\r\nSimPro.prototype.setSize = function(size) {\r\n\r\n    if (this.developerMode) console.log(\"setSize(\" + size + \")\");\r\n\r\n    if (typeof(size) != \"number\") throw \"setSize() : IllegalArgument - argument must be a number\";\r\n\r\n    if (size < 100) throw \"setSize() : IllegalArgument - argument must be greater than 99\";\r\n\r\n    // clear the old size canvas\r\n    this.context.clearRect(0, 0, this.size, this.size);\r\n\r\n    // let's first change the in memory canvas object\r\n    var canvas = document.getElementById(this.canvasId);\r\n    canvas.width = canvas.height = size;\r\n\r\n    this.size = size;\r\n\r\n    // since we have changed the size, then we need to calculate new dimesion based on new size\r\n    this.calculateCanvasDimension();\r\n\r\n    // paint so the changes will be visible instantly\r\n    this.paint();\r\n};\r\n\r\n\r\nSimPro.prototype.calculateProgress = function() {\r\n\r\n    if (this.developerMode) console.log(\"calculateProgress()\");\r\n\r\n    this.endPoint = (this.fullPoint / 100) * this.progress;\r\n    this.endPointSigned = this.counterClock ? (- this.endPoint + this.startPoint) : (this.endPoint +this.startPoint);\r\n};\r\n\r\nSimPro.prototype.formatProgress = function() {\r\n\r\n    if (this.developerMode) console.log(\"formatProgress()\");\r\n\r\n    /*\r\n    *\tsince with progress 0%, lineStyle round draws the arc, even though it should not because\r\n    *\tthe progress is 0%. Let's fix that\r\n    */\r\n    if (this.lineCap == SimPro.STYLE_LINE_ROUND && this.progress <= 0) {\r\n        this.context.lineCap = \"butt\";\r\n    } else {\r\n        this.context.lineCap = (this.lineCap == SimPro.STYLE_LINE_BUTT) ?  \"butt\" :  \"round\";\r\n    }\r\n\r\n    if (this.floatMode) {\r\n        /*\r\n        *\tbecause of JavaScript number representation, the fraction number should be\r\n        *\tfixed to one number after the decimal point\r\n        */\r\n        this.formattedProgress = this.progress.toFixed(1);\r\n\r\n        if (this.formattedProgress == 100) this.formattedProgress = 100;\r\n    } else {\r\n\r\n        this.formattedProgress = this.progress.toFixed(0);\r\n\r\n        /*\r\n        *\tIn order to be precise, when the progress is below 99, we use Math.floor function, so that\r\n        *\tprogress makes sense. For example 67.4 is actually 67% progress.\r\n        *\r\n        *\tWhen the progress is above 99, we use Math.round function to obtain accuracy. For example if\r\n        *\tprogress is 99.4 then it should be 99. But if the progress is 99.5 then it is 100% progress\r\n        */\r\n        this.formattedProgress = (this.formattedProgress < 99) ? Math.floor(this.formattedProgress) : Math.round(this.formattedProgress);\r\n\r\n        this.formattedProgress = (this.formattedProgress < 10) ? (\"0\" + this.formattedProgress) : this.formattedProgress;\r\n    }\r\n\r\n    this.formattedProgress += this.percentageSignVisibility ? \"%\" : \"\";\r\n};\r\n\r\n\r\nSimPro.prototype.setProgress = function(progress) {\r\n\r\n    if (this.developerMode) console.log(\"setProgress(\" + progress + \")\");\r\n\r\n    if (typeof(progress) != \"number\" ) throw \"setProgress() : IllegalArgument - argument must be a number\";\r\n\r\n    if (progress > 100 || progress < 0) throw \"setProgress() : IllegalArgument - argument must be between 0 - 100\";\r\n\r\n    this.progress = progress;\r\n    this.calculateProgress();\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.getProgress = function() {\r\n\r\n    //\twe return progress based on floatMode\r\n    var progressValue = (this.floatMode) ? this.progress.toFixed(1) : this.progress.toFixed(0);\r\n\r\n    if (this.developerMode) console.log(\"getProgress() : \" + progressValue);\r\n\r\n    return progressValue;\r\n};\r\n\r\nSimPro.prototype.paint = function() {\r\n\r\n    if (this.developerMode) console.log(\"paint()\");\r\n\r\n    /*\r\n    *\tbefore painting progress, first format progress string & adjust lineCap for\r\n    *\tprogress 0% if lineCap was choose to be Round\r\n    */\r\n    this.formatProgress();\r\n\r\n    this.context.clearRect(0, 0, this.size, this.size);\r\n\r\n    if (this.developerMode)\tthis.paintRuler();\r\n\r\n    // paint the guide arc\r\n    if (this.guideVisibility) {\r\n        this.context.beginPath();\r\n        this.context.lineWidth = this.guideLineWidth;\r\n        this.context.strokeStyle = this.guideColor;\r\n        this.context.arc(this.halfSize, this.halfSize, this.radius, 0, this.fullPoint);\r\n        this.context.stroke();\r\n    }\r\n\r\n    // paint the progress arc\r\n    this.context.beginPath();\r\n    this.context.lineWidth = this.lineWidth;\r\n    this.context.strokeStyle = this.color;\r\n    this.context.arc(this.halfSize, this.halfSize, this.radius, this.startPoint, this.endPointSigned, this.counterClock);\r\n    this.context.stroke();\r\n\r\n\r\n    // paint the text\r\n    this.context.fillStyle = this.fontColor;\r\n    this.context.textAlign = \"center\";\r\n    this.context.textBaseline = \"middle\";\r\n    this.context.fillText(this.formattedProgress, this.halfSize, this.halfSize);\r\n};\r\n\r\nSimPro.prototype.setLineCap = function(lineCap) {\r\n\r\n    if (this.developerMode) console.log(\"setLineCap(\" + lineCap + \")\");\r\n\r\n    if ((lineCap != SimPro.STYLE_LINE_ROUND) && (lineCap != SimPro.STYLE_LINE_BUTT))\r\n        throw \"setLineCap() : IllegalArgument - argument must be constant of \\\"SimPro.STYLE_LINE_BUTT\\\" or \\\"SimPro.STYLE_LINE_ROUND\\\"\";\r\n\r\n    this.lineCap = lineCap;\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setFloatMode = function (floatMode) {\r\n\r\n    if (this.developerMode) console.log(\"setFloatMode(\" + floatMode + \")\");\r\n\r\n    if (typeof(floatMode) != \"boolean\" ) throw \"setFloatMode() : IllegalArgument - Argument must be true/false\";\r\n\r\n    this.floatMode = floatMode;\r\n    this.paint();\r\n}\r\n\r\nSimPro.prototype.setSmallGuide = function(smallGuide) {\r\n\r\n    if (this.developerMode) console.log(\"setSmallGuide(\" + smallGuide + \")\");\r\n\r\n    if (typeof(smallGuide) != \"boolean\" ) throw \"setSmallGuide() : IllegalArgument - Argument must be true/false\";\r\n\r\n    this.smallGuide = smallGuide;\r\n    this.calculateArcDimension();\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setPercentageSignVisibility = function(visibility) {\r\n\r\n    if (this.developerMode) console.log(\"setPercentageSignVisibility(\" + visibility + \")\");\r\n\r\n    if (typeof(visibility) != \"boolean\" ) throw \"setPercentageSignVisibility() : IllegalArgument - Argument must be true/false\";\r\n\r\n    this.percentageSignVisibility = visibility;\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setCounterClock = function(counterClock) {\r\n\r\n    if (this.developerMode) console.log(\"setCounterClock(\" + counterClock + \")\");\r\n\r\n    if (typeof(counterClock) != \"boolean\" ) throw \"setCounterClock() : IllegalArgument - Argument must be true/false\";\r\n\r\n    this.counterClock = counterClock;\r\n    this.calculateProgress();\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setFontColor = function(color) {\r\n\r\n    if (this.developerMode) console.log(\"setFontColor(\" + color + \")\");\r\n\r\n    if (typeof(color) != \"string\" ) throw \"setFontColor() : IllegalArgument - Argument must be a valid color string\";\r\n\r\n    this.fontColor = color;\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setProgressBarColor = function(color) {\r\n\r\n    if (this.developerMode) console.log(\"setProgressBarColor(\" + color + \")\");\r\n\r\n    if (typeof(color) != \"string\" ) throw \"setProgressBarColor() : IllegalArgument - Argument must be a valid color string\";\r\n\r\n    this.color = color;\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setGuideColor = function(color) {\r\n\r\n    if (this.developerMode) console.log(\"setGuideColor(\" + color + \")\");\r\n\r\n    if (typeof(color) != \"string\" ) throw \"setGuideColor() : IllegalArgument - Argument must be a valid color string\";\r\n\r\n    this.guideColor = color;\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setGuideVisibility = function(visibility) {\r\n\r\n    if (this.developerMode) console.log(\"setGuideVisibility(\" + visibility + \")\");\r\n\r\n    if (typeof(visibility) != \"boolean\" ) throw \"setGuideVisibility() : IllegalArgument - Argument must be true/false\";\r\n\r\n    this.guideVisibility = visibility;\r\n    this.paint();\r\n};\r\n\r\nSimPro.prototype.setDeveloperMode = function(mode) {\r\n\r\n    if (typeof(mode) != \"boolean\" ) throw \"setDeveloperMode() : IllegalArgument - Argument must be true/false\";\r\n\r\n    this.developerMode = mode;\r\n\r\n    if (this.developerMode) console.log(\"turnOnDeveloperMode(\" + mode + \")\");\r\n\r\n    this.paintRuler();\r\n};\r\n\r\nSimPro.prototype.paintRuler = function() {\r\n\r\n    console.log(\"paintRuler()\");\r\n\r\n    this.context.strokeStyle = \"greenyellow\";\r\n    this.context.lineWidth = 1;\r\n\r\n    this.context.beginPath();\r\n    this.context.lineTo(0, this.halfSize);\r\n    this.context.lineTo(this.size, this.halfSize);\r\n    this.context.stroke();\r\n\r\n    this.context.beginPath();\r\n    this.context.lineTo(this.halfSize, 0);\r\n    this.context.lineTo(this.halfSize, this.size);\r\n    this.context.stroke();\r\n\r\n    this.context.strokeRect(0, 0, this.size - 1, this.size - 1);\r\n    this.context.stroke();\r\n\r\n    console.log(\"\");\r\n};\r\n","\r\n/*\r\n* Any feedback to the user can be displayed at the right bottom side of the document\r\n* with auto hiding animation or can be shown sticky. Toast can invoke callback if set\r\n* when the toast has been done with hiding.\r\n*\r\n* It also has a feature which can look into the cookie to see if any toast is pending to\r\n* show on document ready event and after showing the message it clears the toast cookies.\r\n* */\r\n(() => {\r\n\r\n    class Toast {\r\n\r\n        #toastMsg = 'A sweet and delicious toast to eat! 😎';\r\n\r\n        ERROR = -1;\r\n        WARNING = 0;\r\n        SUCCESS = 1;\r\n        INFO = 2;\r\n\r\n        #delay;\r\n\r\n        #injected = false;\r\n        #toast;\r\n        #icon;\r\n        #msg;\r\n        #guide;\r\n        #bar;\r\n\r\n        #autoHide;\r\n        #callback;\r\n\r\n        error(msg, autoHide = true, callback = null, delay = 3) {\r\n            this.show(this.ERROR, msg, autoHide, callback, delay);\r\n        }\r\n\r\n        warning(msg, autoHide = true, callback = null, delay = 3) {\r\n            this.show(this.WARNING, msg, autoHide, callback, delay);\r\n        }\r\n\r\n        success(msg, autoHide = true, callback = null, delay = 3) {\r\n            this.show(this.SUCCESS, msg, autoHide, callback, delay);\r\n        }\r\n\r\n        info(msg, autoHide = true, callback = null, delay = 3) {\r\n            this.show(this.INFO, msg, autoHide, callback, delay);\r\n        }\r\n\r\n        show(type, msg, autoHide = true, callback = null, delay = 3) {\r\n            this.#stopAnimation();\r\n\r\n            this.#toastMsg = msg;\r\n            this.#autoHide = autoHide;\r\n            this.#callback = callback;\r\n            this.#delay = delay;\r\n\r\n            // make sure we have injected DOM into the document\r\n            this.#injectDOM();\r\n\r\n            // hider bar border, if it was showing previously\r\n            $(this.#bar).hide();\r\n\r\n            // remove listeners from the toast, if added previously\r\n            this.#removeListener();\r\n\r\n            if (this.#autoHide) this.#addListener();\r\n\r\n            // apply themes, styles to toast DOMs and show the toast with animation\r\n            this.#setup(type);\r\n\r\n            if (this.#autoHide) {\r\n                // show bar border\r\n                $(this.#bar).show();\r\n                this.#startAnimation();\r\n            }\r\n        }\r\n\r\n        #setup(type) {\r\n            this.hide();\r\n            this.#decorate(type);\r\n\r\n            $(this.#toast).show().animate({right: 0}, 750, 'swing');\r\n        }\r\n\r\n        #addListener() {\r\n            $(this.#toast).on('mouseenter', () => { this.#stopAnimation(); });\r\n            $(this.#toast).on('mouseleave', () => { this.#startAnimation(); });\r\n        }\r\n\r\n        #removeListener() {\r\n            $(this.#toast).off('mouseenter, mouseleave');\r\n        }\r\n\r\n        #startAnimation() {\r\n            $(this.#bar).css('width', '0');\r\n            $(this.#bar).delay(750).animate({width: '100%'}, this.#delay * 1000, 'linear', () => {\r\n                $(this.#toast).delay(2000).animate({'right': '-360px'}, 1000, 'swing');\r\n                if (this.#callback != null) this.#callback();\r\n            });\r\n        }\r\n\r\n        #stopAnimation() { $(this.#bar).stop(); }\r\n\r\n        #injectDOM() {\r\n            if (this.#injected) return;\r\n\r\n            let dom = `\r\n                <div id=\"toast\" style=\"display: none; overflow: clip; position: fixed; right: -360px; bottom: 32px; min-width: 280px; max-width: 360px; font-size: 0.98em; line-height: 1.15em; box-shadow: 1px 1px 2px black; z-index: 9999; border-radius: 0.25rem 0 0 0.25rem;\">\r\n                    <div style=\"display: flex; padding: 16px; align-items: center;\">\r\n                        <span id=\"toast-icon\" style=\"user-select: none; margin-right: 12px; font-size: 24px;\">&#128073;</span>\r\n                        <span id=\"toast-msg\" style=\"line-height: 1.25;\">A sweet and delicious toast to eat!😎😉</span>\r\n                    </div>\r\n                    <div id=\"toast-pro-bar-guide\">\r\n                        <div id=\"toast-pro-bar\" style=\"display: none; width: 100%; height: 1px; margin: 0 0; padding: 2px; background-color: #0B5ED7;\"></div>                \r\n                    </div>\r\n                </div>\r\n            `;\r\n            $('body').append(dom);\r\n\r\n            this.#toast = $(\"#toast\");\r\n            this.#icon = $(\"#toast-icon\");\r\n            this.#msg = $(\"#toast-msg\");\r\n            this.#guide = $(\"#toast-pro-bar-guide\");\r\n            this.#bar = $(\"#toast-pro-bar\");\r\n\r\n            this.#injected = true;\r\n        }\r\n\r\n        #decorate(type) {\r\n            $(this.#msg).text(this.#toastMsg);\r\n\r\n            // theme for different type of toast\r\n            let themeSettings = {\r\n                success :   { color : '#0f5132', bg : '#d1e7dd', guide : '#009A68', bar : '#52C400', icon : '&#9989;'},\r\n                info    :   { color : '#084298', bg : '#CFF4FC', guide : '#0a95b1', bar : '#0DCAF0', icon : '&#128172;'},\r\n                warning :   { color : '#664d03', bg : '#fff3cd', guide : '#937005', bar : '#FFCA2C', icon : '&#128721;'},\r\n                error   :   { color : '#842029', bg : '#f8d7da', guide : '#7A1E27', bar : '#DB3948', icon : '&#9940;'}\r\n            };\r\n\r\n            let theme;\r\n            if (type === this.SUCCESS) theme = themeSettings.success;\r\n            else if (type === this.WARNING) theme = themeSettings.warning;\r\n            else if (type === this.ERROR) theme = themeSettings.error;\r\n            else theme = themeSettings.info;\r\n\r\n            $(this.#toast).css('color', theme.color);\r\n            $(this.#toast).css('background-color', theme.bg);\r\n            $(this.#icon).html(theme.icon);\r\n            $(this.#guide).css('background-color', theme.guide);\r\n            $(this.#bar).css('background-color', theme.bar);\r\n        }\r\n\r\n        hide() { $(this.#toast).css('right', '-360px'); }\r\n\r\n    }\r\n\r\n    window.Toast = new Toast();\r\n\r\n    window.Toast.loadToast = (msg, type = window.Toast.SUCCESS, autoHide = true, delay = 3) => {\r\n        Biscuit.set('toast_msg', msg);\r\n        Biscuit.set('toyast_tpe', type);\r\n        Biscuit.set('toast_auto_hide', autoHide);\r\n        Biscuit.set('toast_delay', delay);\r\n    };\r\n\r\n    jst.run( () => {\r\n        // let's see if we have any cookie message to show\r\n        let msg = Biscuit.getStr('toast_msg', '');\r\n        if (msg.length === 0) return;\r\n\r\n        let type = Biscuit.getInt('toast_type', Toast.INFO);\r\n        let autoHide = Biscuit.getBool('toast_auto_hide', true);\r\n        let delay = Biscuit.getInt('toast_delay', 3);\r\n\r\n        window.Toast.show(type, msg, autoHide, null, delay);\r\n        Biscuit.unset('toast_msg');\r\n        Biscuit.unset('toast_type');\r\n        Biscuit.unset('toast_auto_hide');\r\n        Biscuit.unset('toast_delay');\r\n    });\r\n\r\n})();\r\n"]}